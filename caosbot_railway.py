# Bot Discord Caos - Python
# Arquivo principal do bot

import discord
from discord.ext import commands, tasks
import asyncio
import random
import time
import json
import os
from collections import defaultdict, deque
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler
import re
import aiohttp
from datetime import datetime
import wavelink
from discord.ui import Button, View
import math
import threading
from flask import Flask

# ========================================
# CONFIGURA√á√ÉO LAVALINK COM RETRY
# ========================================
LAVALINK_URL = os.getenv("LAVALINK_URL", "http://127.0.0.1:2333")
LAVALINK_PASSWORD = os.getenv("LAVALINK_PASSWORD", "caosmusic2024")

async def connect_lavalink(bot, identifier=None):
    """Conecta ao Lavalink via HTTPS (Render) sem especificar porta"""
    uri = os.getenv("LAVALINK_URL", "https://lavalink-server-5r3ll.onrender.com")
    password = os.getenv("LAVALINK_PASSWORD", "caosmusic2024")
    secure = True  # Sempre HTTPS no Render

    max_attempts = int(os.getenv("LAVALINK_RETRIES", 15))
    delay = int(os.getenv("LAVALINK_TIMEOUT", 5))

    bot_name = bot.user.name if hasattr(bot, 'user') and bot.user else 'BOT'
    print(f"[{bot_name}] üîå Tentando conectar ao Lavalink em {uri} (HTTPS)")

    for attempt in range(1, max_attempts + 1):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{uri}/version", timeout=aiohttp.ClientTimeout(total=5)) as resp:
                    if resp.status == 200:
                        print(f"[Lavalink] ‚úÖ ({attempt}/{max_attempts}) - Servidor acess√≠vel!")
                        node = wavelink.Node(
                            uri=uri,
                            password=password,
                            secure=secure,
                            identifier=identifier or f"{bot_name}-node"
                        )
                        await wavelink.Pool.connect(client=bot, nodes=[node])
                        print(f"[Lavalink] ‚úÖ Node conectado com sucesso em {uri}")
                        return True
                    else:
                        print(f"[Lavalink] ‚ö†Ô∏è Resposta inesperada ({resp.status}) tentativa {attempt}")
        except Exception as e:
            print(f"[Lavalink] ‚ö†Ô∏è Tentativa {attempt}/{max_attempts} falhou: {e}")
            await asyncio.sleep(delay)

    print("[Lavalink] ‚ùå N√£o foi poss√≠vel conectar ap√≥s m√∫ltiplas tentativas.")
    return False

# ========================================
# SERVIDOR HTTP PARA RENDER (DETECTAR PORTA)
# ========================================
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ CAOSBot est√° rodando!"

@app.route('/health')
def health():
    return {"status": "online", "bot": "CAOSBot", "lavalink": "active"}

def run_web():
    import os
    port = int(os.getenv("PORT", 10000))
    print(f'üåê Servidor HTTP iniciado na porta {port}')
    app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)

# Iniciar servidor HTTP em thread separada
threading.Thread(target=run_web, daemon=True).start()

# Configura√ß√£o do bot
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True  # NECESS√ÅRIO para eventos de entrada/sa√≠da/ban
intents.presences = False  # N√£o precisa de presences

bot = commands.Bot(command_prefix='.', intents=intents)

# ========================================
# SISTEMA ANTI-HIBERNA√á√ÉO COMPLETO (100% GRATUITO)
# ========================================
# Este sistema mant√©m o bot online 24/7 no Render gratuitamente
# Funciona com UptimeRobot fazendo ping a cada 5 minutos

@tasks.loop(minutes=5)  # Ping interno a cada 5 minutos
async def keep_alive():
    """Mant√©m o bot sempre ativo - impede hiberna√ß√£o do Render"""
    try:
        current_time = datetime.now().strftime('%H:%M:%S')
        print(f'üíö [{current_time}] Sistema anti-hiberna√ß√£o ativo! Bot online 24/7')
    except Exception as e:
        print(f'‚ùå Erro no sistema anti-hiberna√ß√£o: {e}')

@keep_alive.before_loop
async def before_keep_alive():
    """Aguarda o bot estar pronto antes de iniciar o sistema"""
    await bot.wait_until_ready()
    print('‚úÖ Bot pronto! Sistema anti-hiberna√ß√£o ATIVADO!')
    print('üåê Configure o UptimeRobot para pingar a URL do Render a cada 5 minutos')

# Evento quando o bot fica online
@bot.event
async def on_ready():
    print(f'‚úÖ {bot.user} est√° online!')
    print(f'üìä Conectado em {len(bot.guilds)} servidor(es)')
    print(f'ü§ñ Bot ID: {bot.user.id}')
    
    # Conectar ao Lavalink com retry
    await connect_lavalink(bot)
    
    # Carregar dados das advert√™ncias
    load_warnings_data()
    
    # Carregar configura√ß√µes de cargos
    load_role_config()
    
    # Carregar configura√ß√µes de boas-vindas
    load_welcome_config()
    
    # INICIAR SISTEMA ANTI-HIBERNA√á√ÉO
    if not keep_alive.is_running():
        keep_alive.start()
        print('üîÑ Sistema anti-hiberna√ß√£o ATIVADO! Bot ficar√° online 24/7')
    
    # Status do bot
    await bot.change_presence(
        activity=discord.Game(name=".play para m√∫sica | O Hub dos sonhos üí≠"),
        status=discord.Status.online
    )

# ========================================
# EVENTO WAVELINK - TOCAR PR√ìXIMA M√öSICA
# ========================================

@bot.event
async def on_wavelink_track_end(payload: wavelink.TrackEndEventPayload):
    """Chamado quando uma m√∫sica termina"""
    player = payload.player
    if not player:
        return
    
    queue_obj = get_queue(player.guild.id)
    
    # Loop da m√∫sica
    if queue_obj.loop_mode == 'song' and queue_obj.current:
        await player.play(queue_obj.current)
        await player.set_volume(queue_obj.volume)
        print(f'üîÇ Loop: {queue_obj.current.title}')
        return
    
    # Loop da fila
    if queue_obj.loop_mode == 'queue' and queue_obj.current:
        queue_obj.queue.append(queue_obj.current)
    
    # Pr√≥xima m√∫sica
    if queue_obj.queue:
        next_track = queue_obj.queue.popleft()
        queue_obj.current = next_track
        queue_obj.skip_votes.clear()
        await player.play(next_track)
        await player.set_volume(queue_obj.volume)
        print(f'üéµ Tocando pr√≥xima: {next_track.title}')
        
        # Atualizar painel
        if queue_obj.control_message:
            view = MusicControlPanel(None, queue_obj)
            embed = await view.create_embed()
            try:
                await queue_obj.control_message.edit(embed=embed, view=view)
            except:
                pass
    else:
        queue_obj.current = None

# ========================================
# EVENTOS DE BOAS-VINDAS/SA√çDA/BAN
# ========================================

@bot.event
async def on_member_join(member):
    """Evento quando algu√©m entra no servidor"""
    try:
        # Autorole
        if welcome_config['autorole_enabled']:
            role = member.guild.get_role(AUTOROLE_ID)
            if role:
                await member.add_roles(role)
                print(f"‚úÖ Cargo {role.name} adicionado a {member.name}")
        
        # Boas-vindas
        if welcome_config['welcome_enabled']:
            channel = member.guild.get_channel(WELCOME_CHANNEL_ID)
            if channel:
                embed = discord.Embed(
                    title=f"üéâ BEM-VINDO(A) AO {member.guild.name.upper()}!",
                    description=f"Ol√° {member.mention}! Seja muito bem-vindo(a) ao nosso servidor!\n\nüé≠ Voc√™ agora √© o **membro #{member.guild.member_count}**\n\nüìú Leia as regras e divirta-se!",
                    color=0xFFA500,  # LARANJA
                    timestamp=datetime.now()
                )
                embed.set_thumbnail(url=member.display_avatar.url)
                embed.set_image(url=WELCOME_GIF)
                embed.set_footer(text=f"ID: {member.id} ‚Ä¢ Sistema de Boas-vindas")
                
                await channel.send(embed=embed)
                print(f"üëã Boas-vindas enviadas para {member.name}")
                
    except Exception as e:
        print(f"‚ùå Erro no evento de entrada: {e}")

@bot.event
async def on_member_remove(member):
    """Evento quando algu√©m sai do servidor"""
    try:
        if welcome_config['goodbye_enabled']:
            # Verificar se o usu√°rio foi banido (n√£o mostrar mensagem de sa√≠da se foi ban)
            try:
                await member.guild.fetch_ban(member)
                # Se chegou aqui, o usu√°rio foi banido - N√ÉO mostrar mensagem de sa√≠da
                print(f"üî® {member.name} foi banido - pulando mensagem de sa√≠da")
                return
            except:
                # Usu√°rio n√£o foi banido, mostrar mensagem de sa√≠da normal
                pass
            
            channel = member.guild.get_channel(GOODBYE_CHANNEL_ID)
            if channel:
                embed = discord.Embed(
                    title=f"üëã {member.name} SAIU DO SERVIDOR",
                    description=f"**{member.name}** saiu do servidor.\n\nüò¢ Esperamos que volte em breve!\n\nüë• Agora temos **{member.guild.member_count} membros**",
                    color=0x3498DB,  # AZUL
                    timestamp=datetime.now()
                )
                embed.set_thumbnail(url=member.display_avatar.url)
                embed.set_image(url=GOODBYE_GIF)
                embed.set_footer(text=f"ID: {member.id} ‚Ä¢ Sistema de Sa√≠da")
                
                await channel.send(embed=embed)
                print(f"üëã Mensagem de sa√≠da enviada para {member.name}")
                
    except Exception as e:
        print(f"‚ùå Erro no evento de sa√≠da: {e}")

# Evita loop de expuls√£o
ALREADY_KICKED = set()

@bot.event
async def on_voice_state_update(member, before, after):
    """Bloqueia bots de entrar em calls protegidas e mostra mensagem de kick"""
    try:
        # Ignorar membros que n√£o est√£o na lista de bots bloqueados
        if member.id not in BLOCKED_BOTS:
            return

        # Ignorar se j√° foi expulso recentemente
        if member.id in ALREADY_KICKED:
            return

        # Verificar se entrou em um canal protegido
        if after.channel and after.channel.id in PROTECTED_VOICE_CHANNELS:
            # Garantir que realmente acabou de entrar
            if before.channel is None or before.channel.id != after.channel.id:
                await asyncio.sleep(0.5)

                try:
                    # Simula um "kick manual" no canal de voz
                    guild = member.guild
                    voice_state = member.voice
                    if voice_state and voice_state.channel:
                        # Remove o bot da call de forma que ele entenda como "kick"
                        await member.edit(voice_channel=None)
                        ALREADY_KICKED.add(member.id)
                        print(f"üö´ Bot {member.name} foi expulso da call {after.channel.name}")

                        # Aguardar 60s antes de liberar o ID novamente (evita loop)
                        await asyncio.sleep(60)
                        ALREADY_KICKED.discard(member.id)

                except Exception as e:
                    print(f"‚ùå Erro ao expulsar bot: {e}")

    except Exception as e:
        print(f"‚ùå Erro no evento de voz: {e}")

@bot.event
async def on_message(message):
    """Sistema de modera√ß√£o autom√°tica e bloqueio de comandos"""
    # Ignorar mensagens do pr√≥prio bot
    if message.author.bot:
        await bot.process_commands(message)
        return
    
    # ========================================
    # BLOQUEIO DE COMANDOS DE M√öSICA EM CALLS PROTEGIDAS
    # ========================================
    
    # Lista de comandos de m√∫sica do Jockie
    music_commands = ['m!p', 'm!play', 'm!join', 'm!summon', 'm!connect']
    
    # Verificar se a mensagem come√ßa com algum comando de m√∫sica
    message_lower = message.content.lower()
    is_music_command = any(message_lower.startswith(cmd) for cmd in music_commands)
    
    if is_music_command:
        # Verificar se o usu√°rio est√° em um canal de voz
        if message.author.voice and message.author.voice.channel:
            voice_channel = message.author.voice.channel
            
            # Verificar se est√° em um canal protegido
            if voice_channel.id in PROTECTED_VOICE_CHANNELS:
                try:
                    # Deletar a mensagem do comando
                    await message.delete()
                    
                    # Enviar aviso
                    embed = discord.Embed(
                        title="üö´ COMANDO BLOQUEADO",
                        description=f"{message.author.mention}, voc√™ n√£o pode usar comandos de m√∫sica neste canal de voz!",
                        color=0xFF0000
                    )
                    embed.add_field(
                        name="‚ùå Canal Atual",
                        value=f"{voice_channel.mention}\n`Comandos de m√∫sica bloqueados`",
                        inline=True
                    )
                    embed.add_field(
                        name="‚úÖ Use nas Calls de M√∫sica",
                        value="Entre em um canal de m√∫sica para usar o bot!",
                        inline=True
                    )
                    embed.set_footer(text="Sistema de Bloqueio ‚Ä¢ Caos Hub")
                    
                    # Enviar e deletar ap√≥s 10 segundos
                    warning = await message.channel.send(embed=embed)
                    await asyncio.sleep(10)
                    await warning.delete()
                    
                    print(f"üö´ Comando de m√∫sica bloqueado de {message.author.name} no canal {voice_channel.name}")
                    return
                    
                except Exception as e:
                    print(f"‚ùå Erro ao bloquear comando de m√∫sica: {e}")
    
    # ========================================
    # IGNORAR MODERADORES PARA SISTEMAS DE PROTE√á√ÉO
    # ========================================
    
    # Ignorar moderadores (usu√°rios com permiss√£o de gerenciar mensagens)
    if message.author.guild_permissions.manage_messages:
        await bot.process_commands(message)
        return
    
    # Processar outros comandos normalmente
    await bot.process_commands(message)

@bot.event
async def on_member_ban(guild, user):
    """Evento quando algu√©m √© banido"""
    try:
        # Mensagem p√∫blica de ban (se ativado)
        if welcome_config['goodbye_enabled']:
            channel = guild.get_channel(GOODBYE_CHANNEL_ID)
            if channel:
                embed = discord.Embed(
                    title=f"üî® {user.name} FOI BANIDO!",
                    description=f"**{user.name}** foi banido do servidor.\n\n‚öñÔ∏è Justi√ßa foi feita!\n\nüë• Agora temos **{guild.member_count} membros**",
                    color=0xFF0000,  # VERMELHO
                    timestamp=datetime.now()
                )
                embed.set_thumbnail(url=user.display_avatar.url)
                embed.set_image(url=BAN_GIF)
                embed.set_footer(text=f"ID: {user.id} ‚Ä¢ Sistema de Banimento")
                
                await channel.send(embed=embed)
                print(f"üî® Mensagem de ban enviada para {user.name}")
        
        # LOG DETALHADA DE BAN
        log_channel = guild.get_channel(BAN_LOG_CHANNEL_ID)
        if log_channel:
            # Buscar informa√ß√µes do ban
            try:
                ban_info = await guild.fetch_ban(user)
                reason = ban_info.reason or "Nenhum motivo fornecido"
            except:
                reason = "N√£o foi poss√≠vel obter o motivo"
            
            # Buscar quem baniu (audit log)
            moderator = None
            try:
                async for entry in guild.audit_logs(limit=5, action=discord.AuditLogAction.ban):
                    if entry.target.id == user.id:
                        moderator = entry.user
                        break
            except:
                pass
            
            # Criar embed detalhada
            log_embed = discord.Embed(
                title="üî® USU√ÅRIO BANIDO",
                description=f"Um membro foi banido do servidor",
                color=0xFF0000,
                timestamp=datetime.now()
            )
            
            log_embed.add_field(
                name="üë§ Usu√°rio Banido",
                value=f"**Nome:** {user.name}\n**Tag:** {user.mention}\n**ID:** `{user.id}`",
                inline=True
            )
            
            if moderator:
                log_embed.add_field(
                    name="üëÆ Moderador",
                    value=f"**Nome:** {moderator.name}\n**Tag:** {moderator.mention}\n**ID:** `{moderator.id}`",
                    inline=True
                )
            else:
                log_embed.add_field(
                    name="üëÆ Moderador",
                    value="N√£o identificado",
                    inline=True
                )
            
            log_embed.add_field(name="\u200b", value="\u200b", inline=True)
            
            log_embed.add_field(
                name="üìù Motivo",
                value=f"```{reason}```",
                inline=False
            )
            
            log_embed.add_field(
                name="üìä Informa√ß√µes Adicionais",
                value=f"**Conta criada em:** <t:{int(user.created_at.timestamp())}:F>\n**Membros restantes:** {guild.member_count}",
                inline=False
            )
            
            log_embed.set_thumbnail(url=user.display_avatar.url)
            log_embed.set_footer(text=f"Sistema de Logs ‚Ä¢ Ban ID: {user.id}")
            
            await log_channel.send(embed=log_embed)
            print(f"üìã Log de ban registrado para {user.name}")
                
    except Exception as e:
        print(f"‚ùå Erro no evento de ban: {e}")

# ========================================
# COMANDOS DE CONVERSA
# ========================================

@bot.command(name='oi')
async def oi_command(ctx):
    saudacoes = [
        'Oi! Como voc√™ est√°? üòä',
        'Ol√°! Tudo bem? üëã',
        'E a√≠! Beleza? ü§ó',
        'Oi oi! Como foi seu dia? ‚ú®',
        'Salve! Tudo certo? üî•'
    ]
    resposta = random.choice(saudacoes)
    
    embed = discord.Embed(
        title="üëã Ol√°!",
        description=resposta,
        color=0x00ff88
    )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='comoesta')
async def comoesta_command(ctx, usuario: discord.Member = None):
    if usuario:
        embed = discord.Embed(
            title="ü§î Como voc√™ est√°?",
            description=f'{usuario.mention}, como voc√™ est√° hoje?',
            color=0x87ceeb
        )
    else:
        embed = discord.Embed(
            title="ü§î Como voc√™ est√°?",
            description='Como voc√™ est√° hoje?',
            color=0x87ceeb
        )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='conversa')
async def conversa_command(ctx):
    topicos = [
        'Qual foi a melhor parte do seu dia hoje?',
        'Se voc√™ pudesse ter qualquer superpoder, qual seria?',
        'Qual √© sua comida favorita?',
        'Voc√™ prefere praia ou montanha?',
        'Qual filme voc√™ assistiria mil vezes?',
        'Se voc√™ pudesse viajar para qualquer lugar, onde seria?',
        'Qual √© sua m√∫sica favorita no momento?',
        'Voc√™ √© mais de acordar cedo ou dormir tarde?',
        'Qual √© seu hobby favorito?',
        'Se voc√™ pudesse jantar com qualquer pessoa, quem seria?'
    ]
    topico = random.choice(topicos)
    
    embed = discord.Embed(
        title="üí≠ T√≥pico de Conversa",
        description=topico,
        color=0xff69b4
    )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='clima')
async def clima_command(ctx):
    perguntas = [
        'Como est√° seu humor hoje? üòä',
        'Que energia voc√™ est√° sentindo hoje? ‚ö°',
        'Como voc√™ descreveria seu dia em uma palavra? üí≠',
        'Est√° se sentindo bem hoje? üòå',
        'Qual √© seu mood de hoje? üé≠'
    ]
    pergunta = random.choice(perguntas)
    
    embed = discord.Embed(
        title="üå§Ô∏è Como est√° seu clima?",
        description=pergunta,
        color=0xffd700
    )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='tchau')
async def tchau_command(ctx):
    despedidas = [
        'Tchau! Foi √≥timo conversar com voc√™! üëã',
        'At√© mais! Cuide-se! üòä',
        'Falou! Volte sempre! ü§ó',
        'Tchau tchau! Tenha um √≥timo dia! ‚òÄÔ∏è',
        'At√© a pr√≥xima! üëã‚ú®'
    ]
    despedida = random.choice(despedidas)
    
    embed = discord.Embed(
        title="üëã Tchau!",
        description=despedida,
        color=0xff6b6b
    )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

# ========================================
# COMANDOS DE INTERA√á√ÉO
# ========================================

@bot.command(name='abraco')
async def abraco_command(ctx, usuario: discord.Member = None):
    abracos = [
        'ü§ó *abra√ßo apertado*',
        'ü´Ç *abra√ßo carinhoso*',
        'ü§ó *abra√ßo virtual*',
        'ü´Ç *abra√ßo de urso*',
        'ü§ó *abra√ßo reconfortante*'
    ]
    abraco = random.choice(abracos)
    
    if usuario:
        await ctx.reply(f'{abraco} para {usuario.mention}!')
    else:
        await ctx.reply(f'{abraco} para voc√™!')

@bot.command(name='elogio')
async def elogio_command(ctx, usuario: discord.Member = None):
    elogios = [
        'Voc√™ √© uma pessoa incr√≠vel! ‚ú®',
        'Seu sorriso ilumina o dia de todo mundo! üòä',
        'Voc√™ tem uma energia muito positiva! üåü',
        'Voc√™ √© super inteligente! üß†',
        'Sua presen√ßa sempre deixa tudo melhor! üí´',
        'Voc√™ √© muito especial! üíñ',
        'Voc√™ tem um cora√ß√£o gigante! ‚ù§Ô∏è',
        'Sua criatividade √© inspiradora! üé®',
        'Voc√™ sempre sabe o que dizer! üí¨',
        'Voc√™ √© uma pessoa √∫nica e especial! ü¶Ñ'
    ]
    elogio = random.choice(elogios)
    
    if usuario:
        await ctx.reply(f'{usuario.mention}, {elogio.lower()}')
    else:
        await ctx.reply(elogio)

@bot.command(name='motivacao')
async def motivacao_command(ctx):
    frases = [
        'Voc√™ √© capaz de coisas incr√≠veis! üí™',
        'Cada dia √© uma nova oportunidade! üåÖ',
        'Acredite em voc√™ mesmo! ‚≠ê',
        'Voc√™ est√° indo muito bem! üëè',
        'Continue seguindo seus sonhos! üåà',
        'Voc√™ √© mais forte do que imagina! üíé',
        'Grandes coisas est√£o por vir! üöÄ',
        'Voc√™ faz a diferen√ßa! üåü',
        'Nunca desista dos seus objetivos! üéØ',
        'Voc√™ tem tudo para dar certo! üçÄ'
    ]
    frase = random.choice(frases)
    await ctx.reply(f'üåü {frase}')

# ========================================
# COMANDOS DE CONTROLE - BOAS-VINDAS/SA√çDA/BAN
# ========================================

@bot.command(name='setupwelcome')
@commands.has_permissions(administrator=True)
async def setup_welcome_command(ctx):
    """Ativa TODO o sistema de boas-vindas/sa√≠da/ban de uma vez"""
    
    # Ativar tudo EXCETO tickets (tickets precisa configurar separado)
    welcome_config['welcome_enabled'] = True
    welcome_config['goodbye_enabled'] = True
    welcome_config['autorole_enabled'] = True
    # N√ÉO ativa tickets automaticamente
    save_welcome_config()
    
    # Criar/atualizar painel
    await update_status_panel(ctx.guild)
    
    embed = discord.Embed(
        title="‚úÖ SISTEMA ATIVADO COM SUCESSO!",
        description="O sistema de boas-vindas, sa√≠da/ban e autorole foi ativado!",
        color=0x00ff88
    )
    embed.add_field(
        name="üìã Configura√ß√µes",
        value=f"üëã **Boas-vindas:** <#{WELCOME_CHANNEL_ID}>\nüëã **Sa√≠da/Ban:** <#{GOODBYE_CHANNEL_ID}>\nüé≠ **Autorole:** <@&{AUTOROLE_ID}>\nüìä **Painel:** <#{STATUS_CHANNEL_ID}>",
        inline=False
    )
    embed.add_field(
        name="‚ÑπÔ∏è Tickets",
        value="Para ativar tickets, use `.ticket config` primeiro, depois `.toggletickets`",
        inline=False
    )
    embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@setup_welcome_command.error
async def setup_welcome_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

@bot.command(name='togglewelcome')
@commands.has_permissions(administrator=True)
async def toggle_welcome_command(ctx):
    """Liga/desliga sistema de boas-vindas"""
    
    welcome_config['welcome_enabled'] = not welcome_config['welcome_enabled']
    save_welcome_config()
    
    # Atualizar painel
    await update_status_panel(ctx.guild)
    
    status = "‚úÖ **ATIVADO**" if welcome_config['welcome_enabled'] else "‚ùå **DESATIVADO**"
    
    embed = discord.Embed(
        title="üîÑ BOAS-VINDAS ATUALIZADO",
        description=f"Sistema de boas-vindas: {status}",
        color=0x00ff88 if welcome_config['welcome_enabled'] else 0xff6b6b
    )
    embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@toggle_welcome_command.error
async def toggle_welcome_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

@bot.command(name='togglegoodbye')
@commands.has_permissions(administrator=True)
async def toggle_goodbye_command(ctx):
    """Liga/desliga sistema de sa√≠da/ban"""
    
    welcome_config['goodbye_enabled'] = not welcome_config['goodbye_enabled']
    save_welcome_config()
    
    # Atualizar painel
    await update_status_panel(ctx.guild)
    
    status = "‚úÖ **ATIVADO**" if welcome_config['goodbye_enabled'] else "‚ùå **DESATIVADO**"
    
    embed = discord.Embed(
        title="üîÑ SA√çDA/BAN ATUALIZADO",
        description=f"Sistema de sa√≠da/ban: {status}",
        color=0x00ff88 if welcome_config['goodbye_enabled'] else 0xff6b6b
    )
    embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@toggle_goodbye_command.error
async def toggle_goodbye_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

@bot.command(name='toggleautorole')
@commands.has_permissions(administrator=True)
async def toggle_autorole_command(ctx):
    """Liga/desliga sistema de autorole"""
    
    welcome_config['autorole_enabled'] = not welcome_config['autorole_enabled']
    save_welcome_config()
    
    # Atualizar painel
    await update_status_panel(ctx.guild)
    
    status = "‚úÖ **ATIVADO**" if welcome_config['autorole_enabled'] else "‚ùå **DESATIVADO**"
    
    embed = discord.Embed(
        title="üîÑ AUTOROLE ATUALIZADO",
        description=f"Sistema de autorole: {status}",
        color=0x00ff88 if welcome_config['autorole_enabled'] else 0xff6b6b
    )
    embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@toggle_autorole_command.error
async def toggle_autorole_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

@bot.command(name='toggletickets')
@commands.has_permissions(administrator=True)
async def toggle_tickets_command(ctx):
    """Liga/desliga sistema de tickets"""
    
    welcome_config['tickets_enabled'] = not welcome_config['tickets_enabled']
    save_welcome_config()
    
    # Tamb√©m atualizar o ticket_config se existir
    guild_id = str(ctx.guild.id)
    if 'ticket_config' in globals():
        if guild_id not in ticket_config:
            ticket_config[guild_id] = {
                'enabled': False,
                'category_id': None,
                'staff_role_ids': [],
                'welcome_message': 'Ol√°! Obrigado por abrir um ticket. Nossa equipe responder√° em breve.'
            }
        ticket_config[guild_id]['enabled'] = welcome_config['tickets_enabled']
        save_ticket_config()
    
    # Atualizar painel
    await update_status_panel(ctx.guild)
    
    status = "‚úÖ **ATIVADO**" if welcome_config['tickets_enabled'] else "‚ùå **DESATIVADO**"
    
    embed = discord.Embed(
        title="üîÑ TICKETS ATUALIZADO",
        description=f"Sistema de tickets: {status}",
        color=0x00ff88 if welcome_config['tickets_enabled'] else 0xff6b6b
    )
    
    # Adicionar info extra se tiver configura√ß√£o
    if 'ticket_config' in globals() and guild_id in ticket_config:
        tconfig = ticket_config[guild_id]
        info_text = ""
        
        if tconfig.get('category_id'):
            category = ctx.guild.get_channel(tconfig['category_id'])
            info_text += f"üìÇ **Categoria:** {category.mention if category else '`N√£o encontrada`'}\n"
        
        if tconfig.get('staff_role_ids'):
            staff_roles = [ctx.guild.get_role(rid) for rid in tconfig['staff_role_ids']]
            staff_roles = [r for r in staff_roles if r]
            if staff_roles:
                info_text += f"üëÆ **Staff:** {', '.join([r.mention for r in staff_roles[:3]])}\n"
        
        if info_text:
            embed.add_field(name="üìã Configura√ß√£o", value=info_text, inline=False)
        else:
            embed.add_field(
                name="‚ö†Ô∏è Aviso",
                value="Configure o sistema com `.ticket config` antes de usar!",
                inline=False
            )
    
    embed.set_footer(text="Sistema de Tickets ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@toggle_tickets_command.error
async def toggle_tickets_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# ========================================
# SISTEMA DE BLOQUEIO DE BOTS EM CALLS
# ========================================

@bot.command(name='blockedcalls')
@commands.has_permissions(administrator=True)
async def blocked_calls_command(ctx):
    """Mostra informa√ß√µes sobre o sistema de bloqueio de bots em calls"""
    
    embed = discord.Embed(
        title="üö´ SISTEMA DE BLOQUEIO DE BOTS",
        description="Sistema autom√°tico que impede bots espec√≠ficos de entrar em canais de voz protegidos",
        color=0xFF0000,
        timestamp=datetime.now()
    )
    
    # Bots bloqueados
    blocked_bots_text = ""
    for bot_id in BLOCKED_BOTS:
        bot = ctx.guild.get_member(bot_id)
        if bot:
            blocked_bots_text += f"‚Ä¢ {bot.mention} (`{bot.name}`)\n"
        else:
            blocked_bots_text += f"‚Ä¢ ID: `{bot_id}` (n√£o encontrado)\n"
    
    embed.add_field(
        name="ü§ñ Bots Bloqueados",
        value=blocked_bots_text or "Nenhum bot configurado",
        inline=False
    )
    
    # Canais protegidos
    protected_channels_text = ""
    for channel_id in PROTECTED_VOICE_CHANNELS:
        channel = ctx.guild.get_channel(channel_id)
        if channel:
            protected_channels_text += f"‚Ä¢ {channel.mention}\n"
        else:
            protected_channels_text += f"‚Ä¢ ID: `{channel_id}` (n√£o encontrado)\n"
    
    embed.add_field(
        name="üîí Canais Protegidos",
        value=protected_channels_text or "Nenhum canal configurado",
        inline=False
    )
    
    embed.add_field(
        name="‚öôÔ∏è Como Funciona",
        value="‚Ä¢ Bloqueia comandos de m√∫sica (`m!p`, `m!play`, etc)\n‚Ä¢ Desconecta bot automaticamente se entrar\n‚Ä¢ Sistema anti-loop com cooldown de 30s",
        inline=False
    )
    
    embed.set_footer(text="Sistema de Bloqueio ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@blocked_calls_command.error
async def blocked_calls_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

@bot.command(name='config_bloqueio')
@commands.has_permissions(administrator=True)
async def config_bloqueio(ctx):
    """Configura√ß√£o simplificada do sistema de bloqueio"""
    embed = discord.Embed(
        title="‚öôÔ∏è Configura√ß√£o do Sistema de Bloqueio",
        color=0x00FFFF,
        timestamp=datetime.now()
    )
    embed.add_field(
        name="ü§ñ Bots Bloqueados", 
        value="\n".join(f"`{b}`" for b in BLOCKED_BOTS),
        inline=False
    )
    embed.add_field(
        name="üîí Canais Protegidos", 
        value="\n".join(f"`{c}`" for c in PROTECTED_VOICE_CHANNELS),
        inline=False
    )
    embed.set_footer(text="Sistema de Bloqueio ‚Ä¢ Caos Hub")
    await ctx.send(embed=embed)

@config_bloqueio.error
async def config_bloqueio_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# ========================================
# COMANDOS DE MODERA√á√ÉO
# ========================================

# IDs dos cargos ADV
ADV_CARGO_1_ID = 1365861145738477598  # ADV 1
ADV_CARGO_2_ID = 1365861187392241714  # ADV 2
ADV_CARGO_3_ID = 1365861225900277832  # ADV 3

# ID do canal de logs
LOG_CHANNEL_ID = 1417638740435800186

# Arquivo para salvar dados das advert√™ncias
WARNINGS_FILE = "warnings_data.json"

# Dicion√°rio para rastrear advert√™ncias dos usu√°rios com detalhes completos
user_warnings = {}
user_warnings_details = {}  # Detalhes das advert√™ncias: motivo, moderador, timestamp

# Sistema de nicknames autom√°ticos por cargo (configurado com IDs reais)
CARGO_PREFIXES = {
    # Cargos de modera√ß√£o do servidor (IDs fornecidos pelo usu√°rio)
    1365633918593794079: "[ADM]",  # Administrador
    1365634226254254150: "[STF]",  # Staff
    1365633102973763595: "[MOD]",  # Moderador
    1365631940434333748: "[SBM]",  # Sub Moderador
}

# Dicion√°rio para salvar configura√ß√µes de cargos
ROLE_CONFIG_FILE = "role_config.json"

# ========================================
# SISTEMA DE BOAS-VINDAS/SA√çDA/BAN
# ========================================

# Configura√ß√µes fixas (IDs fornecidos pelo usu√°rio)
WELCOME_CHANNEL_ID = 1365848708532535369  # Canal de entrada
GOODBYE_CHANNEL_ID = 1365848742355275886  # Canal de sa√≠da/ban
AUTOROLE_ID = 1365630916927553586  # Cargo Membro
STATUS_CHANNEL_ID = 1424157618447974471  # Canal do painel de status

# Canais de logs de modera√ß√£o
KICK_LOG_CHANNEL_ID = 1417645057602752543  # Canal de log de kicks
BAN_LOG_CHANNEL_ID = 1417645081057558568  # Canal de log de bans

# Sistema de bloqueio de bots em calls
BLOCKED_BOTS = [
    411916947773587456,  # Jockie Music
    412347257233604609,  # Jockie 2
    412347553141751808   # Jockie 3
]

PROTECTED_VOICE_CHANNELS = [
    1365675025801412640,  # Call Voice 1
    1365678315905613855,  # Call Voice 2
    1365678337267208266,  # Call Voice 3
    1365678370917978256,  # Call Voice 4
    1365678387573817497,  # Call Voice 5
    1365678408637349891   # Call Voice 6
]

# GIFs
WELCOME_GIF = "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExeWd3ZnNhYm0yN2p2M2UwcnZlY2k1bjNuYjg3b3dvZ3EyY2hhcHZjaCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/1n4iuWZFnTeN6qvdpD/giphy.gif"
GOODBYE_GIF = "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExZmFwZjhxb2k2NnFwajloYXBjMDN2eTJmdzAwMGtmZnhobjNwYTBrayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/QA7TPdyKJvj5Xdjm9A/giphy.gif"
BAN_GIF = "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExbDE4YnhmZms4b29va2JxYnRubnI3cXVybzhsdWJsb3MxZmI3ZDB3eSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/nrXif9YExO9EI/giphy.gif"

# Arquivo de configura√ß√£o
WELCOME_CONFIG_FILE = "welcome_config.json"

# Estado do sistema
welcome_config = {
    'welcome_enabled': False,
    'goodbye_enabled': False,
    'autorole_enabled': False,
    'tickets_enabled': False,
    'status_message_id': None
}

def save_welcome_config():
    """Salva configura√ß√µes do sistema de boas-vindas"""
    try:
        with open(WELCOME_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(welcome_config, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Configura√ß√µes de boas-vindas salvas")
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√µes de boas-vindas: {e}")

def load_welcome_config():
    """Carrega configura√ß√µes do sistema de boas-vindas"""
    global welcome_config
    try:
        if os.path.exists(WELCOME_CONFIG_FILE):
            with open(WELCOME_CONFIG_FILE, 'r', encoding='utf-8') as f:
                welcome_config = json.load(f)
            print(f"‚úÖ Configura√ß√µes de boas-vindas carregadas")
        else:
            print("üìù Arquivo de boas-vindas n√£o encontrado, usando padr√µes")
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√µes de boas-vindas: {e}")

async def update_status_panel(guild):
    """Atualiza o painel de status do sistema"""
    try:
        status_channel = guild.get_channel(STATUS_CHANNEL_ID)
        if not status_channel:
            return
        
        # Pegar canais e cargo
        welcome_channel = guild.get_channel(WELCOME_CHANNEL_ID)
        goodbye_channel = guild.get_channel(GOODBYE_CHANNEL_ID)
        autorole = guild.get_role(AUTOROLE_ID)
        
        # Criar embed do painel (COR PRETA)
        embed = discord.Embed(
            title="üéõÔ∏è PAINEL DE CONTROLE",
            description="**Sistema de Eventos e Automa√ß√£o**",
            color=0x000000,  # PRETO
            timestamp=datetime.now()
        )
        
        # Status Boas-vindas (COM CODE BLOCK)
        welcome_status = "Online" if welcome_config['welcome_enabled'] else "Offline"
        welcome_info = f"**Status**\n```{welcome_status}```\n**Canal:** {welcome_channel.mention if welcome_channel else '`N√£o configurado`'}"
        embed.add_field(
            name="üëã Boas-vindas",
            value=welcome_info,
            inline=True
        )
        
        # Status Sa√≠da/Ban (COM CODE BLOCK)
        goodbye_status = "Online" if welcome_config['goodbye_enabled'] else "Offline"
        goodbye_info = f"**Status**\n```{goodbye_status}```\n**Canal:** {goodbye_channel.mention if goodbye_channel else '`N√£o configurado`'}"
        embed.add_field(
            name="üëã Sa√≠da/Ban",
            value=goodbye_info,
            inline=True
        )
        
        # Espa√ßo em branco para layout
        embed.add_field(name="\u200b", value="\u200b", inline=True)
        
        # Status Autorole (COM CODE BLOCK)
        autorole_status = "Online" if welcome_config['autorole_enabled'] else "Offline"
        autorole_info = f"**Status**\n```{autorole_status}```\n**Cargo:** {autorole.mention if autorole else '`N√£o configurado`'}"
        embed.add_field(
            name="üé≠ Autorole",
            value=autorole_info,
            inline=True
        )
        
        # Status Tickets (COM CODE BLOCK)
        tickets_status = "Online" if welcome_config['tickets_enabled'] else "Offline"
        
        # Pegar info do ticket_config se existir
        guild_id = str(guild.id)
        ticket_info_text = f"**Status**\n```{tickets_status}```"
        
        if 'ticket_config' in globals() and guild_id in ticket_config:
            tconfig = ticket_config[guild_id]
            if tconfig.get('category_id'):
                category = guild.get_channel(tconfig['category_id'])
                ticket_info_text += f"\n**Categoria:** {category.mention if category else '`N√£o encontrada`'}"
            
            if tconfig.get('staff_role_ids'):
                staff_roles = [guild.get_role(rid) for rid in tconfig['staff_role_ids']]
                staff_roles = [r for r in staff_roles if r]
                if staff_roles:
                    ticket_info_text += f"\n**Staff:** {staff_roles[0].mention}"
        
        embed.add_field(
            name="üé´ Tickets",
            value=ticket_info_text,
            inline=True
        )
        
        # Espa√ßo em branco para layout
        embed.add_field(name="\u200b", value="\u200b", inline=True)
        
        # Comandos dispon√≠veis
        embed.add_field(
            name="‚öôÔ∏è Comandos Dispon√≠veis",
            value=(
                "**Configura√ß√£o:**\n"
                "‚Ä¢ `.setupwelcome` - Ativar eventos\n"
                "‚Ä¢ `.ticket config` - Configurar tickets\n\n"
                "**Controles:**\n"
                "‚Ä¢ `.togglewelcome` - Boas-vindas\n"
                "‚Ä¢ `.togglegoodbye` - Sa√≠da/Ban\n"
                "‚Ä¢ `.toggleautorole` - Autorole\n"
                "‚Ä¢ `.toggletickets` - Tickets"
            ),
            inline=False
        )
        
        embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
        
        # Atualizar ou criar mensagem
        if welcome_config['status_message_id']:
            try:
                msg = await status_channel.fetch_message(welcome_config['status_message_id'])
                await msg.edit(embed=embed)
            except:
                # Se n√£o encontrar, criar nova
                msg = await status_channel.send(embed=embed)
                welcome_config['status_message_id'] = msg.id
                save_welcome_config()
        else:
            # Criar nova mensagem
            msg = await status_channel.send(embed=embed)
            welcome_config['status_message_id'] = msg.id
            save_welcome_config()
            
    except Exception as e:
        print(f"‚ùå Erro ao atualizar painel de status: {e}")

def save_role_config():
    """Salva configura√ß√µes de cargos em arquivo JSON"""
    try:
        data = {
            'cargo_prefixes': {str(k): v for k, v in CARGO_PREFIXES.items()}
        }
        with open(ROLE_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Configura√ß√µes de cargos salvas em {ROLE_CONFIG_FILE}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√µes de cargos: {e}")

def load_role_config():
    """Carrega configura√ß√µes de cargos do arquivo JSON"""
    global CARGO_PREFIXES
    try:
        if os.path.exists(ROLE_CONFIG_FILE):
            with open(ROLE_CONFIG_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # Converter chaves de string para int
            loaded_prefixes = {int(k): v for k, v in data.get('cargo_prefixes', {}).items()}
            CARGO_PREFIXES.update(loaded_prefixes)
            
            print(f"‚úÖ Configura√ß√µes de cargos carregadas: {len(CARGO_PREFIXES)} cargos")
        else:
            print("üìù Arquivo de configura√ß√£o de cargos n√£o encontrado, usando padr√µes")
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√µes de cargos: {e}")

# Armazenar nicknames originais
original_nicknames = {}

def save_warnings_data():
    """Salva os dados das advert√™ncias em arquivo JSON"""
    try:
        data = {
            'user_warnings': user_warnings,
            'user_warnings_details': {}
        }
        
        # Converter timestamps para string para serializa√ß√£o JSON
        for user_id, details_list in user_warnings_details.items():
            data['user_warnings_details'][str(user_id)] = []
            for detail in details_list:
                detail_copy = detail.copy()
                if 'timestamp' in detail_copy:
                    detail_copy['timestamp'] = detail_copy['timestamp'].isoformat()
                data['user_warnings_details'][str(user_id)].append(detail_copy)
        
        with open(WARNINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Dados das advert√™ncias salvos em {WARNINGS_FILE}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar dados das advert√™ncias: {e}")

def load_warnings_data():
    """Carrega os dados das advert√™ncias do arquivo JSON"""
    global user_warnings, user_warnings_details
    
    try:
        if os.path.exists(WARNINGS_FILE):
            with open(WARNINGS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            user_warnings = data.get('user_warnings', {})
            # Converter chaves de string para int
            user_warnings = {int(k): v for k, v in user_warnings.items()}
            
            user_warnings_details = {}
            details_data = data.get('user_warnings_details', {})
            
            # Converter timestamps de volta para datetime
            import datetime
            for user_id_str, details_list in details_data.items():
                user_id = int(user_id_str)
                user_warnings_details[user_id] = []
                for detail in details_list:
                    if 'timestamp' in detail and isinstance(detail['timestamp'], str):
                        detail['timestamp'] = datetime.datetime.fromisoformat(detail['timestamp'])
                    user_warnings_details[user_id].append(detail)
            
            print(f"‚úÖ Dados das advert√™ncias carregados: {len(user_warnings)} usu√°rios")
        else:
            print("üìù Arquivo de advert√™ncias n√£o encontrado, iniciando com dados vazios")
            
    except Exception as e:
        print(f"‚ùå Erro ao carregar dados das advert√™ncias: {e}")
        user_warnings = {}
        user_warnings_details = {}

# ID do cargo de mute
MUTE_ROLE_ID = None  # Ser√° criado automaticamente

# ID do cargo de Sub Moderador (substitua pelo ID correto)
SUB_MODERADOR_ROLE_ID = None  # Coloque o ID do cargo aqui

def is_sub_moderator_or_higher():
    """Decorator personalizado para verificar se o usu√°rio √© sub moderador ou tem permiss√µes superiores"""
    async def predicate(ctx):
        # Verificar se √© administrador
        if ctx.author.guild_permissions.administrator:
            return True
        
        # Verificar se tem permiss√µes de modera√ß√£o padr√£o
        if (ctx.author.guild_permissions.manage_roles or 
            ctx.author.guild_permissions.kick_members or 
            ctx.author.guild_permissions.ban_members or
            ctx.author.guild_permissions.manage_messages):
            return True
        
        # Verificar se tem o cargo de Sub Moderador
        if SUB_MODERADOR_ROLE_ID:
            sub_mod_role = ctx.guild.get_role(SUB_MODERADOR_ROLE_ID)
            if sub_mod_role and sub_mod_role in ctx.author.roles:
                return True
        
        # Se n√£o tem nenhuma das condi√ß√µes acima, negar acesso
        return False
    
    return commands.check(predicate)

# Sistemas de prote√ß√£o
message_history = defaultdict(lambda: deque(maxlen=5))  # √öltimas 5 mensagens por usu√°rio
user_message_times = defaultdict(lambda: deque(maxlen=5))  # Timestamps das mensagens
spam_warnings = defaultdict(int)  # Avisos de spam por usu√°rio (0=5msgs, 1=4msgs, 2+=3msgs)

async def get_or_create_mute_role(guild):
    """Obt√©m ou cria o cargo de mute"""
    global MUTE_ROLE_ID
    
    # Se j√° temos o ID salvo, tentar usar ele primeiro
    if MUTE_ROLE_ID:
        mute_role = guild.get_role(MUTE_ROLE_ID)
        if mute_role:
            return mute_role
    
    # Procurar cargo existente por nome
    mute_role = discord.utils.get(guild.roles, name="Muted")
    
    # Se n√£o encontrou, procurar por outros nomes comuns
    if not mute_role:
        common_names = ["Muted", "Mutado", "Silenciado", "Mute"]
        for name in common_names:
            mute_role = discord.utils.get(guild.roles, name=name)
            if mute_role:
                break
    
    if not mute_role:
        try:
            # Criar cargo de mute
            mute_role = await guild.create_role(
                name="Muted",
                color=discord.Color.dark_gray(),
                reason="Cargo de mute criado automaticamente pelo bot"
            )
            
            print(f"‚úÖ Cargo 'Muted' criado com ID: {mute_role.id}")
            
            # Configurar permiss√µes em todos os canais
            channels_configured = 0
            for channel in guild.channels:
                try:
                    if isinstance(channel, discord.TextChannel):
                        await channel.set_permissions(mute_role, send_messages=False, add_reactions=False)
                        channels_configured += 1
                    elif isinstance(channel, discord.VoiceChannel):
                        await channel.set_permissions(mute_role, speak=False, connect=False)
                        channels_configured += 1
                except Exception as e:
                    print(f"Erro ao configurar permiss√µes no canal {channel.name}: {e}")
                    continue
            
            print(f"‚úÖ Permiss√µes configuradas em {channels_configured} canais")
                    
        except Exception as e:
            print(f"‚ùå Erro ao criar cargo de mute: {e}")
            return None
    
    # Salvar o ID para uso futuro
    MUTE_ROLE_ID = mute_role.id
    return mute_role

async def send_adv_log(ctx, usuario, motivo, warning_count, action_type="advertencia"):
    """Envia log detalhado de advert√™ncia para o canal espec√≠fico"""
    try:
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if not log_channel:
            return
        
        # Definir cores e √≠cones baseado no n√≠vel
        if warning_count == 1:
            color = 0xffff00  # Amarelo
            level_icon = "üü°"
            level_name = "ADV 1"
            level_desc = "Primeira Advert√™ncia"
            threat_level = "BAIXO"
        elif warning_count == 2:
            color = 0xff8c00  # Laranja
            level_icon = "üü†"
            level_name = "ADV 2"
            level_desc = "Segunda Advert√™ncia"
            threat_level = "M√âDIO"
        else:
            color = 0xff0000  # Vermelho
            level_icon = "üî¥"
            level_name = "ADV 3"
            level_desc = "Terceira Advert√™ncia + Ban"
            threat_level = "CR√çTICO"
        
        # Criar embed principal
        if action_type == "advertencia":
            embed = discord.Embed(
                title=f"üö® SISTEMA DE ADVERT√äNCIAS - {level_desc.upper()}",
                description=f"{level_icon} **{level_name}** aplicada com sucesso",
                color=color,
                timestamp=ctx.message.created_at
            )
        else:  # remo√ß√£o
            if warning_count == 0:
                embed = discord.Embed(
                    title="üßπ SISTEMA DE ADVERT√äNCIAS - REMO√á√ÉO TOTAL",
                    description="‚úÖ **Todas as advert√™ncias removidas** com sucesso",
                    color=0x00ff00,
                    timestamp=ctx.message.created_at
                )
            else:
                embed = discord.Embed(
                    title="üîÑ SISTEMA DE ADVERT√äNCIAS - REDU√á√ÉO",
                    description="‚úÖ **Advert√™ncia removida** com sucesso",
                    color=0x00ff00,
                    timestamp=ctx.message.created_at
                )
        
        # Informa√ß√µes do usu√°rio punido
        embed.add_field(
            name="üë§ USU√ÅRIO PUNIDO",
            value=f"**Nome:** {usuario.display_name}\n**Tag:** {usuario.name}#{usuario.discriminator}\n**ID:** `{usuario.id}`\n**Men√ß√£o:** {usuario.mention}",
            inline=True
        )
        
        # Informa√ß√µes do moderador
        embed.add_field(
            name="üëÆ MODERADOR",
            value=f"**Nome:** {ctx.author.display_name}\n**Tag:** {ctx.author.name}#{ctx.author.discriminator}\n**ID:** `{ctx.author.id}`\n**Men√ß√£o:** {ctx.author.mention}",
            inline=True
        )
        
        if action_type == "advertencia":
            # N√≠vel de amea√ßa
            embed.add_field(
                name="‚ö†Ô∏è N√çVEL DE AMEA√áA",
                value=f"**Status:** {threat_level}\n**Advert√™ncias:** {warning_count}/3\n**Pr√≥xima a√ß√£o:** {'Ban autom√°tico' if warning_count >= 2 else f'ADV {warning_count + 1}'}",
                inline=True
            )
        
        # Motivo detalhado
        embed.add_field(
            name="üìù MOTIVO DA A√á√ÉO",
            value=f"```{motivo}```",
            inline=False
        )
        
        if action_type == "advertencia":
            # Detalhes da puni√ß√£o
            if warning_count == 1:
                punishment_details = f"üü° **Cargo aplicado:** <@&{ADV_CARGO_1_ID}>\n‚ö†Ô∏è **Consequ√™ncia:** Aviso inicial\nüì¢ **Orienta√ß√£o:** Melhore a conduta"
            elif warning_count == 2:
                punishment_details = f"üü† **Cargo aplicado:** <@&{ADV_CARGO_2_ID}>\nüö® **Consequ√™ncia:** Advert√™ncia s√©ria\n‚ö†Ô∏è **Orienta√ß√£o:** √öLTIMA CHANCE"
            else:
                punishment_details = f"üî¥ **Cargo aplicado:** <@&{ADV_CARGO_3_ID}>\nüíÄ **Consequ√™ncia:** Banimento autom√°tico\nüö´ **Status:** Usu√°rio removido"
            
            embed.add_field(
                name="‚öñÔ∏è DETALHES DA PUNI√á√ÉO",
                value=punishment_details,
                inline=False
            )
        
        # Informa√ß√µes do servidor
        embed.add_field(
            name="üè† INFORMA√á√ïES DO SERVIDOR",
            value=f"**Servidor:** {ctx.guild.name}\n**Canal:** #{ctx.channel.name}\n**Comando:** `{ctx.message.content.split()[0]}`",
            inline=True
        )
        
        # Informa√ß√µes t√©cnicas
        embed.add_field(
            name="üîß INFORMA√á√ïES T√âCNICAS",
            value=f"**Timestamp:** <t:{int(ctx.message.created_at.timestamp())}:F>\n**Message ID:** `{ctx.message.id}`\n**Sistema:** Caos Bot v2.0",
            inline=True
        )
        
        if action_type == "advertencia" and warning_count >= 3:
            # Informa√ß√µes do ban
            embed.add_field(
                name="üî® DETALHES DO BANIMENTO",
                value=f"**Motivo do ban:** 3 advert√™ncias atingidas\n**Tipo:** Autom√°tico\n**Revers√≠vel:** N√£o\n**Data:** <t:{int(ctx.message.created_at.timestamp())}:F>",
                inline=False
            )
        
        # Footer personalizado
        embed.set_footer(
            text=f"Sistema de Modera√ß√£o ‚Ä¢ Caos Hub | Log ID: {ctx.message.id}",
            icon_url=ctx.guild.icon.url if ctx.guild.icon else None
        )
        
        # Thumbnail do usu√°rio
        embed.set_thumbnail(url=usuario.display_avatar.url)
        
        # Autor do embed
        embed.set_author(
            name=f"A√ß√£o executada por {ctx.author.display_name}",
            icon_url=ctx.author.display_avatar.url
        )
        
        await log_channel.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao enviar log: {e}")

@bot.command(name='adv')
@is_sub_moderator_or_higher()
async def adv_command(ctx, usuario: discord.Member = None, *, motivo=None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `.adv @usu√°rio [motivo]`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    # Definir motivo padr√£o se n√£o fornecido
    if motivo is None:
        motivo = "Sem motivo especificado"
    
    # Verificar se o usu√°rio j√° tem advert√™ncias
    user_id = usuario.id
    if user_id not in user_warnings:
        user_warnings[user_id] = 0
    
    user_warnings[user_id] += 1
    warning_count = user_warnings[user_id]
    
    # Salvar detalhes da advert√™ncia
    if user_id not in user_warnings_details:
        user_warnings_details[user_id] = []
    
    import datetime
    user_warnings_details[user_id].append({
        'level': warning_count,
        'motivo': motivo,
        'moderador': ctx.author.display_name,
        'moderador_id': ctx.author.id,
        'timestamp': datetime.datetime.now(),
        'channel': ctx.channel.name
    })
    
    # Salvar dados no arquivo
    save_warnings_data()
    
    try:
        if warning_count == 1:
            # Primeira advert√™ncia - ADV 1
            cargo = ctx.guild.get_role(ADV_CARGO_1_ID)
            if cargo:
                await usuario.add_roles(cargo)
                
                embed = discord.Embed(
                    title="‚ö†Ô∏è PRIMEIRA ADVERT√äNCIA",
                    description=f"**{usuario.display_name}** recebeu sua primeira advert√™ncia!",
                    color=0xffff00
                )
                embed.add_field(
                    name="üìã Detalhes",
                    value="üü° **ADV 1** - Aviso inicial\n‚ö†Ô∏è Comportamento inadequado detectado\nüì¢ Melhore sua conduta no servidor!",
                    inline=False
                )
                embed.add_field(
                    name="üìù Motivo",
                    value=f"`{motivo}`",
                    inline=False
                )
                embed.add_field(
                    name="‚è≠Ô∏è Pr√≥ximo N√≠vel",
                    value="üü† **ADV 2** - Advert√™ncia s√©ria",
                    inline=True
                )
                embed.add_field(
                    name="üë§ Usu√°rio",
                    value=usuario.mention,
                    inline=True
                )
                embed.add_field(
                    name="üëÆ Moderador",
                    value=ctx.author.mention,
                    inline=True
                )
                embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
                await ctx.reply(embed=embed)
                
                # Enviar log detalhado
                await send_adv_log(ctx, usuario, motivo, warning_count)
            else:
                await ctx.reply("‚ùå Cargo ADV 1 n√£o encontrado!")
                
        elif warning_count == 2:
            # Segunda advert√™ncia - ADV 2 (remove ADV 1)
            cargo_antigo = ctx.guild.get_role(ADV_CARGO_1_ID)
            cargo_novo = ctx.guild.get_role(ADV_CARGO_2_ID)
            
            if cargo_antigo and cargo_antigo in usuario.roles:
                await usuario.remove_roles(cargo_antigo)
            
            if cargo_novo:
                await usuario.add_roles(cargo_novo)
                
                embed = discord.Embed(
                    title="üö® SEGUNDA ADVERT√äNCIA",
                    description=f"**{usuario.display_name}** est√° em situa√ß√£o cr√≠tica!",
                    color=0xff8c00
                )
                embed.add_field(
                    name="üìã Detalhes",
                    value="üü† **ADV 2** - Advert√™ncia s√©ria\nüö® Comportamento persistente inadequado\n‚ö†Ô∏è √öLTIMA CHANCE antes do banimento!",
                    inline=False
                )
                embed.add_field(
                    name="üìù Motivo",
                    value=f"`{motivo}`",
                    inline=False
                )
                embed.add_field(
                    name="‚è≠Ô∏è Pr√≥ximo N√≠vel",
                    value="üî¥ **ADV 3** - BANIMENTO AUTOM√ÅTICO",
                    inline=True
                )
                embed.add_field(
                    name="üë§ Usu√°rio",
                    value=usuario.mention,
                    inline=True
                )
                embed.add_field(
                    name="üëÆ Moderador",
                    value=ctx.author.mention,
                    inline=True
                )
                embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
                await ctx.reply(embed=embed)
                
                # Enviar log detalhado
                await send_adv_log(ctx, usuario, motivo, warning_count)
            else:
                await ctx.reply("‚ùå Cargo ADV 2 n√£o encontrado!")
                
        elif warning_count >= 3:
            # Terceira advert√™ncia - BAN (remove cargos anteriores)
            cargo_adv1 = ctx.guild.get_role(ADV_CARGO_1_ID)
            cargo_adv2 = ctx.guild.get_role(ADV_CARGO_2_ID)
            cargo_adv3 = ctx.guild.get_role(ADV_CARGO_3_ID)
            
            # Remover cargos anteriores
            if cargo_adv1 and cargo_adv1 in usuario.roles:
                await usuario.remove_roles(cargo_adv1)
            if cargo_adv2 and cargo_adv2 in usuario.roles:
                await usuario.remove_roles(cargo_adv2)
            
            if cargo_adv3:
                await usuario.add_roles(cargo_adv3)
            
            embed = discord.Embed(
                title="üî® BANIMENTO AUTOM√ÅTICO",
                description=f"**{usuario.display_name}** foi banido do servidor!",
                color=0xff0000
            )
            embed.add_field(
                name="üìã Detalhes",
                value="üî¥ **ADV 3** - Banimento definitivo\nüíÄ Tr√™s advert√™ncias atingidas\nüö´ Usu√°rio removido permanentemente",
                inline=False
            )
            embed.add_field(
                name="üìù Motivo Final",
                value=f"`{motivo}`",
                inline=False
            )
            embed.add_field(
                name="‚öñÔ∏è Motivo do Ban",
                value="3 advert√™ncias - Ban autom√°tico",
                inline=True
            )
            embed.add_field(
                name="üë§ Usu√°rio Banido",
                value=f"{usuario.mention}\n`{usuario.id}`",
                inline=True
            )
            embed.add_field(
                name="üëÆ Moderador",
                value=ctx.author.mention,
                inline=True
            )
            embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
            await ctx.reply(embed=embed)
            
            # Enviar log detalhado
            await send_adv_log(ctx, usuario, motivo, warning_count)
            
            # Banir o usu√°rio
            await usuario.ban(reason=f"3 advert√™ncias - Ban autom√°tico | √öltimo motivo: {motivo}")
            
            # Resetar contador
            user_warnings[user_id] = 0
            
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para gerenciar cargos ou banir usu√°rios!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao aplicar advert√™ncia: {e}")

@adv_command.error
async def adv_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='radv')
@is_sub_moderator_or_higher()
async def radv_command(ctx, usuario: discord.Member = None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!radv @usu√°rio`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    user_id = usuario.id
    
    # Verificar se o usu√°rio tem advert√™ncias
    if user_id not in user_warnings or user_warnings[user_id] == 0:
        embed = discord.Embed(
            title="‚ÑπÔ∏è Sem Advert√™ncias",
            description=f"**{usuario.display_name}** n√£o possui advert√™ncias para remover.",
            color=0x00ff00
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    try:
        current_warnings = user_warnings[user_id]
        new_warnings = current_warnings - 1
        
        # Determinar qual cargo remover e qual aplicar
        cargo_adv1 = ctx.guild.get_role(ADV_CARGO_1_ID)
        cargo_adv2 = ctx.guild.get_role(ADV_CARGO_2_ID)
        cargo_adv3 = ctx.guild.get_role(ADV_CARGO_3_ID)
        
        cargo_removido = ""
        cargo_aplicado = ""
        
        if current_warnings == 3:
            # De ADV 3 para ADV 2
            if cargo_adv3 and cargo_adv3 in usuario.roles:
                await usuario.remove_roles(cargo_adv3)
                cargo_removido = "ADV 3"
            if cargo_adv2:
                await usuario.add_roles(cargo_adv2)
                cargo_aplicado = "ADV 2"
        elif current_warnings == 2:
            # De ADV 2 para ADV 1
            if cargo_adv2 and cargo_adv2 in usuario.roles:
                await usuario.remove_roles(cargo_adv2)
                cargo_removido = "ADV 2"
            if cargo_adv1:
                await usuario.add_roles(cargo_adv1)
                cargo_aplicado = "ADV 1"
        elif current_warnings == 1:
            # De ADV 1 para sem advert√™ncia
            if cargo_adv1 and cargo_adv1 in usuario.roles:
                await usuario.remove_roles(cargo_adv1)
                cargo_removido = "ADV 1"
            cargo_aplicado = "Nenhum"
        
        # Atualizar contador
        user_warnings[user_id] = new_warnings
        
        embed = discord.Embed(
            title="‚úÖ ADVERT√äNCIA REMOVIDA",
            description=f"**{usuario.display_name}** teve 1 advert√™ncia removida!",
            color=0x00ff00
        )
        embed.add_field(
            name="üìã Detalhes",
            value=f"üîÑ **Advert√™ncias:** {current_warnings} ‚Üí {new_warnings}\nüóëÔ∏è **Cargo removido:** {cargo_removido}\n‚ú® **Cargo atual:** {cargo_aplicado}\nüìâ N√≠vel de advert√™ncia reduzido!",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        # Enviar log de remo√ß√£o
        await send_adv_log(ctx, usuario, f"Advert√™ncia removida: {current_warnings} ‚Üí {new_warnings}", new_warnings, "remocao")
        
        # Salvar dados no arquivo
        save_warnings_data()
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para gerenciar cargos!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao remover advert√™ncias: {e}")

@radv_command.error
async def radv_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='radvall')
@is_sub_moderator_or_higher()
async def radvall_command(ctx, usuario: discord.Member = None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!radvall @usu√°rio`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    user_id = usuario.id
    
    # DETEC√á√ÉO INTELIGENTE - Verificar cargos reais do usu√°rio
    cargo_adv1 = ctx.guild.get_role(ADV_CARGO_1_ID)
    cargo_adv2 = ctx.guild.get_role(ADV_CARGO_2_ID)
    cargo_adv3 = ctx.guild.get_role(ADV_CARGO_3_ID)
    
    tem_adv = False
    if (cargo_adv1 and cargo_adv1 in usuario.roles) or \
       (cargo_adv2 and cargo_adv2 in usuario.roles) or \
       (cargo_adv3 and cargo_adv3 in usuario.roles):
        tem_adv = True
    
    # Verificar se o usu√°rio tem advert√™ncias (cargos OU contador)
    if not tem_adv and (user_id not in user_warnings or user_warnings[user_id] == 0):
        embed = discord.Embed(
            title="‚ÑπÔ∏è Sem Advert√™ncias",
            description=f"**{usuario.display_name}** n√£o possui advert√™ncias para remover.",
            color=0x00ff00
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    try:
        # Guardar quantas ADVs tinha
        advs_anteriores = user_warnings.get(user_id, 0)
        
        # Remover cargos
        roles_removidos = []
        
        if cargo_adv1 and cargo_adv1 in usuario.roles:
            await usuario.remove_roles(cargo_adv1, reason=f"Todas ADVs removidas por {ctx.author}")
            roles_removidos.append("ADV 1")
        
        if cargo_adv2 and cargo_adv2 in usuario.roles:
            await usuario.remove_roles(cargo_adv2, reason=f"Todas ADVs removidas por {ctx.author}")
            roles_removidos.append("ADV 2")
        
        if cargo_adv3 and cargo_adv3 in usuario.roles:
            await usuario.remove_roles(cargo_adv3, reason=f"Todas ADVs removidas por {ctx.author}")
            roles_removidos.append("ADV 3")
        
        # Resetar contador
        user_warnings[user_id] = 0
        save_warnings_data()
        
        embed = discord.Embed(
            title="üßπ TODAS ADVERT√äNCIAS REMOVIDAS",
            description=f"**{usuario.display_name}** teve TODAS as advert√™ncias removidas!",
            color=0x00ff00
        )
        embed.add_field(
            name="üìã Detalhes",
            value=f"üßπ **Advert√™ncias anteriores:** {advs_anteriores}\n‚ú® **Cargos removidos:** {', '.join(roles_removidos) if roles_removidos else 'Nenhum'}\nüéâ Usu√°rio com ficha limpa!",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        # Enviar log de remo√ß√£o total
        await send_adv_log(ctx, usuario, "Todas as advert√™ncias removidas pelo moderador", 0, "remocao")
        
        # Salvar dados no arquivo
        save_warnings_data()
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para gerenciar cargos!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao remover advert√™ncias: {e}")

@radvall_command.error
async def radvall_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

# COMANDO SEEADV REMOVIDO - ESTAVA BUGADO

@bot.command(name='debugadv')
@is_sub_moderator_or_higher()
async def debug_adv_command(ctx):
    """Comando de debug para verificar advert√™ncias"""
    
    # Verificar cargos
    cargo_adv1 = ctx.guild.get_role(ADV_CARGO_1_ID)
    cargo_adv2 = ctx.guild.get_role(ADV_CARGO_2_ID) 
    cargo_adv3 = ctx.guild.get_role(ADV_CARGO_3_ID)
    
    debug_text = f"üîç **DEBUG DE ADVERT√äNCIAS**\n\n"
    debug_text += f"**CARGOS ADV:**\n"
    debug_text += f"üü° ADV 1 (ID: {ADV_CARGO_1_ID}): {cargo_adv1.name if cargo_adv1 else '‚ùå N√ÉO ENCONTRADO'}\n"
    debug_text += f"üü† ADV 2 (ID: {ADV_CARGO_2_ID}): {cargo_adv2.name if cargo_adv2 else '‚ùå N√ÉO ENCONTRADO'}\n"
    debug_text += f"üî¥ ADV 3 (ID: {ADV_CARGO_3_ID}): {cargo_adv3.name if cargo_adv3 else '‚ùå N√ÉO ENCONTRADO'}\n\n"
    
    # Verificar usu√°rios com cargos
    users_with_adv = []
    for member in ctx.guild.members:
        if member.bot:
            continue
            
        has_adv1 = cargo_adv1 and cargo_adv1 in member.roles
        has_adv2 = cargo_adv2 and cargo_adv2 in member.roles  
        has_adv3 = cargo_adv3 and cargo_adv3 in member.roles
        
        if has_adv1 or has_adv2 or has_adv3:
            roles = []
            if has_adv1: roles.append("ADV1")
            if has_adv2: roles.append("ADV2") 
            if has_adv3: roles.append("ADV3")
            users_with_adv.append(f"‚Ä¢ {member.display_name}: {', '.join(roles)}")
    
    debug_text += f"**USU√ÅRIOS COM CARGOS ADV:** {len(users_with_adv)}\n"
    if users_with_adv:
        debug_text += "\n".join(users_with_adv)  # TODOS os usu√°rios
    else:
        debug_text += "Nenhum usu√°rio encontrado com cargos ADV"
    
    debug_text += f"\n\n**DADOS SALVOS:** {len(user_warnings)} usu√°rios\n"
    for user_id, warnings in user_warnings.items():  # TODOS os dados salvos
        if warnings > 0:
            member = ctx.guild.get_member(user_id)
            name = member.display_name if member else f"ID:{user_id}"
            debug_text += f"‚Ä¢ {name}: {warnings} advert√™ncias\n"
    
    embed = discord.Embed(
        title="üîç DEBUG DE ADVERT√äNCIAS",
        description=debug_text[:2000],
        color=0x00ffff
    )
    
    await ctx.reply(embed=embed)

@bot.command(name='mute')
@is_sub_moderator_or_higher()
async def mute_command(ctx, usuario: discord.Member = None, *, args=None):
    """Muta usu√°rio com tempo opcional - Uso: .mute @usu√°rio motivo tempo"""
    
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!",
            color=0xff0000
        )
        embed.add_field(
            name="üìù Uso Correto",
            value="`.mute @usu√°rio [motivo] [tempo]`",
            inline=False
        )
        embed.add_field(
            name="üìù Exemplos",
            value="`.mute @Jo√£o spam` (indefinido)\n`.mute @Jo√£o flood 1h` (1 hora)\n`.mute @Jo√£o toxic 30m` (30 minutos)\n`.mute @Jo√£o raid 2d` (2 dias)",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    if usuario == ctx.author:
        await ctx.reply("‚ùå Voc√™ n√£o pode se mutar!")
        return
    
    if usuario.top_role >= ctx.author.top_role:
        await ctx.reply("‚ùå Voc√™ n√£o pode mutar este usu√°rio!")
        return
    
    # Processar argumentos (motivo e tempo)
    motivo = "Sem motivo especificado"
    duracao_texto = "Indefinido"
    duracao_minutos = None
    
    if args:
        import re
        # Procurar padr√£o de tempo (1h, 30m, 2d, etc)
        tempo_match = re.search(r'(\d+)([smhd])', args.lower())
        
        if tempo_match:
            numero = int(tempo_match.group(1))
            unidade = tempo_match.group(2)
            
            # Converter para minutos
            if unidade == 's':  # segundos
                duracao_minutos = numero // 60 if numero >= 60 else 1
                duracao_texto = f"{numero} segundos"
            elif unidade == 'm':  # minutos
                duracao_minutos = numero
                duracao_texto = f"{numero} minutos"
            elif unidade == 'h':  # horas
                duracao_minutos = numero * 60
                duracao_texto = f"{numero} horas"
            elif unidade == 'd':  # dias
                duracao_minutos = numero * 1440
                duracao_texto = f"{numero} dias"
            
            # Limitar a 28 dias (limite do Discord)
            if duracao_minutos > 40320:
                duracao_minutos = 40320
                duracao_texto = "28 dias (m√°ximo)"
            
            # Remover tempo do motivo
            motivo = args.replace(tempo_match.group(0), '').strip()
        else:
            motivo = args
        
        if not motivo:
            motivo = "Sem motivo especificado"
    
    try:
        # Obter ou criar cargo de mute
        mute_role = await get_or_create_mute_role(ctx.guild)
        if not mute_role:
            await ctx.reply("‚ùå Erro ao criar cargo de mute!")
            return
        
        # Verificar se j√° est√° mutado
        if mute_role in usuario.roles:
            await ctx.reply("‚ùå Este usu√°rio j√° est√° mutado!")
            return
        
        # Aplicar mute
        await usuario.add_roles(mute_role, reason=f"Mutado por {ctx.author} | Motivo: {motivo} | Dura√ß√£o: {duracao_texto}")
        
        # Se tem dura√ß√£o, agendar unmute
        if duracao_minutos:
            asyncio.create_task(auto_unmute(usuario, mute_role, duracao_minutos))
        
        embed = discord.Embed(
            title="üîá USU√ÅRIO MUTADO",
            description=f"**{usuario.display_name}** foi mutado com sucesso!",
            color=0x808080
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{motivo}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.add_field(
            name="‚è∞ Dura√ß√£o",
            value=duracao_texto,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except discord.Forbidden:
        pass
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao mutar usu√°rio: {e}")

async def auto_unmute(usuario, mute_role, minutos):
    """Remove mute automaticamente ap√≥s o tempo"""
    import asyncio
    await asyncio.sleep(minutos * 60)
    try:
        if mute_role in usuario.roles:
            await usuario.remove_roles(mute_role, reason="Tempo de mute expirado")
    except:
        pass

@mute_command.error
async def mute_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='unmute')
@is_sub_moderator_or_higher()
async def unmute_command(ctx, usuario: discord.Member = None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `.unmute @usu√°rio`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    try:
        # Obter cargo de mute
        mute_role = await get_or_create_mute_role(ctx.guild)
        if not mute_role:
            await ctx.reply("‚ùå Erro ao encontrar/criar cargo de mute!")
            return
        
        # Verificar se est√° mutado (buscar por qualquer cargo de mute poss√≠vel)
        user_mute_roles = []
        common_mute_names = ["Muted", "Mutado", "Silenciado", "Mute"]
        
        for role in usuario.roles:
            if role.name in common_mute_names or role == mute_role:
                user_mute_roles.append(role)
        
        if not user_mute_roles:
            await ctx.reply("‚ùå Este usu√°rio n√£o est√° mutado!")
            return
        
        # Remover todos os cargos de mute encontrados
        for mute_role_to_remove in user_mute_roles:
            try:
                await usuario.remove_roles(mute_role_to_remove, reason=f"Desmutado por {ctx.author}")
            except Exception as e:
                print(f"Erro ao remover cargo {mute_role_to_remove.name}: {e}")
                continue
        
        embed = discord.Embed(
            title="üîä MUTE REMOVIDO",
            description=f"**{usuario.display_name}** pode falar novamente!",
            color=0x00ff00
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except discord.Forbidden:
        pass  # N√£o mostrar erro se a a√ß√£o foi executada
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao desmutar usu√°rio: {e}")

@unmute_command.error
async def unmute_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

# COMANDO RADVALLSERVER REMOVIDO - CONFORME SOLICITADO

# ========================================
# COMANDOS B√ÅSICOS DE MODERA√á√ÉO
# ========================================

@bot.command(name='kick')
@is_sub_moderator_or_higher()
async def kick_command(ctx, usuario: discord.Member = None, *, motivo="Sem motivo especificado"):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!kick @usu√°rio [motivo]`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario == ctx.author:
        await ctx.reply("‚ùå Voc√™ n√£o pode se expulsar!")
        return
    
    if usuario.top_role >= ctx.author.top_role:
        await ctx.reply("‚ùå Voc√™ n√£o pode expulsar este usu√°rio!")
        return
    
    try:
        # Salvar informa√ß√µes antes de kickar
        user_name = usuario.name
        user_id = usuario.id
        user_avatar = usuario.display_avatar.url
        user_created_at = usuario.created_at
        user_joined_at = usuario.joined_at
        
        # Mensagem de confirma√ß√£o no canal
        embed = discord.Embed(
            title="üë¢ USU√ÅRIO EXPULSO",
            description=f"**{usuario.display_name}** foi expulso do servidor!",
            color=0xff8c00
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{motivo}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=f"{usuario.mention}\n`{usuario.id}`",
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        # Executar kick
        await usuario.kick(reason=f"Expulso por {ctx.author} | Motivo: {motivo}")
        
        # LOG DETALHADA DE KICK
        log_channel = ctx.guild.get_channel(KICK_LOG_CHANNEL_ID)
        if log_channel:
            log_embed = discord.Embed(
                title="üë¢ USU√ÅRIO EXPULSO (KICK)",
                description=f"Um membro foi expulso do servidor",
                color=0xFFA500,  # LARANJA
                timestamp=datetime.now()
            )
            
            log_embed.add_field(
                name="üë§ Usu√°rio Expulso",
                value=f"**Nome:** {user_name}\n**ID:** `{user_id}`",
                inline=True
            )
            
            log_embed.add_field(
                name="üëÆ Moderador",
                value=f"**Nome:** {ctx.author.name}\n**Tag:** {ctx.author.mention}\n**ID:** `{ctx.author.id}`",
                inline=True
            )
            
            log_embed.add_field(name="\u200b", value="\u200b", inline=True)
            
            log_embed.add_field(
                name="üìù Motivo",
                value=f"```{motivo}```",
                inline=False
            )
            
            log_embed.add_field(
                name="üìä Informa√ß√µes do Usu√°rio",
                value=f"**Conta criada em:** <t:{int(user_created_at.timestamp())}:F>\n**Entrou no servidor em:** <t:{int(user_joined_at.timestamp())}:F>\n**Tempo no servidor:** {(datetime.now() - user_joined_at.replace(tzinfo=None)).days} dias",
                inline=False
            )
            
            log_embed.add_field(
                name="üìç Canal da A√ß√£o",
                value=f"{ctx.channel.mention} (`{ctx.channel.name}`)",
                inline=False
            )
            
            log_embed.set_thumbnail(url=user_avatar)
            log_embed.set_footer(text=f"Sistema de Logs ‚Ä¢ Kick ID: {user_id}")
            
            await log_channel.send(embed=log_embed)
            print(f"üìã Log de kick registrado para {user_name}")
        
    except discord.Forbidden:
        pass  # N√£o mostrar erro se a a√ß√£o foi executada
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao expulsar usu√°rio: {e}")

@kick_command.error
async def kick_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='ban')
@is_sub_moderator_or_higher()
async def ban_command(ctx, usuario: discord.Member = None, *, motivo="Sem motivo especificado"):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!ban @usu√°rio [motivo]`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario == ctx.author:
        await ctx.reply("‚ùå Voc√™ n√£o pode se banir!")
        return
    
    if usuario.top_role >= ctx.author.top_role:
        await ctx.reply("‚ùå Voc√™ n√£o pode banir este usu√°rio!")
        return
    
    try:
        embed = discord.Embed(
            title="üî® USU√ÅRIO BANIDO",
            description=f"**{usuario.display_name}** foi banido do servidor!",
            color=0xff0000
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{motivo}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=f"{usuario.mention}\n`{usuario.id}`",
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        await usuario.ban(reason=f"Banido por {ctx.author} | Motivo: {motivo}")
        
    except discord.Forbidden:
        pass  # N√£o mostrar erro se a a√ß√£o foi executada
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao banir usu√°rio: {e}")

@ban_command.error
async def ban_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='timeout')
@is_sub_moderator_or_higher()
async def timeout_command(ctx, usuario: discord.Member = None, *, args=None):
    """Aplica timeout com tempo - Uso: .timeout @usu√°rio motivo tempo"""
    
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!",
            color=0xff0000
        )
        embed.add_field(
            name="üìù Uso Correto",
            value="`.timeout @usu√°rio [motivo] [tempo]`",
            inline=False
        )
        embed.add_field(
            name="üìù Exemplos",
            value="`.timeout @Jo√£o spam 10m` (10 minutos)\n`.timeout @Jo√£o flood 1h` (1 hora)\n`.timeout @Jo√£o toxic 30m` (30 minutos)\n`.timeout @Jo√£o raid 2d` (2 dias)",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    if usuario == ctx.author:
        await ctx.reply("‚ùå Voc√™ n√£o pode se silenciar!")
        return
    
    if usuario.top_role >= ctx.author.top_role:
        await ctx.reply("‚ùå Voc√™ n√£o pode silenciar este usu√°rio!")
        return
    
    # Verificar se j√° est√° em timeout
    if usuario.timed_out_until and usuario.timed_out_until > discord.utils.utcnow():
        await ctx.reply("‚ùå Este usu√°rio j√° est√° em timeout!")
        return
    
    # Processar argumentos (motivo e tempo)
    motivo = "Sem motivo especificado"
    duracao_texto = "10 minutos"
    duracao_minutos = 10  # Padr√£o
    
    if args:
        import re
        # Procurar padr√£o de tempo (1h, 30m, 2d, etc)
        tempo_match = re.search(r'(\d+)([smhd])', args.lower())
        
        if tempo_match:
            numero = int(tempo_match.group(1))
            unidade = tempo_match.group(2)
            
            # Converter para minutos
            if unidade == 's':  # segundos
                duracao_minutos = numero // 60 if numero >= 60 else 1
                duracao_texto = f"{numero} segundos"
            elif unidade == 'm':  # minutos
                duracao_minutos = numero
                duracao_texto = f"{numero} minutos"
            elif unidade == 'h':  # horas
                duracao_minutos = numero * 60
                duracao_texto = f"{numero} horas"
            elif unidade == 'd':  # dias
                duracao_minutos = numero * 1440
                duracao_texto = f"{numero} dias"
            
            # Limitar a 28 dias (limite do Discord)
            if duracao_minutos > 40320:
                duracao_minutos = 40320
                duracao_texto = "28 dias (m√°ximo)"
            
            # Remover tempo do motivo
            motivo = args.replace(tempo_match.group(0), '').strip()
        else:
            motivo = args
        
        if not motivo:
            motivo = "Sem motivo especificado"
    
    try:
        # Calcular dura√ß√£o do timeout (CORRIGIDO - usar datetime.timedelta)
        from datetime import timedelta
        timeout_duration = discord.utils.utcnow() + timedelta(minutes=duracao_minutos)
        
        # Aplicar timeout
        await usuario.timeout(timeout_duration, reason=f"Timeout por {ctx.author.display_name} | Motivo: {motivo}")
        
        embed = discord.Embed(
            title="üîá USU√ÅRIO EM TIMEOUT",
            description=f"**{usuario.display_name}** foi silenciado com sucesso!",
            color=0xffa500
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{motivo}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.add_field(
            name="‚è∞ Dura√ß√£o",
            value=duracao_texto,
            inline=True
        )
        embed.add_field(
            name="üìÖ Expira em",
            value=f"<t:{int(timeout_duration.timestamp())}:F>",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para aplicar timeout neste usu√°rio!")
    except discord.HTTPException as e:
        await ctx.reply(f"‚ùå Erro do Discord ao aplicar timeout: {e}")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro inesperado ao silenciar usu√°rio: {e}")

@timeout_command.error
async def timeout_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='untimeout')
@is_sub_moderator_or_higher()
async def untimeout_command(ctx, usuario: discord.Member = None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!untimeout @usu√°rio`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    try:
        if usuario.timed_out_until is None:
            await ctx.reply("‚ùå Este usu√°rio n√£o est√° silenciado!")
            return
        
        embed = discord.Embed(
            title="üîä SILENCIAMENTO REMOVIDO",
            description=f"**{usuario.display_name}** pode falar novamente!",
            color=0x00ff00
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        await usuario.timeout(None, reason=f"Timeout removido por {ctx.author}")
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para remover timeout!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao remover timeout: {e}")

@untimeout_command.error
async def untimeout_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='clear')
@is_sub_moderator_or_higher()
async def clear_command(ctx, quantidade: int = 10):
    if quantidade > 100:
        quantidade = 100
    elif quantidade < 1:
        quantidade = 1
    
    try:
        deleted = await ctx.channel.purge(limit=quantidade + 1)  # +1 para incluir o comando
        
        embed = discord.Embed(
            title="üßπ MENSAGENS LIMPAS",
            description=f"**{len(deleted) - 1}** mensagens foram deletadas!",
            color=0x00ff00
        )
        embed.add_field(
            name="üìä Detalhes",
            value=f"**Canal:** {ctx.channel.mention}\n**Moderador:** {ctx.author.mention}",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        
        msg = await ctx.send(embed=embed)
        await asyncio.sleep(3)
        await msg.delete()
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para deletar mensagens!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao limpar mensagens: {e}")

@clear_command.error
async def clear_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='restart')
@commands.has_permissions(administrator=True)
async def restart_command(ctx):
    """Reinicia o bot para resolver problemas de duplica√ß√£o"""
    embed = discord.Embed(
        title="üîÑ REINICIANDO BOT",
        description="O bot ser√° reiniciado em 3 segundos...",
        color=0xffaa00
    )
    embed.add_field(
        name="‚ö†Ô∏è Aten√ß√£o",
        value="Isso vai resolver problemas de:\n‚Ä¢ Mensagens duplicadas\n‚Ä¢ Comandos travados\n‚Ä¢ Cache corrompido",
        inline=False
    )
    embed.set_footer(text="Sistema de Manuten√ß√£o ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)
    
    await asyncio.sleep(3)
    
    # Salvar dados antes de reiniciar
    save_warnings_data()
    save_role_config()
    
    # Reiniciar o bot
    await bot.close()
    
    # No Render, o bot reinicia automaticamente ap√≥s fechar
    import sys
    import os
    os.execv(sys.executable, ['python'] + sys.argv)

@restart_command.error
async def restart_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para reiniciar o bot!")

# ========================================
# SISTEMA ANTI-SPAM - VERS√ÉO FINAL
# ========================================

async def auto_moderate_spam(message, violation_type, details=""):
    """Sistema anti-spam: 5 msgs = aviso 1, 4 msgs = aviso 2, 3 msgs = ADV + TIMEOUT"""
    user_id = message.author.id
    
    # Deletar mensagem
    try:
        await message.delete()
    except:
        pass
    
    # Incrementar contador
    if user_id not in spam_warnings:
        spam_warnings[user_id] = 0
    spam_warnings[user_id] += 1
    count = spam_warnings[user_id]
    
    # PRIMEIRO AVISO - EXATAMENTE 5 mensagens
    if count == 5:
        embed = discord.Embed(
            title="‚ö†Ô∏è PRIMEIRO AVISO - SPAM DETECTADO",
            description=f"**{message.author.display_name}**, voc√™ foi detectado fazendo spam!",
            color=0xffff00
        )
        embed.add_field(
            name="üìã Detalhes",
            value=f"**Viola√ß√£o:** {violation_type}\n**Detalhes:** {details}\n**Pr√≥ximo:** Segundo aviso (4 mensagens)",
            inline=False
        )
        embed.set_footer(text="Sistema Anti-Spam ‚Ä¢ Caos Hub")
        await message.channel.send(embed=embed)
        # N√ÉO RESETAR - continua contando
        
    # SEGUNDO AVISO - 9 mensagens (5 + 4)
    elif count == 9:
        embed = discord.Embed(
            title="üö® SEGUNDO AVISO - √öLTIMA CHANCE",
            description=f"**{message.author.display_name}**, PARE DE FAZER SPAM!",
            color=0xff8c00
        )
        embed.add_field(
            name="üìã Detalhes",
            value=f"**Viola√ß√£o:** {violation_type}\n**Detalhes:** {details}\n**Pr√≥ximo:** ADV 1 + Timeout (3 mensagens)",
            inline=False
        )
        embed.set_footer(text="Sistema Anti-Spam ‚Ä¢ Caos Hub")
        await message.channel.send(embed=embed)
        # N√ÉO RESETAR - continua contando
        
    # ADV - 12 mensagens (5 + 4 + 3)
    elif count >= 12:
        # Verificar quantas ADVs o usu√°rio j√° tem (SEM incrementar ainda)
        if user_id not in user_warnings:
            user_warnings[user_id] = 0
        
        # Verificar qual ADV vai receber BASEADO no que j√° tem
        current_adv = user_warnings[user_id]
        
        # Incrementar APENAS quando aplicar ADV
        user_warnings[user_id] += 1
        adv_count = user_warnings[user_id]
        
        # ADV 1 (usu√°rio n√£o tinha ADV)
        if adv_count == 1:
            cargo = message.guild.get_role(ADV_CARGO_1_ID)
            adv_level = "ADV 1"
            color = 0xffff00
            next_adv = "ADV 2"
            
        # ADV 2
        elif adv_count == 2:
            # Remover ADV 1
            cargo_adv1 = message.guild.get_role(ADV_CARGO_1_ID)
            if cargo_adv1 and cargo_adv1 in message.author.roles:
                await message.author.remove_roles(cargo_adv1)
            
            cargo = message.guild.get_role(ADV_CARGO_2_ID)
            adv_level = "ADV 2"
            color = 0xff8c00
            next_adv = "ADV 3 + BAN"
            
        # ADV 3 = BAN IMEDIATO
        else:
            # Remover ADV 1 e 2
            cargo_adv1 = message.guild.get_role(ADV_CARGO_1_ID)
            cargo_adv2 = message.guild.get_role(ADV_CARGO_2_ID)
            if cargo_adv1 and cargo_adv1 in message.author.roles:
                await message.author.remove_roles(cargo_adv1)
            if cargo_adv2 and cargo_adv2 in message.author.roles:
                await message.author.remove_roles(cargo_adv2)
            
            cargo = message.guild.get_role(ADV_CARGO_3_ID)
            if cargo:
                await message.author.add_roles(cargo)
            
            # BANIR IMEDIATAMENTE
            embed = discord.Embed(
                title="üî® ADV 3 - BANIMENTO AUTOM√ÅTICO",
                description=f"**{message.author.display_name}** foi banido por atingir ADV 3!",
                color=0xff0000
            )
            embed.add_field(
                name="üìã Motivo",
                value=f"**Viola√ß√£o:** {violation_type}\n**Detalhes:** {details}",
                inline=False
            )
            embed.set_footer(text="Sistema Anti-Spam ‚Ä¢ Caos Hub")
            await message.channel.send(embed=embed)
            
            await message.author.ban(reason="ADV 3 - Spam repetido")
            user_warnings[user_id] = 0
            spam_warnings[user_id] = 0
            save_warnings_data()
            return
        
        # Aplicar cargo ADV
        if cargo:
            await message.author.add_roles(cargo)
        
        # APLICAR TIMEOUT DE 1 MINUTO - IGUAL AO COMANDO .timeout
        from datetime import timedelta
        timeout_aplicado = False
        try:
            timeout_duration = discord.utils.utcnow() + timedelta(minutes=1)
            await message.author.timeout(timeout_duration, reason=f"{adv_level} - Spam autom√°tico")
            timeout_aplicado = True
        except discord.Forbidden:
            pass
        except discord.HTTPException:
            pass
        except Exception:
            pass
        
        # Embed de ADV aplicada COM TIMEOUT
        embed = discord.Embed(
            title=f"üö® {adv_level} APLICADA",
            description=f"**{message.author.display_name}** recebeu {adv_level} por spam!",
            color=color
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{violation_type}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=message.author.mention,
            inline=True
        )
        embed.add_field(
            name="‚è∞ Timeout",
            value="1 minuto" if timeout_aplicado else "‚ùå Falhou",
            inline=True
        )
        embed.add_field(
            name="üö® Pr√≥xima Puni√ß√£o",
            value=next_adv,
            inline=True
        )
        if timeout_aplicado:
            embed.add_field(
                name="üìÖ Expira em",
                value=f"<t:{int((discord.utils.utcnow() + timedelta(minutes=1)).timestamp())}:F>",
                inline=False
            )
        embed.set_footer(text="Sistema Anti-Spam ‚Ä¢ Caos Hub")
        await message.channel.send(embed=embed)
        
        # RESETAR contador de spam (volta pro zero - precisa fazer 5‚Üí9‚Üí12 de novo)
        spam_warnings[user_id] = 0
        save_warnings_data()

# ========================================
# SISTEMA DE AJUDA PERSONALIZADO
# ========================================

# Remover comando help padr√£o
bot.remove_command('help')

@bot.command(name='help')
async def help_command(ctx, categoria=None):
    """Sistema de ajuda personalizado com categorias"""
    
    if categoria is None:
        # Menu principal de categorias
        embed = discord.Embed(
            title="ü§ñ CENTRAL DE AJUDA - CAOS BOT",
            description="**Bem-vindo ao sistema de ajuda!** üéâ\n\nEscolha uma categoria abaixo para ver os comandos dispon√≠veis:",
            color=0x00ff88
        )
        
        embed.add_field(
            name="üõ°Ô∏è **MODERA√á√ÉO**",
            value="`.help moderacao`\nComandos para moderar o servidor",
            inline=True
        )
        
        embed.add_field(
            name="‚ö†Ô∏è **ADVERT√äNCIAS**",
            value="`.help advertencias`\nSistema de advert√™ncias progressivas",
            inline=True
        )
        
        embed.add_field(
            name="üîá **MUTE & TIMEOUT**",
            value="`.help mute`\nComandos de silenciamento",
            inline=True
        )
        
        embed.add_field(
            name="üéÆ **DIVERS√ÉO**",
            value="`.help diversao`\nComandos para se divertir",
            inline=True
        )
        
        embed.add_field(
            name="üí¨ **CONVERSA**",
            value="`.help conversa`\nComandos de intera√ß√£o social",
            inline=True
        )
        
        embed.add_field(
            name="üõ†Ô∏è **UTILIDADES**",
            value="`.help utilidades`\nComandos √∫teis diversos",
            inline=True
        )
        
        embed.add_field(
            name="üìä **INFORMA√á√ïES**",
            value="**Prefixo:** `.` (ponto)\n**Permiss√µes:** Sub Moderador+\n**Vers√£o:** 2.0 Premium",
            inline=False
        )
        
        embed.set_footer(text="üí° Dica: Use .help [categoria] para ver comandos espec√≠ficos ‚Ä¢ Caos Hub")
        embed.set_thumbnail(url=bot.user.display_avatar.url)
        
        await ctx.reply(embed=embed)
        return
    
    # Categorias espec√≠ficas
    categoria = categoria.lower()
    
    if categoria in ['moderacao', 'modera√ß√£o', 'mod']:
        embed = discord.Embed(
            title="üõ°Ô∏è COMANDOS DE MODERA√á√ÉO",
            description="**Comandos para manter a ordem no servidor**\n*Requer: Sub Moderador ou permiss√µes de modera√ß√£o*",
            color=0xff4444
        )
        
        embed.add_field(
            name="üë¢ `.kick @usu√°rio [motivo]`",
            value="**Expulsa** um usu√°rio do servidor\n*Exemplo: `.kick @Jo√£o spam`*",
            inline=False
        )
        
        embed.add_field(
            name="üî® `.ban @usu√°rio [motivo]`",
            value="**Bane** um usu√°rio permanentemente\n*Exemplo: `.ban @Jo√£o comportamento t√≥xico`*",
            inline=False
        )
        
        embed.add_field(
            name="üîá `.timeout @usu√°rio [minutos] [motivo]`",
            value="**Silencia** temporariamente (m√°x 24h)\n*Exemplo: `.timeout @Jo√£o 30 flood`*",
            inline=False
        )
        
        embed.add_field(
            name="üîä `.untimeout @usu√°rio`",
            value="**Remove** o timeout de um usu√°rio\n*Exemplo: `.untimeout @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="üßπ `.clear [quantidade]`",
            value="**Deleta** mensagens (1-100, padr√£o: 10)\n*Exemplo: `.clear 50`*",
            inline=False
        )
        
        embed.add_field(
            name="üéØ `.addrole @cargo @usu√°rio`",
            value="**Adiciona** cargo ao usu√°rio e aplica prefixo\n*Exemplo: `.addrole @Moderador @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="üóëÔ∏è `.removerole @cargo @usu√°rio`",
            value="**Remove** cargo do usu√°rio e restaura nickname\n*Exemplo: `.removerole @Moderador @Jo√£o`*",
            inline=False
        )
        
        embed.set_footer(text="üõ°Ô∏è Modera√ß√£o ‚Ä¢ Use com responsabilidade")
        
    elif categoria in ['advertencias', 'advert√™ncias', 'adv']:
        embed = discord.Embed(
            title="‚ö†Ô∏è SISTEMA DE ADVERT√äNCIAS",
            description="**Sistema progressivo de puni√ß√µes**\n*ADV 1 ‚Üí ADV 2 ‚Üí ADV 3 + Ban Autom√°tico*",
            color=0xffaa00
        )
        
        embed.add_field(
            name="‚ö†Ô∏è `.adv @usu√°rio [motivo]`",
            value="**Aplica** advert√™ncia progressiva\n*Exemplo: `.adv @Jo√£o linguagem inadequada`*",
            inline=False
        )
        
        embed.add_field(
            name="üîÑ `.radv @usu√°rio`",
            value="**Remove** UMA advert√™ncia por vez\n*Exemplo: `.radv @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="üßπ `.radvall @usu√°rio`",
            value="**Remove** TODAS as advert√™ncias\n*Exemplo: `.radvall @Jo√£o`*",
            inline=False
        )
        
        
        embed.add_field(
            name="üìã **N√çVEIS DE ADVERT√äNCIA**",
            value="üü° **ADV 1** - Primeira advert√™ncia\nüü† **ADV 2** - Segunda advert√™ncia\nüî¥ **ADV 3** - Terceira + Ban autom√°tico",
            inline=False
        )
        
        embed.set_footer(text="‚ö†Ô∏è Advert√™ncias ‚Ä¢ Sistema autom√°tico de puni√ß√µes")
        
    elif categoria in ['mute', 'timeout', 'silenciar']:
        embed = discord.Embed(
            title="üîá COMANDOS DE SILENCIAMENTO",
            description="**Controle total sobre comunica√ß√£o dos usu√°rios**",
            color=0x808080
        )
        
        embed.add_field(
            name="üîá `.mute @usu√°rio [motivo]`",
            value="**Muta** usu√°rio indefinidamente\n*Remove capacidade de falar/reagir*\n*Exemplo: `.mute @Jo√£o comportamento inadequado`*",
            inline=False
        )
        
        embed.add_field(
            name="üîä `.unmute @usu√°rio`",
            value="**Desmuta** usu√°rio mutado\n*Restaura capacidade de comunica√ß√£o*\n*Exemplo: `.unmute @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="‚è∞ `.timeout @usu√°rio [minutos] [motivo]`",
            value="**Timeout** tempor√°rio (1-1440 min)\n*Silenciamento com dura√ß√£o definida*\n*Exemplo: `.timeout @Jo√£o 60 spam`*",
            inline=False
        )
        
        embed.add_field(
            name="‚è∞ `.untimeout @usu√°rio`",
            value="**Remove** timeout ativo\n*Cancela silenciamento tempor√°rio*\n*Exemplo: `.untimeout @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="üîç **DIFEREN√áAS**",
            value="**Mute:** Indefinido, manual para remover\n**Timeout:** Tempor√°rio, remove automaticamente",
            inline=False
        )
        
        embed.set_footer(text="üîá Silenciamento ‚Ä¢ Mute vs Timeout")
        
    elif categoria in ['diversao', 'divers√£o', 'fun']:
        embed = discord.Embed(
            title="üéÆ COMANDOS DE DIVERS√ÉO",
            description="**Comandos para animar o servidor e se divertir!**",
            color=0xff69b4
        )
        
        embed.add_field(
            name="üòÇ `.piada`",
            value="**Conta** uma piada aleat√≥ria\n*Humor garantido!*",
            inline=True
        )
        
        embed.add_field(
            name="üé≤ `.escolher op√ß√£o1, op√ß√£o2, ...`",
            value="**Escolhe** entre v√°rias op√ß√µes\n*Exemplo: `.escolher pizza, hamb√∫rguer, sushi`*",
            inline=True
        )
        
        embed.add_field(
            name="üéØ **MAIS COMANDOS**",
            value="*Mais comandos de divers√£o em breve!*\n*Sugest√µes s√£o bem-vindas*",
            inline=False
        )
        
        embed.set_footer(text="üéÆ Divers√£o ‚Ä¢ Mais comandos em desenvolvimento")
        
    elif categoria in ['conversa', 'social', 'chat']:
        embed = discord.Embed(
            title="üí¨ COMANDOS DE CONVERSA",
            description="**Comandos para intera√ß√£o social e conversas**",
            color=0x87ceeb
        )
        
        embed.add_field(
            name="üëã `.oi`",
            value="**Cumprimenta** com sauda√ß√µes aleat√≥rias\n*Inicia conversas de forma amig√°vel*",
            inline=True
        )
        
        embed.add_field(
            name="ü§ó `.comoesta [@usu√°rio]`",
            value="**Pergunta** como algu√©m est√°\n*Demonstra interesse genu√≠no*",
            inline=True
        )
        
        embed.add_field(
            name="üí≠ `.conversa`",
            value="**Sugere** t√≥picos de conversa\n*Quebra o gelo em conversas*",
            inline=True
        )
        
        embed.add_field(
            name="üå§Ô∏è `.clima`",
            value="**Pergunta** sobre humor/energia\n*Conecta com o estado emocional*",
            inline=True
        )
        
        embed.add_field(
            name="üëã `.tchau`",
            value="**Despede-se** com mensagens carinhosas\n*Finaliza conversas educadamente*",
            inline=True
        )
        
        embed.add_field(
            name="ü§ó `.abraco [@usu√°rio]`",
            value="**Envia** abra√ßos virtuais\n*Demonstra carinho e apoio*",
            inline=True
        )
        
        embed.add_field(
            name="‚ú® `.elogio [@usu√°rio]`",
            value="**Faz** elogios motivacionais\n*Eleva a autoestima dos outros*",
            inline=True
        )
        
        embed.add_field(
            name="üí™ `.motivacao`",
            value="**Compartilha** frases inspiradoras\n*Motiva e inspira positivamente*",
            inline=True
        )
        
        embed.set_footer(text="üí¨ Conversa ‚Ä¢ Intera√ß√µes sociais saud√°veis")
        
    elif categoria in ['utilidades', 'utils', 'uteis']:
        embed = discord.Embed(
            title="üõ†Ô∏è COMANDOS UTILIT√ÅRIOS",
            description="**Comandos √∫teis para administra√ß√£o e informa√ß√µes**",
            color=0x9932cc
        )
        
        
        embed.add_field(
            name="üßπ `.clear [quantidade]`",
            value="**Limpa** mensagens do canal\n*Organiza√ß√£o e limpeza*",
            inline=False
        )
        
        embed.add_field(
            name="‚ùì `.help [categoria]`",
            value="**Mostra** esta ajuda\n*Sistema de ajuda completo*",
            inline=False
        )
        
        
        
        embed.add_field(
            name="üîß **EM DESENVOLVIMENTO**",
            value="*Mais utilit√°rios sendo desenvolvidos*\n*Sugest√µes s√£o bem-vindas*",
            inline=False
        )
        
        embed.set_footer(text="üõ†Ô∏è Utilidades ‚Ä¢ Ferramentas administrativas")
        
    else:
        embed = discord.Embed(
            title="‚ùå CATEGORIA N√ÉO ENCONTRADA",
            description="**Categoria inv√°lida!** Use uma das op√ß√µes abaixo:",
            color=0xff0000
        )
        
        embed.add_field(
            name="üìã **CATEGORIAS DISPON√çVEIS**",
            value="‚Ä¢ `moderacao` - Comandos de modera√ß√£o\n‚Ä¢ `advertencias` - Sistema de advert√™ncias\n‚Ä¢ `mute` - Comandos de silenciamento\n‚Ä¢ `diversao` - Comandos de divers√£o\n‚Ä¢ `conversa` - Comandos sociais\n‚Ä¢ `utilidades` - Comandos utilit√°rios",
            inline=False
        )
        
        embed.add_field(
            name="üí° **EXEMPLO**",
            value="`.help moderacao` - Ver comandos de modera√ß√£o",
            inline=False
        )
        
        embed.set_footer(text="‚ùå Erro ‚Ä¢ Use .help para ver o menu principal")
    
    await ctx.reply(embed=embed)

# ========================================
# COMANDOS DE DIVERS√ÉO
# ========================================

@bot.command(name='piada')
async def piada_command(ctx):
    piadas = [
        'Por que os p√°ssaros voam para o sul no inverno? Porque √© longe demais para ir andando! üê¶',
        'O que o pato disse para a pata? Vem qu√°! ü¶Ü',
        'Por que o livro de matem√°tica estava triste? Porque tinha muitos problemas! üìö',
        'O que a impressora falou para a outra impressora? Essa folha √© sua ou √© impress√£o minha? üñ®Ô∏è',
        'Por que o caf√© foi para a pol√≠cia? Porque foi roubado! ‚òï',
        'O que o oceano disse para a praia? Nada, s√≥ acenou! üåä',
        'Por que os esqueletos n√£o brigam? Porque n√£o t√™m est√¥mago para isso! üíÄ',
        'O que a fechadura disse para a chave? Voc√™ √© a chave do meu cora√ß√£o! üîê'
    ]
    piada = random.choice(piadas)
    
    embed = discord.Embed(
        title="üòÑ Piada do Dia",
        description=piada,
        color=0xffff00
    )
    embed.set_footer(text="Comandos de Divers√£o ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='escolher')
async def escolher_command(ctx, *, opcoes):
    lista_opcoes = [opcao.strip() for opcao in opcoes.split(',')]
    if len(lista_opcoes) < 2:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description='Preciso de pelo menos 2 op√ß√µes separadas por v√≠rgula!',
            color=0xff0000
        )
        embed.add_field(
            name="üìù Exemplo",
            value="`.escolher pizza, hamb√∫rguer, sushi`",
            inline=False
        )
        embed.set_footer(text="Comandos de Divers√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    escolha = random.choice(lista_opcoes)
    
    embed = discord.Embed(
        title="üé≤ Escolha Aleat√≥ria",
        description=f'Eu escolho: **{escolha}**!',
        color=0x9932cc
    )
    embed.add_field(
        name="üìã Op√ß√µes Dispon√≠veis",
        value=", ".join(lista_opcoes),
        inline=False
    )
    embed.set_footer(text="Comandos de Divers√£o ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='embedhub')
@commands.has_permissions(administrator=True)
async def embedhub_command(ctx):
    """Envia o embed FODA do Caos Hub com TODOS os GIFs"""
    
    # EMBED √öNICO COM TUDO
    embed = discord.Embed(
        title="üî• BEM-VINDO AO CAOS HUB! üî•",
        description=(
            "# **O MELHOR HUB DE SCRIPTS DO BRASIL!**\n\n"
            "Aqui voc√™ encontra **TUDO** que precisa para dominar seus jogos favoritos!\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        ),
        color=0xff6600
    )
    
    # GIF PRINCIPAL
    embed.set_image(url="https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExMHpuMWV1eWprbm1vZGgzZnlseWJ6ZWxjbmsxbG5yczhta2FnNzQ1ayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Q8gqp0zwvSoMaDX1uS/giphy.gif")
    
    # THUMBNAIL
    embed.set_thumbnail(url="https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExMmV0Zm1nbmJocDhweDNvbDRreGZhOG5rcmZvenN5Nmw1Z3N2aWxtayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/10TZs8ho7qJeVy/giphy.gif")
    
    embed.add_field(
        name="üéØ O QUE OFERECEMOS",
        value=(
            "üîπ **Scripts Premium** - Os melhores do mercado\n"
            "üîπ **Executores Confi√°veis** - Testados e aprovados\n"
            "üîπ **Suporte 24/7** - Equipe sempre dispon√≠vel\n"
            "üîπ **Atualiza√ß√µes Constantes** - Sempre atualizado\n"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üé´ COMO ACESSAR",
        value=(
            "**1.** Acesse o canal <#1417548428984188929>\n"
            "**2.** Abra um ticket clicando no bot√£o\n"
            "**3.** Escolha a categoria desejada\n"
            "**4.** Nossa equipe responder√° rapidamente!"
        ),
        inline=True
    )
    
    embed.add_field(
        name="‚öôÔ∏è EXECUTORES ACEITOS",
        value=(
            "‚úÖ **Synapse X**\n"
            "‚úÖ **Script-Ware**\n"
            "‚úÖ **KRNL**\n"
            "‚úÖ **Fluxus**\n"
            "‚úÖ **Arceus X**\n"
            "‚úÖ **E muito mais!**"
        ),
        inline=True
    )
    
    embed.add_field(
        name="üéÆ JOGOS DISPON√çVEIS",
        value="ü•ä **The Strongest Battlegrounds**",
        inline=False
    )
    
    embed.add_field(
        name="üí≥ FORMAS DE PAGAMENTO",
        value=(
            "üí∞ **PIX** - Instant√¢neo e seguro\n"
            "üíµ **PayPal** - Internacional\n\n"
            "üéÆ **Robux** - Em breve!"
        ),
        inline=False
    )
    
    embed.set_footer(
        text="üî• CAOS Hub ¬© 2025 ‚Ä¢ Todos os direitos reservados ‚Ä¢ Melhor Hub de Scripts!",
        icon_url=ctx.guild.icon.url if ctx.guild.icon else None
    )
    
    embed.timestamp = discord.utils.utcnow()
    
    # ENVIAR COM @everyone
    await ctx.send("@everyone", embed=embed)
    
    try:
        await ctx.message.delete()
    except:
        pass

@embedhub_command.error
async def embedhub_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# ========================================
# RESPOSTAS AUTOM√ÅTICAS E PROTE√á√ïES
# ========================================

@bot.event
async def on_message_old(message):
    # FUN√á√ÉO ANTIGA - N√ÉO USAR (mantida para refer√™ncia)
    # Ignorar mensagens do pr√≥prio bot
    if message.author == bot.user:
        return
    
    # Ignorar moderadores (usu√°rios com permiss√£o de gerenciar mensagens)
    if message.author.guild_permissions.manage_messages:
        await bot.process_commands(message)
        return
    
    user_id = message.author.id
    current_time = time.time()
    content = message.content
    
    # ========================================
    # SISTEMA ANTI-MEN√á√ÉO (M√ÅXIMO 1 MEN√á√ÉO) - VERIFICAR PRIMEIRO
    # ========================================
    
    # Verificar men√ß√µes (permitido apenas 1, se tiver 2 ou mais j√° avisa)
    mention_count = len(message.raw_mentions) + len(message.raw_role_mentions)
    print(f"[DEBUG MEN√á√ÉO] Usu√°rio: {message.author} | Men√ß√µes: {mention_count}")  # DEBUG
    
    if mention_count >= 2:  # agora dispara com 2 ou mais
        try:
            await message.delete()
        except:
            pass
        
        # Criar lista de men√ß√µes (com repeti√ß√µes preservadas)
        mencoes = []
        for uid in message.raw_mentions:
            mencoes.append(f"<@{uid}>")
        for rid in message.raw_role_mentions:
            mencoes.append(f"<@&{rid}>")
        
        embed = discord.Embed(
            title="‚ö†Ô∏è EXCESSO DE MEN√á√ïES",
            description=f"**{message.author.display_name}**, voc√™ mencionou **{mention_count}** pessoas/cargos!",
            color=0xff8c00
        )
        embed.add_field(
            name="üìã Regra",
            value=f"**M√°ximo permitido:** 1 men√ß√£o por mensagem\n**Voc√™ mencionou:** {', '.join(mencoes)}",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await message.channel.send(embed=embed, delete_after=10)
        return  # Para o processamento
    
    # ========================================
    # SISTEMA ANTI-SPAM
    # ========================================
    
    # Adicionar mensagem ao hist√≥rico
    message_history[user_id].append(content.lower())
    user_message_times[user_id].append(current_time)
    
    # Verificar spam (mensagens id√™nticas)
    if len(message_history[user_id]) >= 3:
        recent_messages = list(message_history[user_id])[-3:]
        if len(set(recent_messages)) == 1:  # Todas as mensagens s√£o iguais
            await auto_moderate_spam(message, "spam de mensagens id√™nticas", f"Enviou 3 mensagens iguais: '{content[:50]}...'")
            return
    
    # ========================================
    # SISTEMA ANTI-FLOOD PROGRESSIVO
    # ========================================
    
    # Determinar limite baseado nos avisos j√° recebidos
    current_warnings = spam_warnings[user_id]
    
    if current_warnings == 0:
        flood_limit = 5  # Primeira viola√ß√£o: 5 mensagens
    elif current_warnings == 1:
        flood_limit = 4  # Segunda viola√ß√£o: 4 mensagens
    else:
        flood_limit = 3  # Terceira viola√ß√£o: 3 mensagens (ADV)
    
    # Verificar flood (muitas mensagens em pouco tempo)
    if len(user_message_times[user_id]) >= flood_limit:
        recent_times = list(user_message_times[user_id])[-flood_limit:]
        time_diff = recent_times[-1] - recent_times[0]
        
        if time_diff < 8:  # Mensagens em menos de 8 segundos
            await auto_moderate_spam(message, "flood de mensagens", f"Enviou {flood_limit} mensagens em {time_diff:.1f} segundos")
            return
    
    # ========================================
    # SISTEMA ANTI-CAPS
    # ========================================
    
    # Verificar excesso de mai√∫sculas
    if len(content) > 10:  # S√≥ verificar mensagens com mais de 10 caracteres
        uppercase_count = sum(1 for c in content if c.isupper())
        total_letters = sum(1 for c in content if c.isalpha())
        
        if total_letters > 0:
            caps_percentage = (uppercase_count / total_letters) * 100
            
            if caps_percentage > 70 and total_letters > 15:  # Mais de 70% em caps e mais de 15 letras
                await auto_moderate_spam(message, "excesso de mai√∫sculas", f"Mensagem com {caps_percentage:.1f}% em mai√∫sculas")
                return
    
    # Sistema de men√ß√£o j√° verificado no in√≠cio do on_message
    
    # ========================================
    # SISTEMA ANTI-MENSAGEM LONGA (M√ÅXIMO 90 CARACTERES)
    # ========================================
    
    # Verificar tamanho da mensagem (m√°ximo 90 caracteres)
    if len(content) > 90:
        await auto_moderate_spam(message, "mensagem muito longa", f"Mensagem com {len(content)} caracteres (m√°ximo: 90)")
        return
    
    # ========================================
    # SISTEMA ANTI-EMOJI SPAM
    # ========================================
    
    # Contar emojis (custom e unicode)
    emoji_count = len(message.content.split('üòÄ')) + len(message.content.split('üòÅ')) + len(message.content.split('üòÇ')) + len(message.content.split('ü§£')) + len(message.content.split('üòÉ')) + len(message.content.split('üòÑ')) + len(message.content.split('üòÖ')) + len(message.content.split('üòÜ')) + len(message.content.split('üòâ')) + len(message.content.split('üòä')) + len(message.content.split('üòã')) + len(message.content.split('üòé')) + len(message.content.split('üòç')) + len(message.content.split('üòò')) + len(message.content.split('ü•∞')) + len(message.content.split('üòó')) + len(message.content.split('üòô')) + len(message.content.split('üòö')) + len(message.content.split('üôÇ')) + len(message.content.split('ü§ó')) + len(message.content.split('ü§©')) + len(message.content.split('ü§î')) + len(message.content.split('ü§®')) + len(message.content.split('üòê')) + len(message.content.split('üòë')) + len(message.content.split('üò∂')) + len(message.content.split('üôÑ')) + len(message.content.split('üòè')) + len(message.content.split('üò£')) + len(message.content.split('üò•')) + len(message.content.split('üòÆ')) + len(message.content.split('ü§ê')) + len(message.content.split('üòØ')) + len(message.content.split('üò™')) + len(message.content.split('üò´')) + len(message.content.split('ü•±')) + len(message.content.split('üò¥')) + len(message.content.split('üòå')) + len(message.content.split('üòõ')) + len(message.content.split('üòú')) + len(message.content.split('üòù')) + len(message.content.split('ü§§')) + len(message.content.split('üòí')) + len(message.content.split('üòì')) + len(message.content.split('üòî')) + len(message.content.split('üòï')) + len(message.content.split('üôÉ')) + len(message.content.split('ü§ë')) + len(message.content.split('üò≤')) + len(message.content.split('üôÅ')) + len(message.content.split('üòñ')) + len(message.content.split('üòû')) + len(message.content.split('üòü')) + len(message.content.split('üò§')) + len(message.content.split('üò¢')) + len(message.content.split('üò≠')) + len(message.content.split('üò¶')) + len(message.content.split('üòß')) + len(message.content.split('üò®')) + len(message.content.split('üò©')) + len(message.content.split('ü§Ø')) + len(message.content.split('üò¨')) + len(message.content.split('üò∞')) + len(message.content.split('üò±')) + len(message.content.split('ü•µ')) + len(message.content.split('ü•∂')) + len(message.content.split('üò≥')) + len(message.content.split('ü§™')) + len(message.content.split('üòµ')) + len(message.content.split('ü•¥')) + len(message.content.split('üò†')) + len(message.content.split('üò°')) + len(message.content.split('ü§¨')) + len(message.content.split('üò∑')) + len(message.content.split('ü§í')) + len(message.content.split('ü§ï')) + len(message.content.split('ü§¢')) + len(message.content.split('ü§Æ')) + len(message.content.split('ü§ß')) + len(message.content.split('üòá')) + len(message.content.split('ü•≥')) + len(message.content.split('ü•∫')) + len(message.content.split('ü§†')) + len(message.content.split('ü§°')) + len(message.content.split('ü§•')) + len(message.content.split('ü§´')) + len(message.content.split('ü§≠')) + len(message.content.split('üßê')) + len(message.content.split('ü§ì'))
    
    # M√©todo mais simples para contar emojis
    import re
    emoji_pattern = re.compile(r'[üòÄ-üôèüåÄ-üóøüöÄ-üõø‚òÄ-‚õø‚úÄ-‚ûø]')
    unicode_emojis = len(emoji_pattern.findall(content))
    custom_emojis = content.count('<:') + content.count('<a:')
    total_emojis = unicode_emojis + custom_emojis
    
    if total_emojis > 10:
        await auto_moderate_spam(message, "spam de emojis", f"Enviou {total_emojis} emojis em uma mensagem")
        return
    
    # ========================================
    # SISTEMA ANTI-LINK SPAM
    # ========================================
    
    # Verificar links suspeitos (muitos links)
    link_patterns = ['http://', 'https://', 'www.', '.com', '.net', '.org', '.br', '.gg']
    link_count = sum(content.lower().count(pattern) for pattern in link_patterns)
    
    if link_count > 3:
        await auto_moderate_spam(message, "spam de links", f"Enviou {link_count} links em uma mensagem")
        return
    
    # ========================================
    # RESPOSTAS AUTOM√ÅTICAS
    # ========================================
    
    content_lower = content.lower()
    
    # Respostas autom√°ticas
    if 'oi bot' in content_lower or 'ol√° bot' in content_lower:
        saudacoes = ['Oi! üëã', 'Ol√°! üòä', 'E a√≠! ü§ó', 'Salve! ‚ú®']
        resposta = random.choice(saudacoes)
        await message.reply(resposta)
    
    elif 'obrigado bot' in content_lower or 'valeu bot' in content_lower:
        agradecimentos = ['De nada! üòä', 'Sempre √†s ordens! ü§ñ', 'Fico feliz em ajudar! ‚ú®']
        resposta = random.choice(agradecimentos)
        await message.reply(resposta)
    
    elif 'tchau bot' in content_lower or 'at√© mais bot' in content_lower:
        despedidas = ['Tchau! üëã', 'At√© mais! üòä', 'Falou! ü§ó']
        resposta = random.choice(despedidas)
        await message.reply(resposta)
    
    # Processar comandos normalmente
    await bot.process_commands(message)

# ========================================
# SISTEMA DE TICKETS
# ========================================

# Configura√ß√µes de ticket (salvas em arquivo JSON)
ticket_config = {}

def load_ticket_config():
    """Carrega configura√ß√µes de ticket"""
    global ticket_config
    try:
        with open('ticket_config.json', 'r') as f:
            ticket_config = json.load(f)
    except:
        ticket_config = {}

def save_ticket_config():
    """Salva configura√ß√µes de ticket"""
    with open('ticket_config.json', 'w') as f:
        json.dump(ticket_config, f, indent=4)

# Carregar configura√ß√µes ao iniciar
load_ticket_config()

@bot.command(name='ticket')
@commands.has_permissions(administrator=True)
async def ticket_command(ctx, acao=None, *args):
    """Sistema de tickets - Uso: .ticket [a√ß√£o]"""
    
    guild_id = str(ctx.guild.id)
    
    if acao is None:
        # Mostrar ajuda
        embed = discord.Embed(
            title="üé´ SISTEMA DE TICKETS",
            description="Configure o sistema de tickets do servidor",
            color=0x00ff88
        )
        embed.add_field(
            name="üìã Comandos Dispon√≠veis",
            value=(
                "`.ticket config` - ‚≠ê **Configura√ß√£o interativa** (RECOMENDADO)\n"
                "`.ticket setup` - Cria mensagem de abertura\n"
                "`.ticket categoria [ID]` - Define categoria manualmente\n"
                "`.ticket staff [IDs]` - Define cargos staff manualmente\n"
                "`.ticket mensagem [texto]` - Define mensagem de boas-vindas\n"
                "`.ticket ativar` - Ativa o sistema\n"
                "`.ticket desativar` - Desativa o sistema\n"
                "`.ticket status` - Ver configura√ß√£o atual"
            ),
            inline=False
        )
        embed.set_footer(text="Sistema de Tickets ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    # Inicializar config do servidor se n√£o existir
    if guild_id not in ticket_config:
        ticket_config[guild_id] = {
            'enabled': False,
            'category_id': None,
            'staff_role_ids': [],
            'welcome_message': 'Ol√°! Obrigado por abrir um ticket. Nossa equipe responder√° em breve.'
        }
    
    config = ticket_config[guild_id]
    
    # A√ß√µes
    if acao == 'setup':
        # Criar mensagem com bot√£o para abrir ticket
        embed = discord.Embed(
            title="üé´ ABRIR TICKET",
            description="Clique no bot√£o abaixo para abrir um ticket e falar com a equipe!",
            color=0x00ff88
        )
        embed.set_footer(text="Sistema de Tickets ‚Ä¢ Caos Hub")
        
        view = TicketView()
        await ctx.send(embed=embed, view=view)
        await ctx.reply("‚úÖ Mensagem de ticket criada!")
        
    elif acao == 'categoria':
        if not args:
            await ctx.reply("‚ùå Uso: `.ticket categoria [ID]`")
            return
        
        category_id = args[0]
        try:
            category = ctx.guild.get_channel(int(category_id))
            if category and isinstance(category, discord.CategoryChannel):
                config['category_id'] = int(category_id)
                save_ticket_config()
                await ctx.reply(f"‚úÖ Categoria definida: **{category.name}**")
            else:
                await ctx.reply("‚ùå Categoria n√£o encontrada!")
        except:
            await ctx.reply("‚ùå ID inv√°lido!")
            
    elif acao == 'staff':
        if not args:
            await ctx.reply("‚ùå Uso: `.ticket staff [IDs separados por v√≠rgula]`")
            return
        
        role_ids = ' '.join(args).replace(' ', '').split(',')
        valid_roles = []
        
        for role_id in role_ids:
            try:
                role = ctx.guild.get_role(int(role_id))
                if role:
                    valid_roles.append(int(role_id))
            except:
                pass
        
        if valid_roles:
            config['staff_role_ids'] = valid_roles
            save_ticket_config()
            await ctx.reply(f"‚úÖ {len(valid_roles)} cargo(s) staff definido(s)!")
        else:
            await ctx.reply("‚ùå Nenhum cargo v√°lido encontrado!")
            
    elif acao == 'mensagem':
        if not args:
            await ctx.reply("‚ùå Uso: `.ticket mensagem [texto]`")
            return
        
        message = ' '.join(args)
        config['welcome_message'] = message
        save_ticket_config()
        await ctx.reply("‚úÖ Mensagem de boas-vindas definida!")
        
    elif acao == 'ativar':
        if not config.get('category_id'):
            await ctx.reply("‚ùå Configure a categoria primeiro! (`.ticket categoria [ID]`)")
            return
        
        config['enabled'] = True
        save_ticket_config()
        await ctx.reply("‚úÖ Sistema de tickets **ATIVADO**!")
        
    elif acao == 'desativar':
        config['enabled'] = False
        save_ticket_config()
        await ctx.reply("‚úÖ Sistema de tickets **DESATIVADO**!")
        
    elif acao == 'status':
        # Mostrar configura√ß√£o atual
        embed = discord.Embed(
            title="üìä STATUS DO SISTEMA DE TICKETS",
            color=0x00ff88 if config.get('enabled') else 0xff0000
        )
        
        status = "‚úÖ ATIVADO" if config.get('enabled') else "‚ùå DESATIVADO"
        embed.add_field(name="Status", value=status, inline=False)
        
        if config.get('category_id'):
            category = ctx.guild.get_channel(config['category_id'])
            embed.add_field(name="Categoria", value=category.name if category else "N√£o encontrada", inline=False)
        else:
            embed.add_field(name="Categoria", value="N√£o configurada", inline=False)
        
        if config.get('staff_role_ids'):
            roles = [ctx.guild.get_role(rid).mention for rid in config['staff_role_ids'] if ctx.guild.get_role(rid)]
            embed.add_field(name="Cargos Staff", value=', '.join(roles) if roles else "Nenhum", inline=False)
        else:
            embed.add_field(name="Cargos Staff", value="N√£o configurados", inline=False)
        
        embed.add_field(name="Mensagem", value=config.get('welcome_message', 'Padr√£o'), inline=False)
        embed.set_footer(text="Sistema de Tickets ‚Ä¢ Caos Hub")
        
        await ctx.reply(embed=embed)
    
    elif acao == 'config':
        # Painel interativo de configura√ß√£o
        config_view = TicketConfigView(ctx.guild, guild_id)
        
        embed = discord.Embed(
            title="‚öôÔ∏è CONFIGURA√á√ÉO INTERATIVA",
            description="Use os menus abaixo para configurar o sistema de tickets:",
            color=0x00aaff
        )
        embed.add_field(
            name="üìã Passo 1",
            value="Selecione a **Categoria** onde os tickets ser√£o criados",
            inline=False
        )
        embed.add_field(
            name="üëÆ Passo 2",
            value="Selecione os **Cargos Staff** que poder√£o ver os tickets",
            inline=False
        )
        embed.add_field(
            name="‚úÖ Passo 3",
            value="Clique em **Salvar Configura√ß√µes**",
            inline=False
        )
        embed.set_footer(text="Sistema de Tickets ‚Ä¢ Caos Hub")
        
        await ctx.reply(embed=embed, view=config_view)
    
    # Removido else para n√£o dar erro

@ticket_command.error
async def ticket_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# View de configura√ß√£o interativa
class TicketConfigView(discord.ui.View):
    def __init__(self, guild, guild_id):
        super().__init__(timeout=300)
        self.guild = guild
        self.guild_id = guild_id
        self.selected_category = None
        self.selected_roles = []
        
        # Criar dropdown de categorias
        category_options = []
        for category in guild.categories:
            category_options.append(
                discord.SelectOption(
                    label=category.name[:100],
                    description=f"ID: {category.id}",
                    value=str(category.id)
                )
            )
        
        if category_options:
            self.category_select = discord.ui.Select(
                placeholder="üìÅ Selecione a Categoria",
                options=category_options[:25],  # Discord limita a 25
                row=0
            )
            self.category_select.callback = self.category_callback
            self.add_item(self.category_select)
        
        # Criar dropdown de cargos (apenas cargos de staff espec√≠ficos)
        role_options = []
        staff_keywords = ['moderador', 'sub moderador', 'staff', 'administrador', 'sub dono', 'founder']
        
        for role in guild.roles:
            if role.name != "@everyone" and not role.managed:  # Exclui @everyone e cargos de bot
                # Verificar se √© cargo de staff
                is_staff = any(keyword in role.name.lower() for keyword in staff_keywords)
                
                if is_staff:
                    role_options.append(
                        discord.SelectOption(
                            label=role.name[:100],
                            description=f"ID: {role.id}",
                            value=str(role.id),
                            emoji="üëÆ"
                        )
                    )
        
        if role_options:
            self.role_select = discord.ui.Select(
                placeholder="üëÆ Selecione os Cargos Staff (m√∫ltipla escolha)",
                options=role_options[:25],  # Discord limita a 25
                max_values=min(len(role_options[:25]), 25),
                row=1
            )
            self.role_select.callback = self.role_callback
            self.add_item(self.role_select)
    
    async def category_callback(self, interaction: discord.Interaction):
        self.selected_category = int(self.category_select.values[0])
        category = self.guild.get_channel(self.selected_category)
        await interaction.response.send_message(
            f"‚úÖ Categoria selecionada: **{category.name}**",
            ephemeral=True
        )
    
    async def role_callback(self, interaction: discord.Interaction):
        self.selected_roles = [int(rid) for rid in self.role_select.values]
        roles = [self.guild.get_role(rid).name for rid in self.selected_roles]
        await interaction.response.send_message(
            f"‚úÖ {len(self.selected_roles)} cargo(s) selecionado(s): {', '.join(roles[:5])}{'...' if len(roles) > 5 else ''}",
            ephemeral=True
        )
    
    @discord.ui.button(label="Salvar Configura√ß√µes", style=discord.ButtonStyle.green, emoji="üíæ", row=2)
    async def save_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not self.selected_category:
            await interaction.response.send_message("‚ùå Selecione uma categoria primeiro!", ephemeral=True)
            return
        
        if not self.selected_roles:
            await interaction.response.send_message("‚ùå Selecione pelo menos um cargo staff!", ephemeral=True)
            return
        
        # Salvar configura√ß√µes
        if self.guild_id not in ticket_config:
            ticket_config[self.guild_id] = {}
        
        ticket_config[self.guild_id]['category_id'] = self.selected_category
        ticket_config[self.guild_id]['staff_role_ids'] = self.selected_roles
        ticket_config[self.guild_id]['enabled'] = True
        
        if 'welcome_message' not in ticket_config[self.guild_id]:
            ticket_config[self.guild_id]['welcome_message'] = 'Ol√°! Obrigado por abrir um ticket. Nossa equipe responder√° em breve.'
        
        save_ticket_config()
        
        category = self.guild.get_channel(self.selected_category)
        roles = [self.guild.get_role(rid).mention for rid in self.selected_roles]
        
        embed = discord.Embed(
            title="‚úÖ CONFIGURA√á√ïES SALVAS!",
            description="Sistema de tickets configurado com sucesso!",
            color=0x00ff00
        )
        embed.add_field(
            name="üìÅ Categoria",
            value=category.mention,
            inline=False
        )
        embed.add_field(
            name="üëÆ Cargos Staff",
            value=", ".join(roles),
            inline=False
        )
        embed.add_field(
            name="üé´ Pr√≥ximo Passo",
            value="Use `.ticket setup` para criar a mensagem de abertura!",
            inline=False
        )
        embed.set_footer(text="Sistema de Tickets ‚Ä¢ Caos Hub")
        
        await interaction.response.send_message(embed=embed)
        self.stop()

# Painel de sele√ß√£o de categoria
class TicketCategoryView(discord.ui.View):
    def __init__(self, config, category_channel, user):
        super().__init__(timeout=300)  # 5 minutos
        self.config = config
        self.category_channel = category_channel
        self.user = user
        self.selected_category = "üìÅ Geral"
        self.selected_priority = "üü° M√©dia"
    
    @discord.ui.select(
        placeholder="üè∑Ô∏è Selecione a Categoria do Ticket",
        options=[
            discord.SelectOption(label="Geral", description="Assuntos gerais", emoji="üìÅ", value="geral"),
            discord.SelectOption(label="Compras", description="D√∫vidas sobre compras", emoji="üõí", value="compras"),
            discord.SelectOption(label="Suporte T√©cnico", description="Problemas t√©cnicos", emoji="üîß", value="tecnico"),
            discord.SelectOption(label="Den√∫ncia", description="Reportar usu√°rio/conte√∫do", emoji="üö®", value="denuncia"),
            discord.SelectOption(label="Parceria", description="Proposta de parceria", emoji="ü§ù", value="parceria"),
            discord.SelectOption(label="Financeiro", description="Quest√µes de pagamento", emoji="üí∞", value="financeiro"),
            discord.SelectOption(label="Modera√ß√£o", description="Quest√µes de modera√ß√£o", emoji="üõ°Ô∏è", value="moderacao"),
        ]
    )
    async def select_category(self, interaction: discord.Interaction, select: discord.ui.Select):
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("‚ùå Este painel n√£o √© seu!", ephemeral=True)
            return
        
        category_map = {
            "geral": "üìÅ Geral",
            "compras": "üõí Compras",
            "tecnico": "üîß Suporte T√©cnico",
            "denuncia": "üö® Den√∫ncia",
            "parceria": "ü§ù Parceria",
            "financeiro": "üí∞ Financeiro",
            "moderacao": "üõ°Ô∏è Modera√ß√£o"
        }
        
        self.selected_category = category_map.get(select.values[0], "üìÅ Geral")
        await interaction.response.send_message(f"‚úÖ Categoria selecionada: **{self.selected_category}**", ephemeral=True)
    
    @discord.ui.select(
        placeholder="‚ö° Selecione a Prioridade",
        options=[
            discord.SelectOption(label="Baixa", description="N√£o √© urgente", emoji="üü¢", value="baixa"),
            discord.SelectOption(label="M√©dia", description="Prioridade normal", emoji="üü°", value="media"),
            discord.SelectOption(label="Alta", description="Precisa de aten√ß√£o", emoji="üü†", value="alta"),
            discord.SelectOption(label="Urgente", description="Muito urgente!", emoji="üî¥", value="urgente"),
        ]
    )
    async def select_priority(self, interaction: discord.Interaction, select: discord.ui.Select):
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("‚ùå Este painel n√£o √© seu!", ephemeral=True)
            return
        
        priority_map = {
            "baixa": "üü¢ Baixa",
            "media": "üü° M√©dia",
            "alta": "üü† Alta",
            "urgente": "üî¥ Urgente"
        }
        
        self.selected_priority = priority_map.get(select.values[0], "üü° M√©dia")
        await interaction.response.send_message(f"‚úÖ Prioridade selecionada: **{self.selected_priority}**", ephemeral=True)
    
    @discord.ui.button(label="Continuar", style=discord.ButtonStyle.green, emoji="‚úÖ", row=2)
    async def continue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("‚ùå Este painel n√£o √© seu!", ephemeral=True)
            return
        
        # Abrir modal com as sele√ß√µes salvas
        modal = TicketModal(self.config, self.category_channel, self.selected_category, self.selected_priority)
        await interaction.response.send_modal(modal)
        self.stop()

# Modal para coletar informa√ß√µes do ticket (com sele√ß√µes salvas)
class TicketModal(discord.ui.Modal, title="üé´ Informa√ß√µes do Ticket"):
    def __init__(self, config, category, selected_category, selected_priority):
        super().__init__()
        self.config = config
        self.category = category
        self.selected_category = selected_category
        self.selected_priority = selected_priority
        
        # Campo 1: Assunto (OBRIGAT√ìRIO)
        self.assunto = discord.ui.TextInput(
            label="üìã Assunto do Ticket",
            placeholder="Ex: D√∫vida sobre cargos, Bug no bot, etc.",
            required=True,
            max_length=100,
            min_length=3
        )
        self.add_item(self.assunto)
        
        # Campo 2: Descri√ß√£o (OBRIGAT√ìRIO)
        self.descricao = discord.ui.TextInput(
            label="üìù Descri√ß√£o Detalhada",
            placeholder="Descreva seu problema, d√∫vida ou solicita√ß√£o com detalhes...",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000,
            min_length=10
        )
        self.add_item(self.descricao)
        
        # Campo 3: Idioma (OBRIGAT√ìRIO)
        self.idioma = discord.ui.TextInput(
            label="üåê Seu Idioma",
            placeholder="Ex: Portugu√™s, English, Espa√±ol, etc.",
            required=True,
            max_length=50
        )
        self.add_item(self.idioma)
        
        # Campo 4: Informa√ß√µes Adicionais (OPCIONAL)
        self.info_adicional = discord.ui.TextInput(
            label="‚ÑπÔ∏è Informa√ß√µes Adicionais (Opcional)",
            placeholder="Links, prints, IDs de usu√°rios, etc.",
            style=discord.TextStyle.paragraph,
            required=False,
            max_length=500
        )
        self.add_item(self.info_adicional)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Usar sele√ß√µes salvas do painel
            categoria_valor = self.selected_category
            prioridade_valor = self.selected_priority
            info_adicional_valor = self.info_adicional.value.strip() if self.info_adicional.value else "Nenhuma informa√ß√£o adicional fornecida"
            
            # Definir cor baseado na prioridade selecionada
            if "üî¥" in prioridade_valor or "üü†" in prioridade_valor:
                cor_embed = 0xff0000  # Vermelho
            elif "üü¢" in prioridade_valor:
                cor_embed = 0x00ff00  # Verde
            else:
                cor_embed = 0xffaa00  # Laranja (M√©dia)
                emoji_prioridade = prioridade_valor.split()[0]  # Pega o emoji
            
            # Buscar categoria configurada
            category_id = self.config.get('category_id')
            
            if not category_id:
                await interaction.response.send_message("‚ùå Sistema n√£o configurado! Use `.ticket categoria [ID]`", ephemeral=True)
                return
            
            # Buscar em todas as categorias do servidor
            target_category = None
            for cat in interaction.guild.categories:
                if cat.id == int(category_id):
                    target_category = cat
                    break
            
            if not target_category:
                await interaction.response.send_message("‚ùå Categoria n√£o encontrada! Reconfigure com `.ticket categoria [ID]`", ephemeral=True)
                return
            
            # Criar canal de ticket
            overwrites = {
                interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
                interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }
            
            # Adicionar permiss√µes para staff
            for role_id in self.config.get('staff_role_ids', []):
                role = interaction.guild.get_role(role_id)
                if role:
                    overwrites[role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
            
            # Contar quantos tickets j√° existem na categoria para numera√ß√£o
            ticket_number = 1
            for channel in target_category.channels:
                if channel.name.startswith("carrinho-"):
                    try:
                        num = int(channel.name.split("-")[1])
                        if num >= ticket_number:
                            ticket_number = num + 1
                    except:
                        pass
            
            # Criar canal com nome numerado
            ticket_channel = await target_category.create_text_channel(
                name=f"‚åäüõí‚åâ-carrinho-{ticket_number}",
                overwrites=overwrites
            )
            
            # Embed BONITO com todas as informa√ß√µes
            embed = discord.Embed(
                title="üé´ NOVO TICKET ABERTO",
                description=f"**{self.config.get('welcome_message')}**\n\n*Nossa equipe responder√° o mais breve poss√≠vel!*",
                color=cor_embed,
                timestamp=discord.utils.utcnow()
            )
            
            # Informa√ß√µes do usu√°rio
            embed.set_author(
                name=f"Ticket de {interaction.user.display_name}",
                icon_url=interaction.user.display_avatar.url
            )
            
            # Campos organizados
            embed.add_field(
                name="üë§ Aberto por",
                value=f"{interaction.user.mention}\n`ID: {interaction.user.id}`",
                inline=True
            )
            
            embed.add_field(
                name="üè∑Ô∏è Categoria",
                value=categoria_valor,
                inline=True
            )
            
            embed.add_field(
                name="‚ö° Prioridade",
                value=prioridade_valor,
                inline=True
            )
            
            embed.add_field(
                name="üåê Idioma",
                value=f"**{self.idioma.value}**",
                inline=True
            )
            
            embed.add_field(
                name="üìã Assunto",
                value=f"```{self.assunto.value}```",
                inline=False
            )
            
            embed.add_field(
                name="üìù Descri√ß√£o Detalhada",
                value=self.descricao.value[:1000],
                inline=False
            )
            
            embed.add_field(
                name="‚ÑπÔ∏è Informa√ß√µes Adicionais",
                value=info_adicional_valor[:500],
                inline=False
            )
            
            embed.set_footer(
                text="Sistema de Tickets ‚Ä¢ Caos Hub",
                icon_url=interaction.guild.icon.url if interaction.guild.icon else None
            )
            
            # View com bot√£o para fechar
            close_view = CloseTicketView()
            await ticket_channel.send(f"{interaction.user.mention}", embed=embed, view=close_view)
            
            # Mensagem de confirma√ß√£o
            await interaction.response.send_message(
                f"‚úÖ **Ticket criado com sucesso!**\n\n"
                f"üìå Canal: {ticket_channel.mention}\n"
                f"üè∑Ô∏è Categoria: **{categoria_valor}**\n"
                f"‚ö° Prioridade: **{prioridade_valor}**\n\n"
                f"*Nossa equipe foi notificada e responder√° em breve!*",
                ephemeral=True
            )
        
        except discord.Forbidden:
            await interaction.response.send_message(
                "‚ùå **Erro de Permiss√£o!**\n\n"
                "O bot n√£o tem permiss√£o para criar canais nesta categoria.\n"
                "Verifique as permiss√µes do bot!",
                ephemeral=True
            )
        except Exception as e:
            print(f"[ERRO TICKET] {e}")
            await interaction.response.send_message(
                f"‚ùå **Erro ao criar ticket!**\n\n"
                f"Detalhes: `{str(e)}`\n\n"
                f"Entre em contato com um administrador!",
                ephemeral=True
            )

# View com bot√£o para abrir ticket
class TicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="Abrir Ticket", style=discord.ButtonStyle.green, emoji="üé´", custom_id="open_ticket")
    async def open_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild_id = str(interaction.guild.id)
        
        # Verificar se o sistema est√° ativado
        if guild_id not in ticket_config or not ticket_config[guild_id].get('enabled'):
            await interaction.response.send_message("‚ùå Sistema de tickets desativado!", ephemeral=True)
            return
        
        config = ticket_config[guild_id]
        category_id = config.get('category_id')
        
        if not category_id:
            await interaction.response.send_message("‚ùå Sistema n√£o configurado!", ephemeral=True)
            return
        
        category = interaction.guild.get_channel(category_id)
        if not category:
            await interaction.response.send_message("‚ùå Categoria n√£o encontrada!", ephemeral=True)
            return
        
        # Verificar se o usu√°rio j√° tem um ticket aberto
        for channel in category.channels:
            if channel.name.endswith(f"-{interaction.user.id}"):
                await interaction.response.send_message(f"‚ùå Voc√™ j√° tem um ticket aberto: {channel.mention}", ephemeral=True)
                return
        
        # Mostrar painel de sele√ß√£o
        panel_embed = discord.Embed(
            title="üé´ CONFIGURAR SEU TICKET",
            description="**Selecione as op√ß√µes abaixo antes de continuar:**\n\n"
                       "üè∑Ô∏è **Categoria** - Tipo do seu ticket\n"
                       "‚ö° **Prioridade** - Urg√™ncia do atendimento\n\n"
                       "*Ap√≥s selecionar, clique em ‚úÖ Continuar*",
            color=0x00ff88
        )
        panel_embed.set_footer(text="As sele√ß√µes s√£o salvas automaticamente")
        
        panel_view = TicketCategoryView(config, category, interaction.user)
        await interaction.response.send_message(embed=panel_embed, view=panel_view, ephemeral=True)

# View com bot√£o para fechar ticket
class CloseTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="Fechar Ticket", style=discord.ButtonStyle.red, emoji="üîí", custom_id="close_ticket")
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.manage_channels:
            await interaction.response.send_message("‚ùå Apenas staff pode fechar!", ephemeral=True)
            return
        
        # CANAL DE LOG
        log_channel_id = 1424050835460980889
        log_channel = interaction.guild.get_channel(log_channel_id)
        
        if log_channel:
            try:
                ticket_channel = interaction.channel
                
                # Coletar mensagens do ticket
                messages = []
                async for msg in ticket_channel.history(limit=100, oldest_first=True):
                    messages.append(msg)
                
                # EMBED DE LOG DETALHADO
                log_embed = discord.Embed(
                    title="üîí TICKET FECHADO",
                    description=f"**Canal:** {ticket_channel.name}\n**ID:** `{ticket_channel.id}`",
                    color=0xff0000,
                    timestamp=discord.utils.utcnow()
                )
                
                # Extrair informa√ß√µes do primeiro embed
                if messages and messages[0].embeds:
                    embed_inicial = messages[0].embeds[0]
                    
                    for field in embed_inicial.fields:
                        if "Aberto por" in field.name:
                            log_embed.add_field(name="üë§ Aberto por", value=field.value, inline=True)
                        elif "Assunto" in field.name:
                            log_embed.add_field(name="üìã Assunto", value=field.value, inline=False)
                        elif "Descri√ß√£o" in field.name:
                            log_embed.add_field(name="üìù Descri√ß√£o", value=field.value[:1024], inline=False)
                        elif "Info Adicional" in field.name:
                            log_embed.add_field(name="‚ÑπÔ∏è Info Adicional", value=field.value[:1024], inline=False)
                
                # Quem fechou
                log_embed.add_field(
                    name="üîí Fechado por",
                    value=f"{interaction.user.mention}\n`ID: {interaction.user.id}`",
                    inline=True
                )
                
                # Estat√≠sticas
                total_mensagens = len(messages)
                usuarios_participantes = len(set(msg.author.id for msg in messages if not msg.author.bot))
                
                log_embed.add_field(
                    name="üìä Estat√≠sticas",
                    value=f"**Mensagens:** {total_mensagens}\n**Participantes:** {usuarios_participantes}",
                    inline=True
                )
                
                # Dura√ß√£o
                if messages:
                    criado_em = messages[0].created_at
                    fechado_em = discord.utils.utcnow()
                    duracao = fechado_em - criado_em
                    
                    horas = int(duracao.total_seconds() // 3600)
                    minutos = int((duracao.total_seconds() % 3600) // 60)
                    
                    log_embed.add_field(
                        name="‚è±Ô∏è Dura√ß√£o",
                        value=f"{horas}h {minutos}m",
                        inline=True
                    )
                
                log_embed.set_footer(text="Sistema de Tickets ‚Ä¢ Caos Hub")
                
                # Enviar embed
                await log_channel.send(embed=log_embed)
                
                # CRIAR ARQUIVO COM HIST√ìRICO COMPLETO
                historico_texto = f"=== HIST√ìRICO DO TICKET: {ticket_channel.name} ===\n\n"
                
                for msg in messages:
                    timestamp = msg.created_at.strftime("%d/%m/%Y %H:%M:%S")
                    autor = f"{msg.author.display_name} ({msg.author.id})"
                    conteudo = msg.content if msg.content else "[Embed ou anexo]"
                    
                    historico_texto += f"[{timestamp}] {autor}:\n{conteudo}\n\n"
                
                # Enviar arquivo
                import io
                arquivo = discord.File(
                    io.BytesIO(historico_texto.encode('utf-8')),
                    filename=f"ticket_{ticket_channel.name}_{discord.utils.utcnow().strftime('%Y%m%d_%H%M%S')}.txt"
                )
                
                await log_channel.send(
                    content=f"üìÑ **Hist√≥rico completo do ticket `{ticket_channel.name}`:**",
                    file=arquivo
                )
                
            except Exception as e:
                print(f"[ERRO LOG TICKET] {e}")
        
        await interaction.response.send_message("üîí Fechando ticket...", ephemeral=True)
        await interaction.channel.delete(reason=f"Ticket fechado por {interaction.user}")

# ========================================
# SISTEMA AUTOM√ÅTICO DE NICKNAMES
# ========================================

# FUN√á√ÉO DESABILITADA - CAUSAVA DUPLICA√á√ïES
async def update_nickname_for_roles_DISABLED(member):
    """Atualiza o nickname do membro baseado nos cargos que possui"""
    try:
        # Salvar nickname original se ainda n√£o foi salvo (SEM prefixos)
        if member.id not in original_nicknames:
            clean_name = member.display_name
            # Remover qualquer prefixo existente para salvar o nome limpo
            for prefix in CARGO_PREFIXES.values():
                if clean_name.startswith(prefix + " "):
                    clean_name = clean_name[len(prefix + " "):]
                    break
            original_nicknames[member.id] = clean_name
        
        # Verificar se o membro tem algum cargo com prefixo
        prefixes_to_add = []
        for role in member.roles:
            if role.id in CARGO_PREFIXES:
                prefix = CARGO_PREFIXES[role.id]
                if prefix not in prefixes_to_add:
                    prefixes_to_add.append(prefix)
        
        # Obter nickname original (sem prefixos)
        original_nick = original_nicknames.get(member.id, member.name)
        
        # Remover prefixos existentes do nickname atual
        current_nick = member.display_name
        for prefix in CARGO_PREFIXES.values():
            if current_nick.startswith(prefix + " "):
                current_nick = current_nick[len(prefix + " "):]
        
        # Construir novo nickname
        if prefixes_to_add:
            # Ordenar prefixos por import√¢ncia (admin > mod > vip, etc)
            priority_order = ["[OWNER]", "[ADMIN]", "[MOD]", "[SUB]", "[STAFF]", "[DEV]", "[DESIGN]", "[YT]", "[LIVE]", "[VIP]", "[PREMIUM]", "[BOOST]"]
            prefixes_to_add.sort(key=lambda x: priority_order.index(x) if x in priority_order else 999)
            
            # Usar apenas o prefixo de maior prioridade
            new_nickname = f"{prefixes_to_add[0]} {current_nick}"
        else:
            # Sem cargos especiais, usar nickname original
            new_nickname = original_nick
        
        # Limitar tamanho do nickname (Discord tem limite de 32 caracteres)
        if len(new_nickname) > 32:
            # Truncar o nome mas manter o prefixo
            if prefixes_to_add:
                prefix = prefixes_to_add[0]
                max_name_length = 32 - len(prefix) - 1  # -1 para o espa√ßo
                truncated_name = current_nick[:max_name_length]
                new_nickname = f"{prefix} {truncated_name}"
            else:
                new_nickname = new_nickname[:32]
        
        # Atualizar nickname se mudou
        if member.display_name != new_nickname:
            await member.edit(nick=new_nickname, reason="Atualiza√ß√£o autom√°tica de nickname por cargo")
            print(f"‚úÖ Nickname atualizado: {member.name} -> {new_nickname}")
            return True
        
        return False
        
    except discord.Forbidden:
        print(f"‚ùå Sem permiss√£o para alterar nickname de {member.display_name}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao atualizar nickname de {member.display_name}: {e}")
        return False

# Evento COMPLETAMENTE removido para evitar duplica√ß√µes

# Comando para atualizar nicknames manualmente
# COMANDO DESABILITADO - CAUSAVA DUPLICA√á√ïES
# @bot.command(name='updatenicks')
# @commands.has_permissions(administrator=True)
async def update_nicks_command_DISABLED(ctx):
    """Atualiza os nicknames de todos os membros baseado nos cargos"""
    
    embed_start = discord.Embed(
        title="üîÑ ATUALIZANDO NICKNAMES",
        description="Iniciando atualiza√ß√£o autom√°tica de nicknames...",
        color=0x00ff00
    )
    msg = await ctx.reply(embed=embed_start)
    
    updated_count = 0
    total_members = len([m for m in ctx.guild.members if not m.bot])
    
    for member in ctx.guild.members:
        if member.bot:
            continue
            
        # success = await update_nickname_for_roles_DISABLED(member)
        success = False  # Desabilitado
        if success:
            updated_count += 1
        
        # Pequena pausa para evitar rate limit
        await asyncio.sleep(0.1)
    
    embed_result = discord.Embed(
        title="‚úÖ NICKNAMES ATUALIZADOS",
        description=f"**Processo conclu√≠do!**\n\nüìä **Estat√≠sticas:**\nüë• **Membros processados:** {total_members}\n‚úÖ **Nicknames atualizados:** {updated_count}\nüéØ **Taxa de sucesso:** {(updated_count/total_members*100):.1f}%",
        color=0x00ff00
    )
    embed_result.add_field(
        name="üîß Cargos Monitorados",
        value="‚Ä¢ `Administrador` ‚Üí `[ADM]`\n‚Ä¢ `Staff` ‚Üí `[STF]`\n‚Ä¢ `Moderador` ‚Üí `[MOD]`\n‚Ä¢ `Sub Moderador` ‚Üí `[SBM]`",
        inline=False
    )
    embed_result.set_footer(text="Sistema de Nicknames Autom√°ticos ‚Ä¢ Caos Hub")
    
    await msg.edit(embed=embed_result)

# @update_nicks_command.error
# async def update_nicks_error(ctx, error):
#     if isinstance(error, commands.MissingPermissions):
#         await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# ========================================
# COMANDO ADDROLE - ADICIONAR CARGOS E PREFIXOS
# ========================================

@bot.command(name='addrole')
@is_sub_moderator_or_higher()
async def add_role_new(ctx, cargo: discord.Role = None, usuario: discord.Member = None):
    """Adiciona cargo com hierarquia autom√°tica e prefixo"""

    if not cargo or not usuario:
        embed = discord.Embed(
            title="‚ùå Uso Incorreto",
            description="Use: `.addrole @cargo @usu√°rio` ",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return

    # Recarregar membro para garantir que roles est√£o atualizadas
    usuario = await ctx.guild.fetch_member(usuario.id)

    if cargo in usuario.roles:
        embed = discord.Embed(
            title="‚ö†Ô∏è Cargo J√° Possui",
            description=f"**{usuario.display_name}** j√° possui o cargo **{cargo.name}**!",
            color=0xffaa00
        )
        embed.add_field(name="üìã Informa√ß√£o", value=f"**Usu√°rio:** {usuario.mention}\n**Cargo:** {cargo.mention}", inline=False)
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    try:
        HIERARCHY = {
            1365633918593794079: 4,  # ADM
            1365634226254254150: 3,  # STF
            1365633102973763595: 2,  # MOD
            1365631940434333748: 1   # SBM
        }

        removed_roles = []

        # Remover cargos conflitantes de mesma hierarquia
        if cargo.id in HIERARCHY:
            for role in list(usuario.roles):
                if role.id in HIERARCHY and role.id != cargo.id:
                    await usuario.remove_roles(role)
                    removed_roles.append(role.name)

        await usuario.add_roles(cargo)
        
        # Atualizar nickname se houver prefixo
        nickname_msg = ""
        if cargo.id in CARGO_PREFIXES:
            clean_name = usuario.display_name
            for prefix in CARGO_PREFIXES.values():
                if clean_name.startswith(prefix + " "):
                    clean_name = clean_name[len(prefix) + 1:]
                    break

            new_nickname = f"{CARGO_PREFIXES[cargo.id]} {clean_name}"
            if len(new_nickname) > 32:
                clean_name = clean_name[:32 - len(CARGO_PREFIXES[cargo.id]) - 1]
                new_nickname = f"{CARGO_PREFIXES[cargo.id]} {clean_name}"

            await usuario.edit(nick=new_nickname)
            nickname_msg = f"\nüè∑Ô∏è **Nickname:** `{new_nickname}` "
        
        embed = discord.Embed(
            title="‚úÖ CARGO ADICIONADO",
            description=f"**{cargo.name}** foi adicionado a **{usuario.display_name}**!",
            color=0x00ff00
        )

        details = f"**Usu√°rio:** {usuario.mention}\n**Cargo:** {cargo.mention}\n**Moderador:** {ctx.author.mention}"
        if removed_roles:
            details += f"\nüîÑ **Removidos:** {', '.join(removed_roles)}"
        details += nickname_msg

        embed.add_field(name="üìã Detalhes", value=details, inline=False)
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except Exception as e:
        embed = discord.Embed(title="‚ùå ERRO", description=f"Erro ao adicionar cargo: {e}", color=0xff0000)
        await ctx.reply(embed=embed)

@add_role_new.error
async def addrole_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        embed = discord.Embed(
            title="‚ùå Permiss√£o Negada",
            description="Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.RoleNotFound):
        embed = discord.Embed(
            title="‚ùå Cargo N√£o Encontrado",
            description="Cargo n√£o encontrado! Certifique-se de mencionar um cargo v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Usu√°rio N√£o Encontrado",
            description="Usu√°rio n√£o encontrado! Certifique-se de mencionar um usu√°rio v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.RoleNotFound):
        embed = discord.Embed(
            title="‚ùå Cargo N√£o Encontrado",
            description="Cargo n√£o encontrado! Certifique-se de mencionar um cargo v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Usu√°rio N√£o Encontrado",
            description="Usu√°rio n√£o encontrado! Certifique-se de mencionar um usu√°rio v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)

# ========================================
# COMANDO REMOVEROLE - REMOVER CARGOS
# ========================================

@bot.command(name='removerole')
@is_sub_moderator_or_higher()
async def remove_role_new(ctx, cargo: discord.Role = None, usuario: discord.Member = None):
    """Remove cargo e restaura nickname com hierarquia"""

    if not cargo or not usuario:
        embed = discord.Embed(
            title="‚ùå Uso Incorreto",
            description="Use: `.removerole @cargo @usu√°rio` ",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return

    usuario = await ctx.guild.fetch_member(usuario.id)

    if cargo not in usuario.roles:
        embed = discord.Embed(
            title="‚ö†Ô∏è Cargo N√£o Possui",
            description=f"**{usuario.display_name}** n√£o possui **{cargo.name}**!",
            color=0xffaa00
        )
        await ctx.reply(embed=embed)
        return
    
    try:
        HIERARCHY = {
            1365633918593794079: 4,  # ADM
            1365634226254254150: 3,  # STF
            1365633102973763595: 2,  # MOD
            1365631940434333748: 1   # SBM
        }

        await usuario.remove_roles(cargo)
        usuario = await ctx.guild.fetch_member(usuario.id)  # Garantir roles atualizadas
        
        nickname_msg = ""
        if cargo.id in CARGO_PREFIXES:
            clean_name = usuario.display_name
            for prefix in CARGO_PREFIXES.values():
                if clean_name.startswith(prefix + " "):
                    clean_name = clean_name[len(prefix) + 1:]
                    break

            # Encontrar o prefixo de maior cargo restante
            highest_role = None
            highest_level = 0
            for role in usuario.roles:
                if role.id in HIERARCHY and role.id in CARGO_PREFIXES:
                    if HIERARCHY[role.id] > highest_level:
                        highest_level = HIERARCHY[role.id]
                        highest_role = role

            if highest_role:
                new_nickname = f"{CARGO_PREFIXES[highest_role.id]} {clean_name}"
                await usuario.edit(nick=new_nickname)
                nickname_msg = f"\nüè∑Ô∏è **Nickname atualizado:** `{new_nickname}` "
            else:
                await usuario.edit(nick=clean_name)
                nickname_msg = f"\nüè∑Ô∏è **Nickname restaurado:** `{clean_name}` "
        
        embed = discord.Embed(
            title="‚úÖ CARGO REMOVIDO",
            description=f"**{cargo.name}** foi removido de **{usuario.display_name}**!",
            color=0xff4444
        )

        details = f"**Usu√°rio:** {usuario.mention}\n**Cargo:** {cargo.mention}\n**Moderador:** {ctx.author.mention}{nickname_msg}"
        embed.add_field(name="üìã Detalhes", value=details, inline=False)
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except Exception as e:
        embed = discord.Embed(title="‚ùå ERRO", description=f"Erro ao remover cargo: {e}", color=0xff0000)
        await ctx.reply(embed=embed)

@remove_role_new.error
async def removerole_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        embed = discord.Embed(
            title="‚ùå Permiss√£o Negada",
            description="Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.RoleNotFound):
        embed = discord.Embed(
            title="‚ùå Cargo N√£o Encontrado",
            description="Cargo n√£o encontrado! Certifique-se de mencionar um cargo v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Usu√°rio N√£o Encontrado",
            description="Usu√°rio n√£o encontrado! Certifique-se de mencionar um usu√°rio v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)

# ========================================
# CONFIGURA√á√ÉO E INICIALIZA√á√ÉO
# ========================================

# ========================================
# SERVIDOR HTTP PARA UPTIMEROBOT (ANTI-HIBERNA√á√ÉO)
# ========================================
# Este servidor recebe pings do UptimeRobot para manter o bot acordado 24/7

class HealthHandler(BaseHTTPRequestHandler):
    def do_HEAD(self):
        """Responde √†s requisi√ß√µes HEAD do UptimeRobot"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        # Log do ping HEAD recebido
        current_time = datetime.now().strftime('%H:%M:%S')
        print(f'üåê [{current_time}] HEAD request do UptimeRobot - Bot mantido acordado!')
    
    def do_GET(self):
        """Responde aos pings do UptimeRobot"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        # P√°gina HTML bonita para mostrar status
        uptime = time.time() - start_time if 'start_time' in globals() else 0
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Caos Bot - Status</title>
            <meta charset="utf-8">
            <style>
                body {{ 
                    font-family: Arial, sans-serif; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    margin: 0;
                }}
                .container {{
                    text-align: center;
                    background: rgba(0,0,0,0.3);
                    padding: 40px;
                    border-radius: 20px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                }}
                h1 {{ font-size: 3em; margin: 0; }}
                .status {{ color: #00ff88; font-size: 1.5em; margin: 20px 0; }}
                .info {{ font-size: 1.2em; opacity: 0.9; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ Caos Bot</h1>
                <div class="status">‚úÖ ONLINE 24/7</div>
                <div class="info">‚è±Ô∏è Uptime: {hours}h {minutes}m</div>
                <div class="info">üîÑ Sistema Anti-Hiberna√ß√£o Ativo</div>
                <div class="info">üíö Mantido pelo UptimeRobot</div>
            </div>
        </body>
        </html>
        """
        self.wfile.write(html.encode('utf-8'))
        
        # Log do ping recebido
        current_time = datetime.now().strftime('%H:%M:%S')
        print(f'üåê [{current_time}] GET request do UptimeRobot - Bot mantido acordado!')
    
    def log_message(self, format, *args):
        pass  # Silencia logs HTTP padr√£o

def start_http_server():
    """Inicia servidor HTTP para receber pings do UptimeRobot"""
    global start_time
    start_time = time.time()
    
    port = int(os.environ.get('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    print(f'üåê Servidor HTTP iniciado na porta {port}')
    print(f'üîó URL do bot: https://seu-app.onrender.com')
    print(f'üìç Configure no UptimeRobot: Ping a cada 5 minutos')
    server.serve_forever()

# Token do bot principal (usando vari√°vel de ambiente para seguran√ßa)
TOKEN = os.getenv('DISCORD_TOKEN')

# ========================================
# SISTEMA DE M√öSICA COM WAVELINK/LAVALINK
# ========================================
"""
Sistema profissional de m√∫sica usando Wavelink (Lavalink).
Muito mais est√°vel que yt-dlp direto.
Lavalink roda localmente no mesmo container (localhost:2333).
"""

# Configura√ß√£o do Lavalink (local no mesmo container)
# NOTA: J√° definido no in√≠cio do arquivo, n√£o redefinir aqui

# Cores padr√£o para embeds
COLOR_SUCCESS = 0xff8c00  # Laranja
COLOR_ERROR = 0xff4d4d    # Vermelho

# Tokens dos 4 bots de m√∫sica
MUSIC_TOKENS = {
    'CAOS Music 1': os.getenv('MUSIC_TOKEN_1'),
    'CAOS Music 2': os.getenv('MUSIC_TOKEN_2'),
    'CAOS Music 3': os.getenv('MUSIC_TOKEN_3'),
    'CAOS Music 4': os.getenv('MUSIC_TOKEN_4'),
}

# Pool global de bots (para rastreamento)
music_bots_pool = {}

# Pool de controle de disponibilidade
bot_pool = {
    'CAOS Music 1': {'busy': False, 'guild_id': None},
    'CAOS Music 2': {'busy': False, 'guild_id': None},
    'CAOS Music 3': {'busy': False, 'guild_id': None},
    'CAOS Music 4': {'busy': False, 'guild_id': None},
}

def pick_available_bot(guild_id):
    """Retorna o bot designado para este guild ou um livre"""
    # Verificar se j√° tem bot designado para este guild
    for name, info in bot_pool.items():
        if info['guild_id'] == guild_id and info['busy']:
            return name
    
    # Nenhum designado, pegar primeiro livre
    for name, info in bot_pool.items():
        if not info['busy']:
            return name
    
    return None  # Todos ocupados

def mark_bot_busy(name, guild_id):
    """Marca bot como ocupado"""
    if name in bot_pool:
        bot_pool[name]['busy'] = True
        bot_pool[name]['guild_id'] = guild_id
        print(f'[POOL] üîí {name} ocupado no servidor {guild_id}')

def mark_bot_free(name):
    """Libera bot"""
    if name in bot_pool:
        guild_id = bot_pool[name]['guild_id']
        bot_pool[name]['busy'] = False
        bot_pool[name]['guild_id'] = None
        print(f'[POOL] üîì {name} liberado (estava em {guild_id})')

# ========================================
# SISTEMA DE M√öSICA - APENAS NOS BOTS CAOS MUSIC
# ========================================
# O bot principal N√ÉO tem comandos de m√∫sica.
# Use os bots CAOS Music 1-4 com prefixo 'mc.' para m√∫sica.

# ========================================
# INICIALIZA√á√ÉO DO BOT
# ========================================
# NOTA: Comandos de m√∫sica removidos do bot principal.
# Use apenas os bots CAOS Music 1-4 com prefixo 'mc.' para m√∫sica.

def create_music_bot(bot_name, token):
    """Factory para criar bot de m√∫sica ISOLADO (evita closure bug)"""
    intents = discord.Intents.default()
    intents.message_content = True
    intents.guilds = True
    intents.voice_states = True
    
    music_bot = commands.Bot(command_prefix='mc.', intents=intents, help_command=None)
    
    # Fila ISOLADA para este bot
    bot_queues = {}
    
    def get_bot_queue(guild_id):
        if guild_id not in bot_queues:
            bot_queues[guild_id] = MusicQueue()
        return bot_queues[guild_id]
    
    # Fun√ß√£o para retornar o nome (evita closure)
    def this_name():
        return bot_name
    
    @music_bot.event
    async def on_ready(bot_name=bot_name, music_bot=music_bot):
        print(f'‚úÖ {music_bot.user} ({bot_name}) is online. Trying to connect to Lavalink...')
        print(f'üìä [{music_bot.user}] conectado em {len(music_bot.guilds)} servidor(es)')
        
        # Status personalizado
        try:
            await music_bot.change_presence(
                activity=discord.Activity(type=discord.ActivityType.listening, name="mc.p | mc.play"),
                status=discord.Status.online
            )
        except Exception as e:
            print(f"[{bot_name}] Erro ao definir status: {e}")
        
        # Conectar ao Lavalink com retry robusto
        try:
            await connect_lavalink(music_bot, identifier=bot_name)
            music_bots_pool[bot_name] = {'bot': music_bot, 'online': True}
            print(f"[{bot_name}] Lavalink connected.")
        except Exception as e:
            print(f"[{bot_name}] Lavalink connect failed: {e}")
    
    @music_bot.event
    async def on_wavelink_track_end(payload: wavelink.TrackEndEventPayload):
        """Auto-play pr√≥xima m√∫sica"""
        player = payload.player
        if not player:
            return
        
        queue_obj = get_bot_queue(player.guild.id)
        
        # Loop de m√∫sica
        if queue_obj.loop_mode == 'song' and queue_obj.current:
            await player.play(queue_obj.current)
            await player.set_volume(queue_obj.volume)
            print(f'[{bot_name}] üîÇ Loop: {queue_obj.current.title}')
            return
        
        # Pr√≥xima da fila
        if queue_obj.queue:
            next_track = queue_obj.queue.popleft()
            queue_obj.current = next_track
            queue_obj.skip_votes.clear()
            
            await player.play(next_track)
            await player.set_volume(queue_obj.volume)
            print(f'[{bot_name}] ‚è≠Ô∏è Pr√≥xima: {next_track.title}')
        else:
            # Fila vazia, liberar bot
            mark_bot_free(bot_name)
            queue_obj.bot_name = None
    
    # Helper para verificar se este bot √© o designado
    def is_assigned_for_guild(guild_id):
        """Verifica se este bot √© o designado para o guild"""
        assigned = pick_available_bot(guild_id)
        # Se n√£o houver atribui√ß√£o e este bot estiver livre, pode assumir
        if assigned is None and not bot_pool[bot_name]['busy']:
            return True
        return assigned == bot_name
    
    @music_bot.command(name='play', aliases=['p'])
    async def play_cmd(ctx, *, query: str):
        """mc.play <m√∫sica> ou mc.p <m√∫sica>"""
        bot_name = this_name()
        guild_id = ctx.guild.id

        # 1) S√≥ responde se designado
        if not is_assigned_for_guild(guild_id):
            return

        # 2) Se o usu√°rio n√£o estiver em um canal de voz
        if not ctx.author.voice or not ctx.author.voice.channel:
            return await ctx.reply(embed=discord.Embed(
                description="‚ùå Voc√™ precisa estar em um canal de voz!",
                color=COLOR_ERROR
            ))

        # 3) Verifica se h√° nodes conectados (auto-reconex√£o)
        if not any(node.status == wavelink.NodeStatus.CONNECTED for node in wavelink.Pool.nodes.values()):
            msg = await ctx.reply(embed=discord.Embed(
                description="üîå Nenhum node Lavalink conectado. Tentando reconectar...",
                color=COLOR_SUCCESS
            ))
            success = await connect_lavalink(ctx.bot, identifier=bot_name)
            if not success:
                return await msg.edit(embed=discord.Embed(
                    description="‚ùå Falha ao reconectar com o Lavalink.",
                    color=COLOR_ERROR
                ))
            await asyncio.sleep(3)
            await msg.delete()

        # 4) Marcar bot ocupado
        mark_bot_busy(bot_name, guild_id)
        queue_obj = get_bot_queue(guild_id)
        queue_obj.bot_name = bot_name

        # 5) Buscar m√∫sica
        try:
            track = await wavelink.YouTubeTrack.search(query, return_first=True)
            if not track:
                mark_bot_free(bot_name)
                return await ctx.reply(embed=discord.Embed(
                    description="‚ùå Nenhum resultado encontrado.",
                    color=COLOR_ERROR
                ))
        except Exception as e:
            mark_bot_free(bot_name)
            return await ctx.reply(embed=discord.Embed(
                description=f"‚ùå Erro ao buscar: {str(e)[:150]}",
                color=COLOR_ERROR
            ))

        # 6) Conectar ao canal de voz
        try:
            vc: wavelink.Player = ctx.voice_client or await ctx.author.voice.channel.connect(cls=wavelink.Player)
            print(f'[{bot_name}] üîä Conectado ao canal de voz em {ctx.guild.name}')
        except Exception as e:
            mark_bot_free(bot_name)
            return await ctx.reply(embed=discord.Embed(
                description=f"‚ùå Erro ao conectar no canal de voz: {e}",
                color=COLOR_ERROR
            ))

        # 7) Se j√° est√° tocando, adicionar √† fila
        if vc.playing:
            queue_obj.queue.append(track)
            embed = discord.Embed(
                title="üìã Adicionado √† fila",
                description=f"**{track.title}**",
                color=COLOR_SUCCESS
            )
            embed.add_field(name="Posi√ß√£o", value=f"#{len(queue_obj.queue)}", inline=True)
            embed.set_footer(text=f"Bot: {bot_name}")
            return await ctx.reply(embed=embed)

        # 8) Tocar m√∫sica
        queue_obj.current = track
        queue_obj.current_requester = ctx.author.id
        queue_obj.skip_votes.clear()

        try:
            await vc.play(track)
            await vc.set_volume(queue_obj.volume)
        except Exception as e:
            mark_bot_free(bot_name)
            return await ctx.reply(embed=discord.Embed(
                description=f"‚ùå Erro ao tocar: {e}",
                color=COLOR_ERROR
            ))

        print(f'[{bot_name}] ‚ñ∂Ô∏è Tocando: {track.title} em {ctx.guild.name}')

        # 9) Criar painel
        try:
            view = MusicControlPanel(ctx, queue_obj)
            embed_panel = await view.create_embed()
            panel_msg = await ctx.send(embed=embed_panel, view=view)
            queue_obj.control_message = panel_msg
            queue_obj.control_view = view
        except:
            pass

        # 10) Mensagem de sucesso
        embed = discord.Embed(
            description=f"‚ñ∂Ô∏è Tocando agora: **{track.title}**",
            color=COLOR_SUCCESS
        )
        await ctx.reply(embed=embed)
    
    @music_bot.command(name='skip', aliases=['s'])
    async def skip_cmd(ctx):
        """Pula a m√∫sica atual"""
        name = this_name()
        
        # S√≥ responde se designado
        if not is_assigned_for_guild(ctx.guild.id):
            return
        
        player: wavelink.Player = ctx.guild.voice_client
        
        if not player or not player.playing:
            return await ctx.reply(
                embed=discord.Embed(description="‚ùå Nada tocando.", color=COLOR_ERROR)
            )
        
        await player.stop()
        print(f'[{name}] ‚è≠Ô∏è Skip solicitado em {ctx.guild.name}')
        return await ctx.reply(
            embed=discord.Embed(description="‚è≠Ô∏è M√∫sica pulada!", color=COLOR_SUCCESS)
        )
    
    @music_bot.command(name='stop')
    async def stop_cmd(ctx):
        """Para a m√∫sica e limpa a fila"""
        name = this_name()
        
        # S√≥ responde se designado
        if not is_assigned_for_guild(ctx.guild.id):
            return
        
        player: wavelink.Player = ctx.guild.voice_client
        
        if not player:
            return await ctx.reply(
                embed=discord.Embed(description="‚ùå N√£o estou em um canal de voz.", color=COLOR_ERROR)
            )
        
        queue_obj = get_bot_queue(ctx.guild.id)
        queue_obj.queue.clear()
        queue_obj.current = None
        queue_obj.bot_name = None
        
        mark_bot_free(name)
        
        await player.disconnect()
        print(f'[{name}] ‚èπÔ∏è Stop e desconectado em {ctx.guild.name}')
        return await ctx.reply(
            embed=discord.Embed(description="‚èπÔ∏è Parado e desconectado.", color=COLOR_SUCCESS)
        )
    
    return music_bot

async def start_music_bot(name, token):
    """Inicia um bot de m√∫sica usando a factory"""
    try:
        if not token:
            print(f'‚ùå Token n√£o configurado para {name}')
            return
        
        # Criar bot usando factory (evita closure bug)
        music_bot = create_music_bot(name, token)
        
        # Iniciar bot
        await music_bot.start(token)
        
    except Exception as e:
        print(f'‚ùå Erro ao iniciar {name}: {e}')
        import traceback
        traceback.print_exc()

async def start_all_bots():
    """Inicia o bot principal + 4 bots de m√∫sica ISOLADOS"""
    try:
        print('=' * 60)
        print('üöÄ INICIANDO SISTEMA CAOS')
        print('=' * 60)
        
        # Verificar token principal
        if not TOKEN:
            print('‚ùå ERRO: DISCORD_TOKEN n√£o encontrado!')
            exit(1)
        
        # Aguardar Lavalink estar dispon√≠vel
        lavalink_ok = await wait_for_lavalink()
        if not lavalink_ok:
            print('‚ö†Ô∏è Continuando sem Lavalink (m√∫sica n√£o funcionar√°)')
        
        # Criar tasks para todos os bots
        tasks = []
        
        # Bot principal com status personalizado
        async def start_main():
            print('ü§ñ Iniciando bot principal (CAOS Hub)...')
            
            @bot.event
            async def on_ready():
                print(f'‚úÖ [{bot.user}] est√° online!')
                print(f'üìä [{bot.user}] conectado em {len(bot.guilds)} servidor(es)')
                
                # Status personalizado
                activity = discord.Game("üí≠ O Hub dos sonhos...")
                await bot.change_presence(activity=activity)
                
                # Carregar dados
                load_warnings_data()
                load_role_config()
                load_welcome_config()
                
                # Sistema anti-hiberna√ß√£o
                if not keep_alive.is_running():
                    keep_alive.start()
            
            await bot.start(TOKEN)
        
        tasks.append(asyncio.create_task(start_main()))
        
        # 4 bots de m√∫sica ISOLADOS (usando factory)
        print(f'\nüéµ Preparando {len(MUSIC_TOKENS)} bots de m√∫sica...')
        for bot_name, token in MUSIC_TOKENS.items():
            if token:
                print(f'   ‚Üí {bot_name}')
                tasks.append(asyncio.create_task(start_music_bot(bot_name, token)))
            else:
                print(f'   ‚ö†Ô∏è {bot_name}: Token n√£o configurado')
        
        print('\n‚è≥ Aguardando todos os bots iniciarem...\n')
        
        # Aguardar todos
        await asyncio.gather(*tasks, return_exceptions=True)
        
    except KeyboardInterrupt:
        print('\n‚ö†Ô∏è Encerrando sistema...')
    except Exception as e:
        print(f'‚ùå Erro cr√≠tico: {e}')
        import traceback
        traceback.print_exc()
        time.sleep(30)

if __name__ == '__main__':
    # Rodar todos os bots
    asyncio.run(start_all_bots())

# Sistema anti-hiberna√ß√£o j√° definido no in√≠cio do arquivo

