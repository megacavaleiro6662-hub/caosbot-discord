# Bot Discord Caos - Python
# Arquivo principal do bot

import discord
from discord import app_commands
from discord.ext import commands, tasks
import asyncio
import random
import time
import json
import os
from collections import defaultdict, deque
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler
import re
import aiohttp
import requests
from datetime import datetime
from discord.ui import Button, View
import math
import threading
from flask import Flask, request, jsonify, render_template, session, redirect, url_for, Response
from functools import wraps
import secrets
from io import BytesIO
import sqlite3
from urllib.parse import urlencode

# ========================================
# SISTEMA DE M√öSICA REMOVIDO
# ========================================
# Bot focado em modera√ß√£o, tickets e administra√ß√£o.
# Sistema de m√∫sica foi removido para maior estabilidade e foco em vendas.

# ========================================
# INICIALIZAR FLASK COM OAUTH2
# ========================================
app = Flask(__name__)
app.secret_key = secrets.token_hex(32)

# Discord OAuth2
DISCORD_CLIENT_ID = os.getenv('DISCORD_CLIENT_ID', 'YOUR_CLIENT_ID')
DISCORD_CLIENT_SECRET = os.getenv('DISCORD_CLIENT_SECRET', 'YOUR_CLIENT_SECRET')
DISCORD_REDIRECT_URI = os.getenv('DISCORD_REDIRECT_URI', 'http://localhost:5000/callback')
DISCORD_OAUTH_URL = f"https://discord.com/api/oauth2/authorize?client_id={DISCORD_CLIENT_ID}&redirect_uri={DISCORD_REDIRECT_URI}&response_type=code&scope=identify%20guilds%20guilds.members.read"

# Log para debug
print(f"üîß REDIRECT_URI configurado: {DISCORD_REDIRECT_URI}")

# IDs dos cargos PERMITIDOS (apenas Founder, Sub-Dono, Administrador)
ALLOWED_ROLE_IDS = [
    '1365636960651051069',  # Founder
    '1365636456386789437',  # Sub-Dono
    '1365633918593794079'   # Administrador
]

SERVER_ID = '1365510151884378214'  # CAOS Hub

# Fun√ß√£o para verificar permiss√µes do usu√°rio
def check_user_permissions(user_id):
    """Verifica se usu√°rio tem cargo de Administrador ou superior EM TEMPO REAL usando BOT TOKEN"""
    try:
        # USA O BOT TOKEN para garantir informa√ß√µes atualizadas
        bot_token = os.getenv('DISCORD_TOKEN')
        if not bot_token:
            return False
        
        headers = {'Authorization': f'Bot {bot_token}'}
        
        # Busca os cargos do usu√°rio no servidor CAOS Hub (SEMPRE ATUALIZADO)
        member_data = requests.get(
            f'https://discord.com/api/guilds/{SERVER_ID}/members/{user_id}',
            headers=headers
        ).json()
        
        print(f"üîê [CHECK] Usu√°rio {user_id} - Cargos: {member_data.get('roles', [])}")
        
        # Verifica se tem algum dos cargos permitidos
        user_roles = member_data.get('roles', [])
        for role_id in user_roles:
            if role_id in ALLOWED_ROLE_IDS:
                print(f"‚úÖ [CHECK] Usu√°rio {user_id} tem cargo permitido: {role_id}")
                return True
        
        print(f"‚ùå [CHECK] Usu√°rio {user_id} N√ÉO tem cargo permitido")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar permiss√µes: {e}")
        return False

# Decorator para verificar login E permiss√µes em tempo real
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user' not in session:
            return redirect(url_for('login_page'))
        
        # Verifica permiss√µes em TEMPO REAL
        if not check_user_permissions(session['user']['id']):
            session.clear()
            return """
            <html>
            <head><title>Sess√£o Expirada</title><link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@700&display=swap" rel="stylesheet"></head>
            <body style="background:#000;color:#ff3300;text-align:center;padding-top:100px;font-family:Orbitron,sans-serif;">
                <h1 style="font-size:48px;text-shadow:0 0 20px #ff0000;">‚ö†Ô∏è ACESSO REVOGADO</h1>
                <p style="color:#ff6666;font-size:18px;">Suas permiss√µes de administrador foram removidas.</p>
                <a href="/login" style="color:#ff6600;font-size:16px;text-decoration:none;">‚Üê Fazer Login Novamente</a>
            </body>
            </html>
            """
        
        return f(*args, **kwargs)
    return decorated_function

# ========================================
# SERVIDOR HTTP PARA RENDER (DETECTAR PORTA)
# ========================================
@app.route('/')
def home():
    if 'user' in session:
        return redirect(url_for('dashboard'))
    return redirect(url_for('login_page'))

@app.route('/ping')
def ping():
    """Rota para keep-alive (evitar sleep do Render)"""
    return {"status": "alive", "bot": "online", "uptime": "running"}, 200

@app.route('/test')
def test():
    """Rota de teste para debug"""
    return """
    <html>
        <head><title>TESTE - CAOS Bot</title></head>
        <body style="background: #000; color: #fff; font-family: Arial; padding: 50px; text-align: center;">
            <h1>‚úÖ FLASK EST√Å FUNCIONANDO!</h1>
            <p>Se voc√™ est√° vendo isso, o servidor Flask est√° online.</p>
            <hr>
            <h2>Diagn√≥stico:</h2>
            <p><b>Status:</b> Online</p>
            <p><b>Porta:</b> """ + str(os.getenv("PORT", "10000")) + """</p>
            <p><b>REDIRECT_URI:</b> """ + DISCORD_REDIRECT_URI + """</p>
            <p><b>CLIENT_ID:</b> """ + DISCORD_CLIENT_ID + """</p>
            <hr>
            <a href="/" style="color: #ff6600;">Ir para Home</a> | 
            <a href="/login" style="color: #ff6600;">Ir para Login</a>
        </body>
    </html>
    """, 200
# SISTEMA DE LOGIN COM DISCORD OAUTH2
# ========================================
@app.route('/login')
def login_page():
    """P√°gina de login"""
    # Limpa sess√£o ao acessar p√°gina de login
    session.clear()
    
    html = f"""
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CAOS Hub - Login</title>
    <link rel="icon" href="https://i.ibb.co/Fq5Lgzs5/Chat-GPT-Image-7-de-out-de-2025-00-25-49.png" type="image/png">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; font-family: 'Orbitron', sans-serif; }}
        body {{
            background: linear-gradient(135deg, #000000 0%, #1a0000 25%, #330000 50%, #1a0000 75%, #000000 100%);
            background-size: 400% 400%;
            animation: fireGlow 20s ease infinite;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow-y: auto;
        }}
        @keyframes fireGlow {{
            0%, 100% {{ background-position: 0% 50%; }}
            50% {{ background-position: 100% 50%; }}
        }}
        .login-container {{
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(50, 0, 0, 0.8) 100%);
            border: 3px solid #ff6600;
            padding: 60px 50px;
            text-align: center;
            box-shadow: 0 16px 64px rgba(255, 50, 0, 0.6), 0 0 40px rgba(255, 100, 0, 0.4);
            max-width: 500px;
            width: 90%;
        }}
        .logo {{
            width: 200px;
            margin-bottom: 30px;
            filter: drop-shadow(0 0 20px rgba(255, 100, 0, 0.8));
        }}
        h1 {{
            font-size: 42px;
            color: #ffcc00;
            margin-bottom: 15px;
            text-shadow: 0 0 15px rgba(255, 200, 0, 0.6);
            letter-spacing: 3px;
        }}
        p {{
            color: #ffaa66;
            font-size: 16px;
            margin-bottom: 40px;
            letter-spacing: 1px;
        }}
        .login-btn {{
            background: linear-gradient(135deg, #ff6600, #ff3300);
            color: white;
            border: 3px solid #ff3300;
            padding: 18px 40px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s;
            letter-spacing: 2px;
            text-decoration: none;
            display: inline-block;
            box-shadow: 0 8px 24px rgba(255, 50, 0, 0.5);
        }}
        .login-btn:hover {{
            background: linear-gradient(135deg, #ff3300, #cc0000);
            box-shadow: 0 12px 32px rgba(255, 50, 0, 0.8);
            transform: translateY(-3px);
        }}
        .warning {{
            margin-top: 30px;
            padding: 15px;
            background: rgba(255, 50, 0, 0.1);
            border: 2px solid #ff3300;
            color: #ff6666;
            font-size: 14px;
        }}
        
        /* GIF de fundo tela toda */
        .animated-bg {{
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            object-fit: cover;
            opacity: 0.25;
            filter: hue-rotate(20deg) brightness(1.6) saturate(2.5) drop-shadow(0 0 40px rgba(255, 120, 0, 0.9));
            z-index: 0;
            pointer-events: none;
        }}
        
        .login-container {{
            position: relative;
            z-index: 10;
        }}
    </style>
</head>
<body>
    <!-- GIF animado de fundo -->
    <img src="https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDFjZnlmcjdpbjdseTR4ZnU5NWtzOHJhZ3Q0cWp3ZzBrYzFkcWhnbiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/IeZiGntCfEWOrSjK81/giphy.gif" alt="Animated BG" class="animated-bg">
    
    <div class="login-container">
        <img src="https://i.ibb.co/Fq5Lgzs5/Chat-GPT-Image-7-de-out-de-2025-00-25-49.png" alt="CAOS Logo" class="logo">
        <h1>CAOS HUB</h1>
        <p>Sistema Administrativo Avan√ßado</p>
        <a href="{DISCORD_OAUTH_URL}" class="login-btn">üîê LOGIN COM DISCORD</a>
        <div class="warning">
            ‚ö†Ô∏è <strong>ACESSO RESTRITO</strong><br>
            Apenas administradores podem acessar este painel.
        </div>
    </div>
</body>
</html>
    """
    return html

@app.route('/callback')
def callback():
    """Callback do Discord OAuth2 - VERIFICA√á√ÉO PERFEITA DE CARGOS"""
    # Limpa qualquer sess√£o antiga antes de come√ßar
    session.clear()
    
    code = request.args.get('code')
    if not code:
        return redirect(url_for('login_page'))
    
    try:
        # Trocar c√≥digo por token
        data = {
            'client_id': DISCORD_CLIENT_ID,
            'client_secret': DISCORD_CLIENT_SECRET,
            'grant_type': 'authorization_code',
            'code': code,
            'redirect_uri': DISCORD_REDIRECT_URI
        }
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        r = requests.post('https://discord.com/api/oauth2/token', data=data, headers=headers)
        r.raise_for_status()
        token_data = r.json()
        access_token = token_data['access_token']
        
        # Pegar informa√ß√µes do usu√°rio
        headers = {'Authorization': f'Bearer {access_token}'}
        user_data = requests.get('https://discord.com/api/users/@me', headers=headers).json()
        
        print(f"üîê [LOGIN] Usu√°rio tentando login: {user_data.get('username')} (ID: {user_data.get('id')})")
        
        # VERIFICA√á√ÉO PERFEITA: Usar Bot Token para pegar cargos do servidor CAOS Hub
        bot_token = os.getenv('DISCORD_TOKEN')
        if not bot_token:
            print("‚ùå [LOGIN] Bot Token n√£o configurado!")
            raise Exception("Bot Token n√£o configurado")
        
        # Buscar cargos do usu√°rio no servidor CAOS Hub usando BOT TOKEN (sempre atualizado)
        bot_headers = {'Authorization': f'Bot {bot_token}'}
        member_url = f'https://discord.com/api/guilds/{SERVER_ID}/members/{user_data["id"]}'
        
        print(f"üîç [LOGIN] Verificando membro: {member_url}")
        member_response = requests.get(member_url, headers=bot_headers)
        
        print(f"üì° [LOGIN] Status da API: {member_response.status_code}")
        
        if member_response.status_code == 404:
            print(f"‚ùå [LOGIN] Usu√°rio n√£o encontrado no servidor")
            print(f"üîç [LOGIN] Server ID: {SERVER_ID}")
            print(f"üîç [LOGIN] User ID: {user_data['id']}")
            return """
            <html>
            <head><title>Acesso Negado</title><link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@700&display=swap" rel="stylesheet"></head>
            <body style="background:#000;color:#ff3300;text-align:center;padding-top:100px;font-family:Orbitron,sans-serif;">
                <h1 style="font-size:48px;text-shadow:0 0 20px #ff0000;">‚ùå ACESSO NEGADO</h1>
                <p style="color:#ff6666;font-size:18px;">Voc√™ n√£o √© membro do servidor CAOS Hub.</p>
                <p style="color:#999;font-size:14px;">Certifique-se de estar no servidor e tenha os cargos necess√°rios.</p>
                <a href="/login" style="color:#ff6600;font-size:16px;text-decoration:none;">‚Üê Voltar ao Login</a>
            </body>
            </html>
            """
        
        if member_response.status_code != 200:
            print(f"‚ö†Ô∏è [LOGIN] Erro na API: {member_response.text}")
            return f"""
            <html>
            <head><title>Erro</title></head>
            <body style="background:#000;color:#ff3300;text-align:center;padding-top:100px;font-family:Arial;">
                <h1>‚ùå Erro ao verificar permiss√µes</h1>
                <p>Status: {member_response.status_code}</p>
                <p>Tente novamente ou contacte um administrador.</p>
                <a href="/login" style="color:#ff6600;">‚Üê Voltar</a>
            </body>
            </html>
            """
        
        member_data = member_response.json()
        user_roles = member_data.get('roles', [])
        print(f"‚úÖ [LOGIN] Cargos carregados: {user_roles}")
        
        print(f"üîê [LOGIN] Cargos do usu√°rio: {user_roles}")
        print(f"üîê [LOGIN] Cargos permitidos: {ALLOWED_ROLE_IDS}")
        
        # Verificar se tem algum cargo permitido (Founder, Sub-Dono ou Administrador)
        has_permission = False
        role_encontrado = None
        
        for role_id in user_roles:
            if role_id in ALLOWED_ROLE_IDS:
                has_permission = True
                # Descobrir qual cargo
                if role_id == '1365636960651051069':
                    role_encontrado = 'Founder'
                elif role_id == '1365636456386789437':
                    role_encontrado = 'Sub-Dono'
                elif role_id == '1365633918593794079':
                    role_encontrado = 'Administrador'
                break
        
        if not has_permission:
            print(f"‚ùå [LOGIN] Usu√°rio N√ÉO tem cargo permitido (Founder/Sub-Dono/Administrador)")
            return """
            <html>
            <head><title>Acesso Negado</title><link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@700&display=swap" rel="stylesheet"></head>
            <body style="background:#000;color:#ff3300;text-align:center;padding-top:100px;font-family:Orbitron,sans-serif;">
                <h1 style="font-size:48px;text-shadow:0 0 20px #ff0000;">‚ùå ACESSO NEGADO</h1>
                <p style="color:#ff6666;font-size:18px;">Voc√™ precisa ter cargo de <strong>Founder</strong>, <strong>Sub-Dono</strong> ou <strong>Administrador</strong>.</p>
                <a href="/login" style="color:#ff6600;font-size:16px;text-decoration:none;">‚Üê Voltar ao Login</a>
            </body>
            </html>
            """
        
        print(f"‚úÖ [LOGIN] Usu√°rio autorizado com cargo: {role_encontrado}")
        
        # Salvar na sess√£o (com access_token para verifica√ß√£o cont√≠nua)
        session['access_token'] = access_token
        session['user'] = {
            'id': user_data['id'],
            'username': user_data['username'],
            'avatar': f"https://cdn.discordapp.com/avatars/{user_data['id']}/{user_data['avatar']}.png" if user_data.get('avatar') else None
        }
        
        return redirect(url_for('dashboard'))
    
    except Exception as e:
        print(f"‚ùå [LOGIN] Erro: {e}")
        return f"<html><body style='background:#000;color:#ff3300;text-align:center;padding:50px;font-family:Orbitron;'><h1>‚ùå Erro no login</h1><p>{str(e)}</p><a href='/login' style='color:#ff6600;'>‚Üê Voltar</a></body></html>", 500

@app.route('/logout')
def logout():
    """Fazer logout"""
    session.clear()
    return redirect(url_for('login_page'))

# CARREGAMENTO DE CONFIGURA√á√ïES
@app.route('/health')
def health():
    return {"status": "online", "bot": "CAOSBot", "lavalink": "active"}
    """Endpoint para testar conex√£o dashboard ‚Üí bot"""
    try:
        data = request.get_json()
        channel_id = data.get('channel_id')
        message = data.get('message', 'üß™ TESTE DE CONEX√ÉO DASHBOARD ‚Üí BOT')
        
        print(f"üß™ [TEST] Recebida requisi√ß√£o de teste para canal {channel_id}")
        
        # Agendar envio de mensagem
        async def send_test():
            try:
                channel = bot.get_channel(int(channel_id))
                if channel:
                    await channel.send(f"‚úÖ {message}\n‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}")
                    print(f"‚úÖ [TEST] Mensagem enviada para {channel.name}")
                    return True
                else:
                    print(f"‚ùå [TEST] Canal {channel_id} n√£o encontrado")
                    return False
            except Exception as e:
                print(f"‚ùå [TEST] Erro ao enviar: {e}")
                return False
        
        # Executar de forma ass√≠ncrona
        future = asyncio.run_coroutine_threadsafe(send_test(), bot.loop)
        result = future.result(timeout=10)
        
        if result:
            return jsonify({"success": True, "message": "Mensagem enviada com sucesso!"})
        else:
            return jsonify({"success": False, "message": "Canal n√£o encontrado"}), 404
            
    except Exception as e:
        print(f"‚ùå [TEST] Erro cr√≠tico: {e}")
        return jsonify({"success": False, "message": str(e)}), 500

# ========================================
# ROTAS DO DASHBOARD WEB
# ========================================

@app.route('/dashboard')
@login_required
def dashboard():
    """P√°gina principal do dashboard"""
    try:
        config = load_config_dashboard()
        
        # HTML embutido (n√£o precisa de templates/)
        html = f"""
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CAOS Hub - Dashboard</title>
    <link rel="icon" href="https://i.ibb.co/Fq5Lgzs5/Chat-GPT-Image-7-de-out-de-2025-00-25-49.png" type="image/png">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; font-family: 'Orbitron', 'Rajdhani', sans-serif; }}
        
        /* Anima√ß√£o de fogo no fundo */
        @keyframes fireGlow {{
            0%, 100% {{ background-position: 0% 50%; }}
            50% {{ background-position: 100% 50%; }}
        }}
        
        @keyframes fireFloat {{
            0% {{ transform: translateY(100vh) scale(0); opacity: 0; }}
            10% {{ opacity: 1; }}
            90% {{ opacity: 1; }}
            100% {{ transform: translateY(-100vh) scale(1.5); opacity: 0; }}
        }}
        
        @keyframes fireFlicker {{
            0%, 100% {{ opacity: 0.6; }}
            50% {{ opacity: 1; }}
        }}
        
        body {{ 
            font-family: 'Inter', 'Roboto', sans-serif; 
            background: linear-gradient(135deg, #000000 0%, #1a0000 25%, #330000 50%, #1a0000 75%, #000000 100%);
            background-size: 400% 400%;
            animation: fireGlow 20s ease infinite;
            min-height: 100vh; 
            color: #fff; 
            overflow-y: auto;
            position: relative;
        }}
        
        /* Part√≠culas de fogo animadas */
        body::before {{
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 10% 90%, rgba(255, 50, 0, 0.15) 0%, transparent 30%),
                radial-gradient(circle at 90% 10%, rgba(255, 100, 0, 0.12) 0%, transparent 35%),
                radial-gradient(circle at 50% 50%, rgba(255, 150, 0, 0.08) 0%, transparent 40%),
                radial-gradient(circle at 30% 20%, rgba(255, 200, 0, 0.06) 0%, transparent 25%);
            animation: fireFlicker 3s ease-in-out infinite;
            pointer-events: none;
            z-index: 0;
        }}
        
        body::after {{
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle 150px at 15% 80%, rgba(255, 100, 0, 0.2) 0%, transparent 100%),
                radial-gradient(circle 200px at 85% 20%, rgba(255, 150, 0, 0.15) 0%, transparent 100%),
                radial-gradient(circle 100px at 50% 60%, rgba(255, 200, 0, 0.1) 0%, transparent 100%);
            animation: fireFloat 25s linear infinite;
            pointer-events: none;
            z-index: 0;
        }}
        
        /* Camada extra de part√≠culas */
        .fire-particles {{
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow-y: auto;
            pointer-events: none;
            z-index: 0;
        }}
        
        .particle {{
            position: absolute;
            bottom: -50px;
            width: 5px;
            height: 5px;
            background: radial-gradient(circle, #ffcc00, #ff6600, transparent);
            border-radius: 50%;
            opacity: 0;
            animation: rise 15s linear infinite;
            box-shadow: 0 0 10px #ff6600, 0 0 20px #ff3300;
        }}
        
        /* Part√≠culas vermelhas */
        .particle:nth-child(3n) {{
            background: radial-gradient(circle, #ff3300, #cc0000, transparent);
            box-shadow: 0 0 10px #ff3300, 0 0 20px #ff0000;
        }}
        
        /* Part√≠culas amarelas */
        .particle:nth-child(5n) {{
            background: radial-gradient(circle, #ffff00, #ffcc00, transparent);
            box-shadow: 0 0 15px #ffcc00, 0 0 25px #ffaa00;
        }}
        
        /* Estrelas (forma diferente) */
        .particle:nth-child(7n) {{
            width: 8px;
            height: 8px;
            background: linear-gradient(45deg, transparent 40%, #fff 40%, #fff 60%, transparent 60%),
                        linear-gradient(-45deg, transparent 40%, #fff 40%, #fff 60%, transparent 60%);
            border-radius: 0;
            box-shadow: 0 0 15px #fff, 0 0 30px #ffcc00;
        }}
        
        /* Part√≠culas maiores */
        .particle:nth-child(11n) {{
            width: 8px;
            height: 8px;
        }}
        
        @keyframes rise {{
            0% {{ transform: translateY(0) translateX(0) scale(0.5); opacity: 0; }}
            10% {{ opacity: 0.8; }}
            50% {{ opacity: 1; }}
            90% {{ opacity: 0.5; }}
            100% {{ transform: translateY(-100vh) translateX(var(--drift)) scale(1.5); opacity: 0; }}
        }}
        
        .particle:nth-child(1) {{ left: 10%; animation-delay: 0s; animation-duration: 12s; --drift: 30px; }}
        .particle:nth-child(2) {{ left: 20%; animation-delay: 2s; animation-duration: 15s; --drift: -20px; }}
        .particle:nth-child(3) {{ left: 30%; animation-delay: 4s; animation-duration: 13s; --drift: 40px; }}
        .particle:nth-child(4) {{ left: 40%; animation-delay: 1s; animation-duration: 14s; --drift: -30px; }}
        .particle:nth-child(5) {{ left: 50%; animation-delay: 3s; animation-duration: 16s; --drift: 25px; }}
        .particle:nth-child(6) {{ left: 60%; animation-delay: 5s; animation-duration: 12s; --drift: -40px; }}
        .particle:nth-child(7) {{ left: 70%; animation-delay: 2.5s; animation-duration: 15s; --drift: 35px; }}
        .particle:nth-child(8) {{ left: 80%; animation-delay: 4.5s; animation-duration: 13s; --drift: -25px; }}
        .particle:nth-child(9) {{ left: 90%; animation-delay: 1.5s; animation-duration: 14s; --drift: 20px; }}
        .particle:nth-child(10) {{ left: 15%; animation-delay: 6s; animation-duration: 17s; --drift: -35px; }}
        .particle:nth-child(11) {{ left: 25%; animation-delay: 3.5s; animation-duration: 11s; --drift: 45px; }}
        .particle:nth-child(12) {{ left: 35%; animation-delay: 5.5s; animation-duration: 16s; --drift: -15px; }}
        .particle:nth-child(13) {{ left: 45%; animation-delay: 0.5s; animation-duration: 13s; --drift: 30px; }}
        .particle:nth-child(14) {{ left: 55%; animation-delay: 4.2s; animation-duration: 15s; --drift: -40px; }}
        .particle:nth-child(15) {{ left: 65%; animation-delay: 2.8s; animation-duration: 12s; --drift: 50px; }}
        .particle:nth-child(16) {{ left: 75%; animation-delay: 6.5s; animation-duration: 14s; --drift: -20px; }}
        .particle:nth-child(17) {{ left: 85%; animation-delay: 1.2s; animation-duration: 16s; --drift: 35px; }}
        .particle:nth-child(18) {{ left: 95%; animation-delay: 3.8s; animation-duration: 13s; --drift: -45px; }}
        .particle:nth-child(19) {{ left: 5%; animation-delay: 5.2s; animation-duration: 15s; --drift: 25px; }}
        .particle:nth-child(20) {{ left: 12%; animation-delay: 0.8s; animation-duration: 17s; --drift: -30px; }}
        .particle:nth-child(21) {{ left: 18%; animation-delay: 7s; animation-duration: 14s; --drift: 35px; }}
        .particle:nth-child(22) {{ left: 28%; animation-delay: 1.8s; animation-duration: 16s; --drift: -25px; }}
        .particle:nth-child(23) {{ left: 38%; animation-delay: 4.8s; animation-duration: 12s; --drift: 40px; }}
        .particle:nth-child(24) {{ left: 48%; animation-delay: 2.2s; animation-duration: 15s; --drift: -35px; }}
        .particle:nth-child(25) {{ left: 58%; animation-delay: 6.2s; animation-duration: 13s; --drift: 30px; }}
        .particle:nth-child(26) {{ left: 68%; animation-delay: 3.2s; animation-duration: 17s; --drift: -40px; }}
        .particle:nth-child(27) {{ left: 78%; animation-delay: 5.8s; animation-duration: 11s; --drift: 45px; }}
        .particle:nth-child(28) {{ left: 88%; animation-delay: 0.3s; animation-duration: 14s; --drift: -20px; }}
        .particle:nth-child(29) {{ left: 8%; animation-delay: 4.3s; animation-duration: 16s; --drift: 35px; }}
        .particle:nth-child(30) {{ left: 22%; animation-delay: 7.3s; animation-duration: 13s; --drift: -30px; }}
        .particle:nth-child(31) {{ left: 32%; animation-delay: 2.7s; animation-duration: 15s; --drift: 40px; }}
        .particle:nth-child(32) {{ left: 42%; animation-delay: 5.3s; animation-duration: 12s; --drift: -25px; }}
        .particle:nth-child(33) {{ left: 52%; animation-delay: 1.3s; animation-duration: 17s; --drift: 30px; }}
        .particle:nth-child(34) {{ left: 62%; animation-delay: 6.7s; animation-duration: 14s; --drift: -35px; }}
        .particle:nth-child(35) {{ left: 72%; animation-delay: 3.7s; animation-duration: 11s; --drift: 45px; }}
        .particle:nth-child(36) {{ left: 82%; animation-delay: 0.7s; animation-duration: 16s; --drift: -40px; }}
        .particle:nth-child(37) {{ left: 92%; animation-delay: 4.7s; animation-duration: 13s; --drift: 35px; }}
        .particle:nth-child(38) {{ left: 6%; animation-delay: 2.3s; animation-duration: 15s; --drift: -30px; }}
        .particle:nth-child(39) {{ left: 16%; animation-delay: 5.7s; animation-duration: 12s; --drift: 40px; }}
        .particle:nth-child(40) {{ left: 26%; animation-delay: 1.7s; animation-duration: 17s; --drift: -25px; }}
        .particle:nth-child(41) {{ left: 36%; animation-delay: 6.3s; animation-duration: 14s; --drift: 35px; }}
        .particle:nth-child(42) {{ left: 46%; animation-delay: 3.3s; animation-duration: 11s; --drift: -40px; }}
        .particle:nth-child(43) {{ left: 56%; animation-delay: 7.7s; animation-duration: 16s; --drift: 45px; }}
        .particle:nth-child(44) {{ left: 66%; animation-delay: 0.4s; animation-duration: 13s; --drift: -35px; }}
        .particle:nth-child(45) {{ left: 76%; animation-delay: 4.4s; animation-duration: 15s; --drift: 30px; }}
        .particle:nth-child(46) {{ left: 86%; animation-delay: 2.4s; animation-duration: 12s; --drift: -25px; }}
        .particle:nth-child(47) {{ left: 96%; animation-delay: 5.4s; animation-duration: 17s; --drift: 40px; }}
        .particle:nth-child(48) {{ left: 11%; animation-delay: 1.4s; animation-duration: 14s; --drift: -30px; }}
        .particle:nth-child(49) {{ left: 21%; animation-delay: 6.4s; animation-duration: 11s; --drift: 35px; }}
        .particle:nth-child(50) {{ left: 31%; animation-delay: 3.4s; animation-duration: 16s; --drift: -45px; }}
        .sidebar {{ 
            position: fixed; 
            left: 0; 
            top: 0; 
            width: 280px; 
            height: 100vh; 
            background: linear-gradient(180deg, #000000 0%, #1a0000 100%); 
            backdrop-filter: blur(10px); 
            border-right: 3px solid #ff3300; 
            padding: 32px 24px; 
            z-index: 10; 
            box-shadow: 5px 0 30px rgba(255, 50, 0, 0.3);
            overflow-y: auto;
        }}
        
        @keyframes hueShift {{
            0% {{ filter: blur(2px) hue-rotate(0deg); }}
            50% {{ filter: blur(2px) hue-rotate(30deg); }}
            100% {{ filter: blur(2px) hue-rotate(0deg); }}
        }}
        
        @keyframes pulse {{
            0%, 100% {{ opacity: 1; transform: scale(1); }}
            50% {{ opacity: 0.5; transform: scale(1.2); }}
        }}
        
        .sidebar::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExZm9oNzBoaDFrbzh5OTZiMXZ0eTF0Zms0bWE5Z3pveXQ5NGJuNWY4eCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/L6VKg3ruTIfFFiKWpw/giphy.gif') center/cover;
            opacity: 0.2;
            z-index: -1;
            pointer-events: none;
            animation: hueShift 8s ease-in-out infinite;
        }}
        
        .sidebar-logo {{ display: flex; align-items: center; justify-content: center; margin-bottom: 40px; position: relative; z-index: 1; }}
        .sidebar-logo img {{ width: 180px; height: auto; filter: drop-shadow(0 0 20px rgba(255, 100, 0, 0.8)); }}
        .sidebar-nav {{ list-style: none; }}
        .sidebar-nav li {{ margin-bottom: 12px; }}
        .sidebar-nav a {{ display: flex; align-items: center; padding: 14px 18px; color: #ffaa66; text-decoration: none; border-radius: 0; border-left: 4px solid transparent; transition: all 0.3s; font-weight: 600; letter-spacing: 0.5px; }}
        .sidebar-nav a:hover {{ background: rgba(255, 100, 0, 0.15); color: #ffcc00; border-left-color: #ff6600; box-shadow: inset 0 0 10px rgba(255, 100, 0, 0.2); }}
        .sidebar-nav a.active {{ background: rgba(255, 50, 0, 0.25); color: #ffffff; border-left-color: #ff3300; box-shadow: inset 0 0 15px rgba(255, 50, 0, 0.3); }}
        .main {{ margin-left: 280px; padding: 32px; position: relative; z-index: 1; }}
        .header {{ background: linear-gradient(135deg, rgba(255, 50, 0, 0.15) 0%, rgba(255, 100, 0, 0.1) 100%); backdrop-filter: blur(10px); border: 2px solid #ff6600; border-radius: 0; padding: 32px; margin-bottom: 32px; box-shadow: 0 8px 32px rgba(255, 50, 0, 0.4); display: flex; justify-content: space-between; align-items: center; }}
        .header-left h1 {{ font-size: 32px; font-weight: 800; margin-bottom: 8px; text-shadow: 0 0 10px rgba(255, 100, 0, 0.5), 0 0 20px rgba(255, 50, 0, 0.3); color: #ffcc00; }}
        .header-left p {{ color: #ffaa66; font-size: 16px; }}
        .user-profile {{ display: flex; align-items: center; gap: 16px; }}
        .user-avatar {{ width: 48px; height: 48px; border-radius: 50%; border: 2px solid #ff6600; box-shadow: 0 0 10px rgba(255, 100, 0, 0.5); }}
        .user-info {{ text-align: right; }}
        .user-name {{ font-size: 16px; font-weight: 700; color: #ffcc00; text-shadow: 0 0 5px rgba(255, 200, 0, 0.4); }}
        .user-role {{ font-size: 13px; color: #ffaa66; margin-top: 4px; }}
        .btn-logout {{ padding: 8px 16px; background: linear-gradient(135deg, #cc0000, #990000); color: white; border: 2px solid #cc0000; border-radius: 0; font-size: 13px; font-weight: 600; cursor: pointer; transition: all 0.3s; box-shadow: 0 4px 12px rgba(200, 0, 0, 0.4); }}
        .btn-logout:hover {{ background: linear-gradient(135deg, #990000, #660000); box-shadow: 0 6px 16px rgba(200, 0, 0, 0.6); transform: translateY(-2px); }}
        .grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 24px; }}
        .card {{ background: linear-gradient(135deg, rgba(0, 0, 0, 0.6) 0%, rgba(50, 0, 0, 0.4) 100%); backdrop-filter: blur(10px); border: 2px solid #ff6600; border-radius: 0; padding: 24px; transition: all 0.3s; box-shadow: 0 4px 16px rgba(255, 50, 0, 0.3); }}
        .card:hover {{ border-color: #ff3300; transform: translateY(-4px); box-shadow: 0 8px 24px rgba(255, 100, 0, 0.5), 0 0 30px rgba(255, 50, 0, 0.3); }}
        .card-header {{ display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }}
        .card-header h2 {{ font-size: 18px; font-weight: 700; color: #ffcc00; text-shadow: 0 0 5px rgba(255, 200, 0, 0.4); }}
        .toggle {{ position: relative; width: 48px; height: 24px; }}
        .toggle input {{ opacity: 0; width: 0; height: 0; }}
        .toggle label {{ position: absolute; cursor: pointer; inset: 0; background: #330000; transition: 0.3s; border-radius: 0; border: 1px solid #ff6600; }}
        .toggle label:before {{ content: ""; position: absolute; height: 18px; width: 18px; left: 3px; bottom: 3px; background: linear-gradient(135deg, #ff6600, #ffcc00); transition: 0.3s; border-radius: 0; box-shadow: 0 0 5px rgba(255, 200, 0, 0.5); }}
        .toggle input:checked + label {{ background: linear-gradient(135deg, #ff3300, #ff6600); box-shadow: 0 0 10px rgba(255, 50, 0, 0.6); }}
        .toggle input:checked + label:before {{ transform: translateX(24px); background: linear-gradient(135deg, #ffcc00, #ffffff); }}
        .status {{ display: inline-block; padding: 4px 12px; border-radius: 0; font-size: 12px; font-weight: 600; border: 1px solid; }}
        .status-on {{ background: rgba(255, 200, 0, 0.15); color: #ffcc00; border-color: #ffaa00; text-shadow: 0 0 5px rgba(255, 200, 0, 0.4); }}
        .status-off {{ background: rgba(100, 0, 0, 0.3); color: #ff6666; border-color: #ff3300; }}
        .btn {{ padding: 12px 24px; border: 2px solid; border-radius: 0; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s; letter-spacing: 0.5px; }}
        .btn-primary {{ background: linear-gradient(135deg, #ff6600, #ff3300); color: white; border-color: #ff3300; box-shadow: 0 4px 15px rgba(255, 50, 0, 0.4); }}
        .btn-primary:hover {{ background: linear-gradient(135deg, #ff3300, #cc0000); box-shadow: 0 6px 20px rgba(255, 50, 0, 0.6), 0 0 20px rgba(255, 100, 0, 0.4); transform: translateY(-2px); }}
        .btn-danger {{ background: linear-gradient(135deg, #cc0000, #990000); color: white; border-color: #cc0000; box-shadow: 0 4px 15px rgba(200, 0, 0, 0.4); }}
        .btn-danger:hover {{ background: linear-gradient(135deg, #990000, #660000); box-shadow: 0 6px 20px rgba(200, 0, 0, 0.6); transform: translateY(-2px); }}
        .section {{ margin-bottom: 32px; }}
        .section-title {{ font-size: 20px; font-weight: 700; margin-bottom: 16px; color: #ffcc00; text-shadow: 0 0 8px rgba(255, 200, 0, 0.4); }}
        .page {{ display: none; }}
        .page.active {{ display: block; }}
        .form-group {{ margin-bottom: 16px; }}
        .form-label {{ display: block; margin-bottom: 8px; font-size: 14px; font-weight: 600; color: #ffaa66; }}
        .form-input, .form-select, .form-textarea {{ width: 100%; padding: 10px 14px; background: rgba(0, 0, 0, 0.5); border: 2px solid #ff6600; border-radius: 0; color: #ffcc00; font-family: 'Inter', 'Roboto', sans-serif; font-size: 14px; transition: all 0.3s; }}
        .form-input:focus, .form-select:focus, .form-textarea:focus {{ outline: none; border-color: #ff3300; box-shadow: 0 0 10px rgba(255, 50, 0, 0.4), inset 0 0 5px rgba(255, 100, 0, 0.2); background: rgba(20, 0, 0, 0.6); }}
        .form-textarea {{ resize: vertical; min-height: 100px; }}
        .toast {{ position: fixed; top: 24px; right: 24px; background: linear-gradient(135deg, rgba(0, 0, 0, 0.9), rgba(50, 0, 0, 0.9)); border: 2px solid #ff6600; border-radius: 0; padding: 16px; min-width: 300px; opacity: 0; transform: translateX(400px); transition: all 0.3s; z-index: 1000; box-shadow: 0 8px 32px rgba(255, 50, 0, 0.5), 0 0 20px rgba(255, 100, 0, 0.3); }}
        .toast.show {{ opacity: 1; transform: translateX(0); }}
        .toast-success {{ border-color: #ffcc00; box-shadow: 0 8px 32px rgba(255, 200, 0, 0.5), 0 0 20px rgba(255, 200, 0, 0.3); }}
        .toast-error {{ border-color: #ff3300; box-shadow: 0 8px 32px rgba(255, 50, 0, 0.6), 0 0 20px rgba(255, 0, 0, 0.4); }}
    </style>
</head>
<body>
    <!-- Part√≠culas de fogo animadas (50 part√≠culas variadas) -->
    <div class="fire-particles">
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
    </div>
    
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-logo">
            <img src="https://i.ibb.co/Fq5Lgzs5/Chat-GPT-Image-7-de-out-de-2025-00-25-49.png" alt="CAOS Hub">
        </div>
        <ul class="sidebar-nav">
            <li><a href="#" class="active" onclick="showPage('dashboard')">üìä Dashboard</a></li>
            <li><a href="#" onclick="showPage('tickets')">üé´ Tickets</a></li>
            <li><a href="#" onclick="showPage('embeds')">üìã Embeds</a></li>
            <li><a href="#" onclick="showPage('stats')">üìà Estat√≠sticas</a></li>
        </ul>
    </div>
    
    <!-- Main Content -->
    <div class="main">
        <!-- Header -->
        <div class="header">
            <div class="header-left">
                <h1>Painel de Controle</h1>
                <p>Gerencie seu bot Discord de forma profissional</p>
            </div>
            <div class="user-profile">
                <div class="user-info">
                    <div class="user-name" id="user-display-name">Carregando...</div>
                    <div class="user-role" id="user-display-role">‚Ä¢‚Ä¢‚Ä¢</div>
                </div>
                <img src="" alt="Avatar" class="user-avatar" id="user-avatar">
                <button class="btn-logout" onclick="window.location.href='/logout'">üö™ Sair</button>
            </div>
        </div>
        
        <!-- Dashboard Page -->
        <div id="dashboard-page" class="page active">
            <div class="section">
                <h2 class="section-title">Configura√ß√µes do Servidor</h2>
                <div class="grid">
                    <div class="card">
                        <div class="card-header">
                            <h2>üëã Boas-vindas</h2>
                            <div class="toggle">
                                <input type="checkbox" id="welcome_enabled" {"checked" if config.get('welcome_enabled') else ""}>
                                <label for="welcome_enabled"></label>
                            </div>
                        </div>
                        <span id="welcome-status" class="status {'status-on' if config.get('welcome_enabled') else 'status-off'}">
                            {'Ativado' if config.get('welcome_enabled') else 'Desativado'}
                        </span>
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <h2>üëã Sa√≠da/Ban</h2>
                            <div class="toggle">
                                <input type="checkbox" id="goodbye_enabled" {"checked" if config.get('goodbye_enabled') else ""}>
                                <label for="goodbye_enabled"></label>
                            </div>
                        </div>
                        <span id="goodbye-status" class="status {'status-on' if config.get('goodbye_enabled') else 'status-off'}">
                            {'Ativado' if config.get('goodbye_enabled') else 'Desativado'}
                        </span>
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <h2>üé≠ Autorole</h2>
                            <div class="toggle">
                                <input type="checkbox" id="autorole_enabled" {"checked" if config.get('autorole_enabled') else ""}>
                                <label for="autorole_enabled"></label>
                            </div>
                        </div>
                        <span id="autorole-status" class="status {'status-on' if config.get('autorole_enabled') else 'status-off'}">
                            {'Ativado' if config.get('autorole_enabled') else 'Desativado'}
                        </span>
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <h2>üé´ Tickets</h2>
                            <div class="toggle">
                                <input type="checkbox" id="tickets_enabled" {"checked" if config.get('tickets_enabled') else ""}>
                                <label for="tickets_enabled"></label>
                            </div>
                        </div>
                        <span id="tickets-status" class="status {'status-on' if config.get('tickets_enabled') else 'status-off'}">
                            {'Ativado' if config.get('tickets_enabled') else 'Desativado'}
                        </span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Tickets Page -->
        <div id="tickets-page" class="page">
            <div class="section">
                <h2 class="section-title">üé´ Configura√ß√£o Completa de Tickets</h2>
                
                <!-- Sub-tabs -->
                <div style="display: flex; gap: 8px; margin-bottom: 20px; flex-wrap: wrap;">
                    <button class="btn btn-primary" style="padding: 8px 16px; font-size: 13px;" onclick="showTicketTab('basico')">‚öôÔ∏è B√°sico</button>
                    <button class="btn" style="padding: 8px 16px; font-size: 13px; background: rgba(255,255,255,0.1);" onclick="showTicketTab('painel')">üé® Painel</button>
                    <button class="btn" style="padding: 8px 16px; font-size: 13px; background: rgba(255,255,255,0.1);" onclick="showTicketTab('categorias')">üìã Categorias</button>
                    <button class="btn" style="padding: 8px 16px; font-size: 13px; background: rgba(255,255,255,0.1);" onclick="showTicketTab('prioridades')">‚ö° Prioridades</button>
                    <button class="btn" style="padding: 8px 16px; font-size: 13px; background: rgba(255,255,255,0.1);" onclick="showTicketTab('mensagens')">üí¨ Mensagens</button>
                    <button class="btn" style="padding: 8px 16px; font-size: 13px; background: rgba(255,255,255,0.1);" onclick="showTicketTab('campos')">üìù Campos</button>
                    <button class="btn" style="padding: 8px 16px; font-size: 13px; background: rgba(255,255,255,0.1);" onclick="showTicketTab('avancado')">üîß Avan√ßado</button>
                    <button class="btn" style="padding: 8px 16px; font-size: 13px; background: rgba(255,255,255,0.1);" onclick="showTicketTab('logs')">üìä Logs</button>
                </div>
                
                <!-- Aba B√°sico -->
                <div id="ticket-tab-basico" class="ticket-tab">
                    <div class="card">
                        <h3 style="margin-bottom: 20px;">‚öôÔ∏è Configura√ß√£o B√°sica + Enviar Painel</h3>
                        
                        <div class="form-group">
                            <label class="form-label">üìÅ 1. Categoria Destino (onde criar tickets)</label>
                            <select id="ticket-category" class="form-select" onchange="loadChannelsByCategory()">
                                <option value="">Carregando categorias...</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üì£ 2. Canal para Enviar Painel</label>
                            <select id="ticket-channel" class="form-select" disabled>
                                <option value="">Selecione uma categoria primeiro</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üì¢ 3. Canal de Logs (ticket-logs)</label>
                            <select id="ticket-log-channel" class="form-select">
                                <option value="">Carregando canais...</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üë• 4. Cargos da Staff (quem v√™ tickets)</label>
                            <div id="ticket-staff-roles" style="display: grid; gap: 8px; padding: 12px; background: rgba(255,255,255,0.05); border-radius: 8px; max-height: 200px; overflow-y: auto;">
                                <div style="color: #9ca3af;">Carregando cargos...</div>
                            </div>
                            <small style="color: #9ca3af; margin-top: 5px; display: block;">‚úÖ Selecione os cargos que poder√£o ver os tickets</small>
                        </div>
                        
                        <hr style="border: 1px solid rgba(255,255,255,0.1); margin: 20px 0;">
                        
                        <div class="form-group">
                            <label class="form-label">‚úèÔ∏è T√≠tulo do Painel</label>
                            <input type="text" id="ticket-title" class="form-input" value="üé´ SISTEMA DE TICKETS">
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üìù Descri√ß√£o</label>
                            <textarea id="ticket-description" class="form-textarea">Clique no bot√£o abaixo para abrir um ticket e falar com a equipe!</textarea>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üé® Cor do Embed</label>
                            <input type="color" id="ticket-color-picker" value="#5865F2" style="width: 60px; height: 40px;">
                        </div>
                        
                        <button class="btn btn-primary" onclick="sendTicketPanel(event)" style="width: 100%; padding: 15px; font-size: 16px; margin-top: 10px;">üöÄ Enviar Painel Agora</button>
                    </div>
                </div>
                
                <!-- Aba Painel -->
                <div id="ticket-tab-painel" class="ticket-tab" style="display:none;">
                    <div class="card">
                        <h3 style="margin-bottom: 20px;">üé® Personaliza√ß√£o Avan√ßada</h3>
                        <p style="color: #9ca3af;">Configura√ß√µes b√°sicas de envio est√£o na aba "B√°sico"</p>
                        <p style="color: #9ca3af;">Esta aba est√° reservada para customiza√ß√µes futuras.</p>
                    </div>
                </div>
                
                <!-- Aba Categorias -->
                <div id="ticket-tab-categorias" class="ticket-tab" style="display:none;">
                    <div class="card">
                        <h3 style="margin-bottom: 20px;">üìã Categorias Dispon√≠veis</h3>
                        <p style="color: #9ca3af; margin-bottom: 15px;">Ative/desative categorias (aparecem no dropdown)</p>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                            <label style="display: flex; align-items: center; gap: 8px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px; cursor: pointer;">
                                <input type="checkbox" checked> üìÅ Geral
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px; cursor: pointer;">
                                <input type="checkbox" checked> üõí Compras
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px; cursor: pointer;">
                                <input type="checkbox" checked> üîß Suporte T√©cnico
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px; cursor: pointer;">
                                <input type="checkbox" checked> üö® Den√∫ncia
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px; cursor: pointer;">
                                <input type="checkbox" checked> ü§ù Parceria
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px; cursor: pointer;">
                                <input type="checkbox" checked> üéâ Sorteios
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px; cursor: pointer;">
                                <input type="checkbox" checked> üí∞ Financeiro
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px; cursor: pointer;">
                                <input type="checkbox" checked> üõ°Ô∏è Modera√ß√£o
                            </label>
                            <label style="display: flex; align-items: center; gap: 8px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px; cursor: pointer;">
                                <input type="checkbox" checked> üêõ Bug
                            </label>
                        </div>
                    </div>
                </div>
                
                <!-- Aba Prioridades -->
                <div id="ticket-tab-prioridades" class="ticket-tab" style="display:none;">
                    <div class="card">
                        <h3 style="margin-bottom: 20px;">‚ö° Sistema de Prioridades</h3>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 15px;">
                            <input type="checkbox" checked> Ativar sistema de prioridades
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 15px;">
                            <input type="checkbox" checked> Usar cores baseadas na prioridade
                        </label>
                        <div style="display: grid; gap: 10px; margin-top: 20px;">
                            <div style="padding: 10px; background: rgba(0,255,0,0.1); border-radius: 8px;">üü¢ Baixa - N√£o √© urgente</div>
                            <div style="padding: 10px; background: rgba(255,255,0,0.1); border-radius: 8px;">üü° M√©dia - Prioridade normal</div>
                            <div style="padding: 10px; background: rgba(255,136,0,0.1); border-radius: 8px;">üü† Alta - Precisa de aten√ß√£o</div>
                            <div style="padding: 10px; background: rgba(255,0,0,0.1); border-radius: 8px;">üî¥ Urgente - Muito urgente!</div>
                        </div>
                    </div>
                </div>
                
                <!-- Aba Mensagens -->
                <div id="ticket-tab-mensagens" class="ticket-tab" style="display:none;">
                    <div class="card">
                        <h3 style="margin-bottom: 20px;">üí¨ Mensagens Customiz√°veis</h3>
                        <div class="form-group">
                            <label class="form-label">üëã Mensagem de Boas-vindas</label>
                            <textarea class="form-textarea">Ol√°! Obrigado por abrir um ticket. Nossa equipe responder√° em breve.</textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">üìù Mensagem no Embed</label>
                            <textarea class="form-textarea">Nossa equipe responder√° o mais breve poss√≠vel!</textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">üîí Mensagem ao Fechar</label>
                            <input type="text" class="form-input" value="üîí Fechando ticket em 3 segundos...">
                        </div>
                    </div>
                </div>
                
                <!-- Aba Campos -->
                <div id="ticket-tab-campos" class="ticket-tab" style="display:none;">
                    <div class="card">
                        <h3 style="margin-bottom: 20px;">üìù Campos do Modal</h3>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked disabled> üìÑ Assunto (obrigat√≥rio)
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked disabled> üìù Descri√ß√£o (obrigat√≥rio)
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked> üåê Idioma
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked> ‚ÑπÔ∏è Informa√ß√µes Adicionais
                        </label>
                    </div>
                </div>
                
                <!-- Aba Avan√ßado -->
                <div id="ticket-tab-avancado" class="ticket-tab" style="display:none;">
                    <div class="card">
                        <h3 style="margin-bottom: 20px;">üîß Configura√ß√µes Avan√ßadas</h3>
                        <div class="form-group">
                            <label class="form-label">üî¢ Limite de tickets por usu√°rio</label>
                            <input type="number" class="form-input" value="1" min="1" max="10">
                        </div>
                        <div class="form-group">
                            <label class="form-label">‚è∞ Cooldown (minutos)</label>
                            <input type="number" class="form-input" value="0" min="0" max="60">
                        </div>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked> üìä Ativar transcri√ß√µes
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked> üìà Ativar estat√≠sticas
                        </label>
                    </div>
                </div>
                
                <!-- Aba Logs -->
                <div id="ticket-tab-logs" class="ticket-tab" style="display:none;">
                    <div class="card">
                        <h3 style="margin-bottom: 20px;">üìä Configura√ß√£o de Logs</h3>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked> üì¢ Ativar sistema de logs
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked> üìä Incluir estat√≠sticas
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked> üìÅ Anexar transcri√ß√£o (.txt)
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked> üë• Mostrar participantes
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                            <input type="checkbox" checked> ‚è±Ô∏è Mostrar dura√ß√£o
                        </label>
                    </div>
                </div>
                
                <div class="card" style="margin-top: 20px;">
                    <button class="btn btn-primary" style="width: 100%; padding: 15px;">üíæ Salvar Todas as Configura√ß√µes</button>
                </div>
            </div>
        </div>
        
        <!-- Embeds Page -->
        <div id="embeds-page" class="page">
            <div class="section">
                <h2 class="section-title">üìã Gerador de Embeds Visual</h2>
                
                <!-- Seletor de Template -->
                <div class="card" style="margin-bottom: 24px;">
                    <div class="card-header">
                        <h2>üé® Escolha um Template</h2>
                    </div>
                    <div class="form-group">
                        <select id="embed-template" class="form-select" onchange="loadEmbedTemplate()">
                            <option value="custom">‚úèÔ∏è Personalizado</option>
                            <option value="giveaway">üéâ Giveaway</option>
                            <option value="rules">üìú Regras</option>
                            <option value="announcement">üì¢ An√∫ncio</option>
                            <option value="info">üìù Informa√ß√µes</option>
                            <option value="warning">‚ö†Ô∏è Avisos</option>
                            <option value="success">‚úÖ Confirma√ß√£o</option>
                        </select>
                    </div>
                </div>
                
                <!-- Grid Editor + Preview -->
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px;">
                    
                    <!-- Editor -->
                    <div class="card">
                        <div class="card-header">
                            <h2>‚úèÔ∏è Editor</h2>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üìù T√≠tulo do Embed</label>
                            <input type="text" id="embed-title" class="form-input" placeholder="Digite o t√≠tulo" oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()">
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üìÑ Descri√ß√£o</label>
                            <textarea id="embed-description" class="form-textarea" rows="4" placeholder="Digite a descri√ß√£o (suporta markdown)" oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()"></textarea>
                        </div>
                        
                        <!-- Campos espec√≠ficos do Giveaway -->
                        <div id="giveaway-fields" style="display: none;">
                            <div class="form-group">
                                <label class="form-label">üéÅ Pr√™mio</label>
                                <input type="text" id="giveaway-prize" class="form-input" placeholder="Ex: Nitro Classic, R$50 Steam" oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()">
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">‚è∞ Dura√ß√£o do Sorteio</label>
                                <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 10px;">
                                    <input type="number" id="giveaway-duration" class="form-input" placeholder="Ex: 7" min="1" oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()">
                                    <select id="giveaway-time-unit" class="form-select" onchange="updateEmbedPreview()">
                                        <option value="m">Minutos</option>
                                        <option value="h">Horas</option>
                                        <option value="d" selected>Dias</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">üë• N√∫mero de Vencedores</label>
                                <input type="number" id="giveaway-winners" class="form-input" placeholder="1" value="1" min="1" oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()">
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">üéâ Emoji de Rea√ß√£o</label>
                                <input type="text" id="giveaway-emoji" class="form-input" placeholder="üéâ" value="üéâ" oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()">
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">üèÜ Mensagem do Vencedor</label>
                                <textarea id="giveaway-winner-message" class="form-textarea" rows="3" placeholder="Ex: Parab√©ns! Voc√™ ganhou {{{{prize}}}}! Abra um ticket para receber seu pr√™mio." oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()">üéä **Parab√©ns!** üéä

Voc√™ ganhou **{{{{prize}}}}**!

üìã Abra um ticket na categoria üéâ **Sorteios** para receber seu pr√™mio.</textarea>
                                <small style="color: #ffaa66; font-size: 12px;">Use {{{{prize}}}} para o nome do pr√™mio | {{{{winners}}}} para mencionar vencedores</small>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üé® Cor do Embed</label>
                            <div style="display: flex; gap: 10px; align-items: center;">
                                <input type="color" id="embed-color-picker" value="#ff6600" onchange="updateEmbedColor()" style="width: 60px; height: 40px; cursor: pointer; border: 2px solid #ff6600; background: transparent;">
                                <input type="text" id="embed-color" class="form-input" value="0xff6600" style="flex: 1;" readonly>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üñºÔ∏è URL da Imagem (opcional)</label>
                            <input type="text" id="embed-image" class="form-input" placeholder="https://exemplo.com/imagem.png" onkeyup="updateEmbedPreview()">
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üñºÔ∏è URL do Thumbnail (opcional)</label>
                            <input type="text" id="embed-thumbnail" class="form-input" placeholder="https://exemplo.com/thumb.png" onkeyup="updateEmbedPreview()">
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üë§ Autor (opcional)</label>
                            <input type="text" id="embed-author" class="form-input" placeholder="Nome do autor" onkeyup="updateEmbedPreview()">
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">üîó URL do Autor (opcional)</label>
                            <input type="text" id="embed-author-url" class="form-input" placeholder="https://exemplo.com" onkeyup="updateEmbedPreview()">
                        </div>
                        
                        <!-- Campos customiz√°veis -->
                        <div style="margin-top: 24px; padding-top: 24px; border-top: 2px solid #ff6600;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                                <label class="form-label" style="margin: 0;">üìã Campos (Fields)</label>
                                <button type="button" class="btn btn-primary" onclick="addEmbedField(); return false;" style="padding: 8px 16px; font-size: 13px;">+ Adicionar Campo</button>
                            </div>
                            <div id="embed-fields-container"></div>
                        </div>
                        
                        <div style="margin-top: 24px; padding-top: 24px; border-top: 2px solid #ff6600;">
                            <label class="form-label">üìå Footer (opcional)</label>
                            <input type="text" id="embed-footer" class="form-input" placeholder="Texto do footer" onkeyup="updateEmbedPreview()" style="margin-bottom: 10px;">
                            <input type="text" id="embed-footer-icon" class="form-input" placeholder="URL do √≠cone do footer" onkeyup="updateEmbedPreview()">
                        </div>
                        
                        <div class="form-group" style="margin-top: 24px;">
                            <label class="form-label">üïí Timestamp</label>
                            <label style="display: flex; align-items: center; gap: 10px; cursor: pointer;">
                                <input type="checkbox" id="embed-timestamp" onchange="updateEmbedPreview()">
                                <span style="color: #ffaa66;">Adicionar timestamp atual</span>
                            </label>
                        </div>
                        
                        <div class="form-group" style="margin-top: 24px;">
                            <label class="form-label">üí¨ Mensagem Fora do Embed (opcional)</label>
                            <textarea id="embed-extra-message" class="form-textarea" rows="2" placeholder="Ex: @everyone Novo sorteio!" oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()"></textarea>
                            <small style="color: #ffaa66; font-size: 12px;">Esta mensagem aparece ACIMA do embed (use para mencionar @everyone)</small>
                        </div>
                    </div>
                    
                    <!-- Preview -->
                    <div style="position: sticky; top: 20px;">
                        <div class="card">
                            <div class="card-header" style="display: flex; justify-content: space-between; align-items: center;">
                                <h2>üëÅÔ∏è Preview</h2>
                                <select id="preview-mode" class="form-select" onchange="updateEmbedPreview()" style="width: auto; padding: 8px; font-size: 13px;">
                                    <option value="giveaway">üéâ Sorteio</option>
                                    <option value="winner">üèÜ Vencedor</option>
                                </select>
                            </div>
                            <div id="embed-preview" style="background: #2b2d31; padding: 16px; border-radius: 4px; min-height: 300px; max-height: 600px; overflow-y: auto;">
                                <div style="color: #b9bbbe; text-align: center; padding: 40px 20px;">
                                    üìù Configure o embed ao lado para ver o preview aqui
                                </div>
                            </div>
                        </div>
                        
                        <!-- Enviar -->
                        <div class="card" style="margin-top: 24px;">
                            <div class="form-group">
                                <label class="form-label">üìÅ Categoria</label>
                                <select id="embed-category" class="form-select" onchange="loadEmbedChannelsByCategory()">
                                    <option value="">Carregando categorias...</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">üìç Canal de Destino</label>
                                <select id="embed-channel" class="form-select">
                                    <option value="">Selecione uma categoria primeiro...</option>
                                </select>
                            </div>
                            <button class="btn btn-primary" onclick="sendEmbed()" style="width: 100%; padding: 15px; font-size: 16px;">
                                üì§ Enviar Embed
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Stats Page -->
        <div id="stats-page" class="page">
            <div class="section">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
                    <h2 class="section-title" style="margin: 0;">üìà Estat√≠sticas do Servidor</h2>
                    <span style="color: #22c55e; font-size: 13px; display: flex; align-items: center; gap: 6px;">
                        <span style="width: 8px; height: 8px; background: #22c55e; border-radius: 50%; display: inline-block; animation: pulse 2s infinite;"></span>
                        üî¥ LIVE - Tempo Real
                    </span>
                </div>
                <div class="grid" id="stats-grid">
                    <div class="card"><h3>‚è≥ Carregando...</h3></div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>
    
    <!-- Notification Sound (som √©pico mais longo) -->
    <audio id="notif-sound" preload="auto">
        <source src="https://cdn.pixabay.com/download/audio/2022/03/10/audio_c8c6c7c579.mp3" type="audio/mpeg">
    <script>
        // Navega√ß√£o entre p√°ginas
        function showPage(page) {{
            document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
            document.querySelectorAll('.sidebar-nav a').forEach(a => a.classList.remove('active'));
            document.getElementById(page + '-page').classList.add('active');
            event.target.classList.add('active');
            
            if (page === 'tickets') {{
                loadCategories();
                // Fechar conex√£o SSE se estava ativa
                if (statsEventSource) {{
                    statsEventSource.close();
                    statsEventSource = null;
                }}
            }} else if (page === 'stats') {{
                loadStats(); // Inicia conex√£o em tempo real
            }} else {{
                // Fechar conex√£o SSE se mudou de p√°gina
                if (statsEventSource) {{
                    statsEventSource.close();
                    statsEventSource = null;
                }}
            }}
        }}
        
        // Navega√ß√£o entre abas de tickets
        function showTicketTab(tab) {{
            // Esconder todas as abas
            document.querySelectorAll('.ticket-tab').forEach(t => t.style.display = 'none');
            
            // Remover active de todos os bot√µes
            const buttons = document.querySelectorAll('#tickets-page .btn');
            buttons.forEach(b => b.style.background = 'rgba(255,255,255,0.1)');
            
            // Mostrar aba selecionada
            document.getElementById('ticket-tab-' + tab).style.display = 'block';
            
            // Marcar bot√£o como ativo
            event.target.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
        }}
        
        // Notifica√ß√£o com som
        function showToast(message, type = 'success') {{
            const toast = document.getElementById('toast');
            const sound = document.getElementById('notif-sound');
            toast.textContent = message;
            toast.className = `toast toast-${{type}} show`;
            sound.play().catch(() => {{}});
            setTimeout(() => toast.classList.remove('show'), 3000);
        }}
        
        // Toggle de configura√ß√µes
        document.querySelectorAll('.toggle input').forEach(toggle => {{
            toggle.addEventListener('change', async function() {{
                const key = this.id;
                const statusSpan = document.getElementById(key.replace('_enabled', '-status'));
                try {{
                    const response = await fetch('/api/config/toggle', {{
                        method: 'POST',
                        headers: {{ 'Content-Type': 'application/json' }},
                        body: JSON.stringify({{ key }})
                    }});
                    const data = await response.json();
                    if (data.success) {{
                        statusSpan.textContent = data.new_value ? 'Ativado' : 'Desativado';
                        statusSpan.className = `status ${{data.new_value ? 'status-on' : 'status-off'}}`;
                        showToast(data.message);
                    }} else {{
                        this.checked = !this.checked;
                        showToast(data.message || 'Erro ao atualizar', 'error');
                    }}
                }} catch (error) {{
                    this.checked = !this.checked;
                    showToast('Erro de conex√£o', 'error');
                }}
            }});
        }});
        
        // Carregar categorias do Discord
        async function loadCategories() {{
            try {{
                const response = await fetch('/api/discord/categories');
                const data = await response.json();
                const select = document.getElementById('ticket-category');
                select.innerHTML = '<option value="">Selecione uma categoria...</option>';
                if (data.success) {{
                    data.categories.forEach(cat => {{
                        const opt = document.createElement('option');
                        opt.value = cat.id;
                        opt.textContent = cat.name;
                        select.appendChild(opt);
                    }});
                }}
            }} catch (error) {{
                console.error('Erro ao carregar categorias:', error);
            }}
            
            // Carregar todos os canais de texto para logs
            loadAllTextChannels();
        }}
        
        // Carregar canais de uma categoria espec√≠fica
        async function loadChannelsByCategory() {{
            const categoryId = document.getElementById('ticket-category').value;
            const channelSelect = document.getElementById('ticket-channel');
            
            if (!categoryId) {{
                channelSelect.disabled = true;
                channelSelect.innerHTML = '<option value="">Selecione uma categoria primeiro</option>';
                return;
            }}
            
            try {{
                const response = await fetch(`/api/discord/channels/${{categoryId}}`);
                const data = await response.json();
                
                channelSelect.innerHTML = '<option value="">Selecione um canal...</option>';
                channelSelect.disabled = false;
                
                if (data.success && data.channels) {{
                    data.channels.forEach(ch => {{
                        const opt = document.createElement('option');
                        opt.value = ch.id;
                        opt.textContent = ch.name;
                        channelSelect.appendChild(opt);
                    }});
                }}
            }} catch (error) {{
                console.error('Erro ao carregar canais:', error);
                channelSelect.innerHTML = '<option value="">Erro ao carregar</option>';
            }}
        }}
        
        // Carregar todos os canais de texto (para logs)
        async function loadAllTextChannels() {{
            try {{
                const response = await fetch('/api/discord/text-channels');
                const data = await response.json();
                const select = document.getElementById('ticket-log-channel');
                
                select.innerHTML = '<option value="">Selecione um canal...</option>';
                
                if (data.success && data.channels) {{
                    data.channels.forEach(ch => {{
                        const opt = document.createElement('option');
                        opt.value = ch.id;
                        opt.textContent = ch.name;
                        select.appendChild(opt);
                    }});
                }}
            }} catch (error) {{
                console.error('Erro ao carregar canais de texto:', error);
            }}
            
            // Carregar roles (cargos) tamb√©m
            loadStaffRoles();
        }}
        
        // Carregar cargos do servidor (para staff)
        async function loadStaffRoles() {{
            try {{
                const response = await fetch('/api/discord/roles');
                const data = await response.json();
                const container = document.getElementById('ticket-staff-roles');
                
                container.innerHTML = '';
                
                if (data.success && data.roles) {{
                    data.roles.forEach(role => {{
                        const label = document.createElement('label');
                        label.style.cssText = 'display: flex; align-items: center; gap: 8px; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px; cursor: pointer; transition: all 0.2s;';
                        label.onmouseover = () => label.style.background = 'rgba(255,255,255,0.1)';
                        label.onmouseout = () => label.style.background = 'rgba(255,255,255,0.05)';
                        
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.value = role.id;
                        checkbox.className = 'staff-role-checkbox';
                        checkbox.checked = true; // Todos selecionados por padr√£o
                        
                        const text = document.createElement('span');
                        text.textContent = role.name;
                        
                        label.appendChild(checkbox);
                        label.appendChild(text);
                        container.appendChild(label);
                    }});
                }}
            }} catch (error) {{
                console.error('Erro ao carregar cargos:', error);
            }}
        }}
        
        // EventSource para atualiza√ß√£o em tempo real
        let statsEventSource = null;
        
        // Renderizar estat√≠sticas no grid
        function renderStats(data) {{
            const grid = document.getElementById('stats-grid');
            if (data.success) {{
                grid.innerHTML = `
                    <div class="card">
                        <h3>üë• Membros Totais</h3>
                        <p style="font-size: 32px; font-weight: 800; margin-top: 16px;">${{data.total_members}}</p>
                        <p style="font-size: 14px; color: #999; margin-top: 8px;">üë§ ${{data.total_humans}} humanos ‚Ä¢ ü§ñ ${{data.total_bots}} bots</p>
                    </div>
                    <div class="card">
                        <h3>üü¢ Humanos Online</h3>
                        <p style="font-size: 32px; font-weight: 800; margin-top: 16px; color: #22c55e;">${{data.humans_online}}</p>
                        <p style="font-size: 14px; color: #999; margin-top: 8px;">de ${{data.total_humans}} humanos</p>
                    </div>
                    <div class="card">
                        <h3>ü§ñ Rob√¥s Online</h3>
                        <p style="font-size: 32px; font-weight: 800; margin-top: 16px; color: #3b82f6;">${{data.bots_online}}</p>
                        <p style="font-size: 14px; color: #999; margin-top: 8px;">de ${{data.total_bots}} bots</p>
                    </div>
                    <div class="card">
                        <h3>üí¨ Canais de Texto</h3>
                        <p style="font-size: 32px; font-weight: 800; margin-top: 16px;">${{data.text_channels}}</p>
                    </div>
                    <div class="card">
                        <h3>üéôÔ∏è Canais de Voz</h3>
                        <p style="font-size: 32px; font-weight: 800; margin-top: 16px;">${{data.voice_channels}}</p>
                    </div>
                    <div class="card">
                        <h3>üé≠ Cargos Totais</h3>
                        <p style="font-size: 32px; font-weight: 800; margin-top: 16px;">${{data.total_roles}}</p>
                    </div>
                    <div class="card">
                        <h3>üöÄ Boost Level</h3>
                        <p style="font-size: 32px; font-weight: 800; margin-top: 16px; color: #f472b6;">${{data.boost_level}}</p>
                    </div>
                `;
            }} else {{
                grid.innerHTML = '<div class="card"><h3>‚ùå Erro ao carregar estat√≠sticas</h3></div>';
            }}
        }}
        
        // Carregar estat√≠sticas em tempo real com SSE
        function loadStats() {{
            const grid = document.getElementById('stats-grid');
            
            // Fechar conex√£o anterior se existir
            if (statsEventSource) {{
                statsEventSource.close();
            }}
            
            // Criar nova conex√£o SSE
            statsEventSource = new EventSource('/api/server/stats/stream');
            
            statsEventSource.onmessage = function(event) {{
                try {{
                    const data = JSON.parse(event.data);
                    renderStats(data);
                }} catch (error) {{
                    console.error('Erro ao processar stats:', error);
                }}
            }};
            
            statsEventSource.onerror = function(error) {{
                console.error('Erro no SSE:', error);
                grid.innerHTML = '<div class="card"><h3>‚ùå Erro de conex√£o em tempo real</h3></div>';
                // Reconectar ap√≥s 3 segundos
                setTimeout(() => {{
                    if (document.getElementById('stats-page').classList.contains('active')) {{
                        loadStats();
                    }}
                }}, 3000);
            }};
        }}
        
        // Color picker
        const colorPicker = document.getElementById('ticket-color-picker');
        const colorInput = document.getElementById('ticket-color');
        
        if (colorPicker && colorInput) {{
            colorPicker.addEventListener('input', function() {{
                const hex = this.value.replace('#', '');
                colorInput.value = '0x' + hex;
            }});
        }}
        
        // Enviar painel de ticket
        async function sendTicketPanel(e) {{
            e.preventDefault();
            const btn = e.target;
            const originalText = btn.textContent;
            btn.disabled = true;
            btn.textContent = '‚è≥ Enviando...';
            
            // Validar campos
            const channelId = document.getElementById('ticket-channel').value;
            const categoryId = document.getElementById('ticket-category').value;
            const logChannelId = document.getElementById('ticket-log-channel').value;
            const title = document.getElementById('ticket-title').value;
            const description = document.getElementById('ticket-description').value;
            
            // Coletar CHECKBOXES marcados (cargos de staff)
            const staffCheckboxes = document.querySelectorAll('.staff-role-checkbox:checked');
            const staffRoles = Array.from(staffCheckboxes).map(cb => cb.value);
            
            if (!channelId) {{
                showToast('‚ùå Selecione um canal para enviar o painel!', 'error');
                btn.disabled = false;
                btn.textContent = originalText;
                return;
            }}
            
            if (staffRoles.length === 0) {{
                showToast('‚ùå Selecione pelo menos 1 cargo de staff!', 'error');
                btn.disabled = false;
                btn.textContent = originalText;
                return;
            }}
            
            try {{
                // Converter cor para hex
                const colorPicker = document.getElementById('ticket-color-picker');
                const hexColor = colorPicker.value.replace('#', '');
                
                const response = await fetch('/api/tickets/panel/send', {{
                    method: 'POST',
                    headers: {{ 'Content-Type': 'application/json' }},
                    body: JSON.stringify({{
                        channel_id: channelId,
                        category_id: categoryId,
                        log_channel_id: logChannelId,
                        staff_roles: staffRoles,  // Array de IDs
                        title: title,
                        description: description,
                        color: '0x' + hexColor
                    }})
                }});
                
                const data = await response.json();
                if (data.success) {{
                    showToast('üéâ Painel enviado e configura√ß√µes salvas com sucesso!');
                }} else {{
                    showToast(data.message || 'Erro ao enviar painel', 'error');
                }}
            }} catch (error) {{
                console.error('Erro:', error);
                showToast('‚ùå Erro de conex√£o', 'error');
            }} finally {{
                btn.disabled = false;
                btn.textContent = originalText;
            }}
        }}
        // ========================================
        // VERIFICA√á√ÉO DE PERMISS√ïES EM TEMPO REAL (POLLING A CADA 1 SEGUNDO)
        // ========================================
        let authCheckInterval;
        
        function startAuthCheck() {{
            authCheckInterval = setInterval(async () => {{
                try {{
                    const response = await fetch('/api/auth/check');
                    const data = await response.json();
                    
                    if (!data.authorized) {{
                        clearInterval(authCheckInterval);
                        
                        // Mostra tela de acesso revogado
                        document.body.innerHTML = `
                            <div style="
                                position: fixed;
                                top: 0;
                                left: 0;
                                width: 100%;
                                height: 100%;
                                background: #000;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                z-index: 999999;
                            ">
                                <div style="
                                    text-align: center;
                                    font-family: 'Orbitron', sans-serif;
                                    animation: fadeIn 0.5s ease-in;
                                ">
                                    <h1 style="
                                        font-size: 64px;
                                        color: #ff3300;
                                        margin-bottom: 20px;
                                        text-shadow: 0 0 30px #ff0000;
                                    ">‚ö†Ô∏è ACESSO REVOGADO</h1>
                                    <p style="
                                        font-size: 24px;
                                        color: #ff6666;
                                        margin-bottom: 40px;
                                    ">Suas permiss√µes de administrador foram removidas.</p>
                                    <a href="/login" style="
                                        background: linear-gradient(135deg, #ff6600, #ff3300);
                                        color: white;
                                        border: 3px solid #ff3300;
                                        padding: 18px 40px;
                                        font-size: 18px;
                                        font-weight: 700;
                                        text-decoration: none;
                                        display: inline-block;
                                        box-shadow: 0 8px 24px rgba(255, 50, 0, 0.5);
                                        transition: all 0.3s;
                                    ">‚Üê Voltar ao Login</a>
                                </div>
                            </div>
                            <style>
                                @keyframes fadeIn {{
                                    from {{ opacity: 0; transform: scale(0.9); }}
                                    to {{ opacity: 1; transform: scale(1); }}
                                }}
                            </style>
                        `;
                    }}
                }} catch (error) {{
                    console.error('Erro ao verificar autentica√ß√£o:', error);
                }}
            }}, 1000); // Verifica A CADA 1 SEGUNDO
        }}
        
        // Inicia verifica√ß√£o quando p√°gina carregar
        startAuthCheck();
        
        // Para a verifica√ß√£o quando sair da p√°gina
        window.addEventListener('beforeunload', () => {{
            clearInterval(authCheckInterval);
        }});
        
        // Carregar perfil do usu√°rio no header
        async function loadUserProfile() {{
            try {{
                const response = await fetch('/api/user/profile');
                const data = await response.json();
                
                if (data.success) {{
                    document.getElementById('user-display-name').textContent = data.username;
                    document.getElementById('user-display-role').textContent = data.role || 'Administrador';
                    if (data.avatar) {{
                        document.getElementById('user-avatar').src = data.avatar;
                    }} else {{
                        document.getElementById('user-avatar').src = 'https://cdn.discordapp.com/embed/avatars/0.png';
                    }}
                }} else {{
                    document.getElementById('user-display-name').textContent = 'Usu√°rio';
                    document.getElementById('user-display-role').textContent = 'Admin';
                    document.getElementById('user-avatar').src = 'https://cdn.discordapp.com/embed/avatars/0.png';
                }}
            }} catch (error) {{
                console.error('Erro ao carregar perfil:', error);
            }}
        }}
        
        // ========================================
        // SISTEMA DE EMBEDS
        // ========================================
        
        let embedFieldCount = 0;
        
        // Carregar templates de embeds
        function loadEmbedTemplate() {{
            const template = document.getElementById('embed-template').value;
            
            // Limpar campos existentes SEMPRE que trocar template
            const container = document.getElementById('embed-fields-container');
            if (container) {{
                container.innerHTML = '';
            }}
            embedFieldCount = 0;
            
            // Mostrar/esconder campos espec√≠ficos
            const giveawayFields = document.getElementById('giveaway-fields');
            if (template === 'giveaway') {{
                giveawayFields.style.display = 'block';
            }} else {{
                giveawayFields.style.display = 'none';
            }}
            
            const templates = {{
                giveaway: {{
                    title: 'üéâ GIVEAWAY',
                    description: '', // Ser√° gerado dinamicamente
                    color: '#e91e63',
                    footer: 'Hospedado por CAOS Hub',
                    timestamp: true
                }},
                rules: {{
                    title: 'üìú REGRAS DO SERVIDOR',
                    description: '**Leia e siga todas as regras:**\\n\\n1Ô∏è‚É£ Respeite todos os membros\\n2Ô∏è‚É£ Sem spam ou flood\\n3Ô∏è‚É£ Sem conte√∫do NSFW\\n4Ô∏è‚É£ Sem divulga√ß√£o sem permiss√£o\\n5Ô∏è‚É£ Use os canais corretos\\n\\n**Puni√ß√µes:** Warn ‚Üí Mute ‚Üí Ban',
                    color: '#f44336',
                    footer: 'Staff do CAOS Hub'
                }},
                announcement: {{
                    title: 'üì¢ AN√öNCIO IMPORTANTE',
                    description: '**Novidades no servidor!**\\n\\nFique atento √†s atualiza√ß√µes e novidades que est√£o por vir!\\n\\n@everyone',
                    color: '#ff9800',
                    author: 'CAOS Hub',
                    timestamp: true
                }},
                info: {{
                    title: 'üìù INFORMA√á√ïES',
                    description: 'Informa√ß√µes importantes sobre o servidor.',
                    color: '#2196f3',
                    footer: 'CAOS Hub - Sistema de Informa√ß√µes'
                }},
                warning: {{
                    title: '‚ö†Ô∏è ATEN√á√ÉO',
                    description: '**Aviso importante para todos os membros!**\\n\\nPor favor, leiam com aten√ß√£o.',
                    color: '#ffc107',
                    timestamp: true
                }},
                success: {{
                    title: '‚úÖ SUCESSO',
                    description: 'Opera√ß√£o realizada com sucesso!',
                    color: '#4caf50',
                    footer: 'Sistema CAOS Bot'
                }}
            }};
            
            if (template !== 'custom' && templates[template]) {{
                const data = templates[template];
                document.getElementById('embed-title').value = data.title || '';
                document.getElementById('embed-description').value = data.description || '';
                document.getElementById('embed-author').value = data.author || '';
                document.getElementById('embed-footer').value = data.footer || '';
                document.getElementById('embed-timestamp').checked = data.timestamp || false;
                
                // Converter cor
                if (data.color) {{
                    const hex = data.color;
                    document.getElementById('embed-color-picker').value = hex;
                    document.getElementById('embed-color').value = '0x' + hex.replace('#', '');
                }}
                
                updateEmbedPreview();
            }}
        }}
        
        // Atualizar cor do embed
        function updateEmbedColor() {{
            const picker = document.getElementById('embed-color-picker');
            const hex = picker.value.replace('#', '');
            document.getElementById('embed-color').value = '0x' + hex;
            updateEmbedPreview();
        }}
        
        // Adicionar campo ao embed
        function addEmbedField() {{
            embedFieldCount++;
            const container = document.getElementById('embed-fields-container');
            const fieldHTML = `
                <div class="embed-field" id="field-${{embedFieldCount}}" style="border: 2px solid #ff6600; padding: 12px; margin-bottom: 12px; border-radius: 4px; background: rgba(255, 100, 0, 0.05);">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                        <span style="color: #ffcc00; font-weight: 600;">Campo ${{embedFieldCount}}</span>
                        <button type="button" onclick="removeEmbedField(${{embedFieldCount}}); return false;" style="background: #cc0000; color: white; border: none; padding: 4px 8px; cursor: pointer; border-radius: 2px; font-size: 12px;">‚ùå Remover</button>
                    </div>
                    <input type="text" class="form-input field-name" placeholder="Nome do campo" oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()" style="margin-bottom: 8px;">
                    <textarea class="form-textarea field-value" rows="2" placeholder="Valor do campo" oninput="updateEmbedPreview()" onkeyup="updateEmbedPreview()"></textarea>
                    <label style="display: flex; align-items: center; gap: 8px; margin-top: 8px; cursor: pointer;">
                        <input type="checkbox" class="field-inline" onchange="updateEmbedPreview()">
                        <span style="color: #ffaa66; font-size: 13px;">Inline (lado a lado)</span>
                    </label>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', fieldHTML);
            updateEmbedPreview();
        }}
        
        // Remover campo
        function removeEmbedField(id) {{
            const el = document.getElementById('field-' + id);
            if (el) {{
                el.remove();
                updateEmbedPreview();
            }}
        }}
        
        // Atualizar preview do embed
        function updateEmbedPreview() {{
            const template = document.getElementById('embed-template').value;
            const previewMode = document.getElementById('preview-mode') ? document.getElementById('preview-mode').value : 'giveaway';
            
            // Se for modo vencedor E template giveaway, mostrar preview do vencedor
            if (template === 'giveaway' && previewMode === 'winner') {{
                showWinnerPreview();
                return;
            }}
            
            const title = document.getElementById('embed-title').value;
            let description = document.getElementById('embed-description').value;
            
            // Gerar descri√ß√£o dinamicamente para giveaway
            if (template === 'giveaway') {{
                const prize = document.getElementById('giveaway-prize').value || 'N√£o especificado';
                const duration = document.getElementById('giveaway-duration').value || '7';
                const unit = document.getElementById('giveaway-time-unit').value;
                const winners = document.getElementById('giveaway-winners').value || '1';
                const emoji = document.getElementById('giveaway-emoji').value || 'üéâ';
                
                let timeText = '';
                if (unit === 'm') timeText = duration + ' minuto' + (duration > 1 ? 's' : '');
                else if (unit === 'h') timeText = duration + ' hora' + (duration > 1 ? 's' : '');
                else timeText = duration + ' dia' + (duration > 1 ? 's' : '');
                
                description = `**Reaja com ${{emoji}} para participar!**\n\nüéÅ **Pr√™mio:** ${{prize}}\n‚è∞ **Dura√ß√£o:** ${{timeText}}\nüë• **Vencedores:** ${{winners}}\n\n**Boa sorte a todos!** üçÄ`;
                
                // Atualizar o textarea (opcional, para mostrar a descri√ß√£o gerada)
                document.getElementById('embed-description').value = description;
            }}
            const colorPicker = document.getElementById('embed-color-picker').value;
            const image = document.getElementById('embed-image').value;
            const thumbnail = document.getElementById('embed-thumbnail').value;
            const author = document.getElementById('embed-author').value;
            const footer = document.getElementById('embed-footer').value;
            const footerIcon = document.getElementById('embed-footer-icon').value;
            const timestamp = document.getElementById('embed-timestamp').checked;
            
            // Coletar fields
            const fields = [];
            document.querySelectorAll('.embed-field').forEach(field => {{
                const nameEl = field.querySelector('.field-name');
                const valueEl = field.querySelector('.field-value');
                const inlineEl = field.querySelector('.field-inline');
                
                if (nameEl && valueEl) {{
                    const name = nameEl.value;
                    const value = valueEl.value;
                    const inline = inlineEl ? inlineEl.checked : false;
                    
                    if (name || value) {{
                        fields.push({{ name: name || 'Campo', value: value || 'Valor', inline }});
                    }}
                }}
            }});
            
            // Mensagem extra
            const extraMessage = document.getElementById('embed-extra-message').value;
            
            // Gerar preview HTML (estilo Discord REAL)
            let previewHTML = `
            <style>
                .discord-message {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
                    background: #313338;
                    padding: 16px;
                    border-radius: 4px;
                }}
                .discord-message * {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
                }}
                .message-header {{
                    display: flex;
                    align-items: center;
                    margin-bottom: 8px;
                }}
                .bot-avatar {{
                    width: 40px;
                    height: 40px;
                    border-radius: 50%;
                    margin-right: 12px;
                }}
                .bot-name {{
                    font-size: 15px;
                    font-weight: 500;
                    color: #f2f3f5;
                    margin-right: 6px;
                }}
                .bot-tag {{
                    background: #5865f2;
                    color: #fff;
                    font-size: 10px;
                    font-weight: 500;
                    padding: 2px 4px;
                    border-radius: 3px;
                    text-transform: uppercase;
                    vertical-align: middle;
                }}
                .embed-container {{
                    display: flex;
                    margin-left: 52px;
                }}
                .embed-content {{
                    border-left: 4px solid ` + colorPicker + `;
                    background: #2b2d31;
                    padding: 8px 12px 12px 12px;
                    border-radius: 4px;
                    max-width: 520px;
                    flex: 1;
                    position: relative;
                }}
                .embed-author {{
                    display: flex;
                    align-items: center;
                    margin-bottom: 8px;
                    font-size: 13px;
                    color: #f2f3f5;
                    font-weight: 600;
                }}
                .embed-title {{
                    color: #00aff4;
                    font-size: 15px;
                    font-weight: 600;
                    margin-bottom: 8px;
                    line-height: 1.2;
                }}
                .embed-description {{
                    color: #dbdee1;
                    font-size: 14px;
                    line-height: 1.375;
                    margin-bottom: 8px;
                    white-space: pre-wrap;
                    word-wrap: break-word;
                }}
                .embed-fields {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    gap: 8px;
                    margin-top: 8px;
                }}
                .embed-field {{
                    min-width: 0;
                }}
                .embed-field-name {{
                    color: #f2f3f5;
                    font-size: 14px;
                    font-weight: 600;
                    margin-bottom: 2px;
                }}
                .embed-field-value {{
                    color: #dbdee1;
                    font-size: 14px;
                    line-height: 1.375;
                }}
                .embed-image {{
                    max-width: 100%;
                    border-radius: 4px;
                    margin-top: 16px;
                }}
                .embed-thumbnail {{
                    position: absolute;
                    right: 12px;
                    top: 8px;
                    width: 80px;
                    height: 80px;
                    object-fit: cover;
                    border-radius: 4px;
                }}
                .embed-footer {{
                    display: flex;
                    align-items: center;
                    margin-top: 8px;
                    padding-top: 8px;
                    border-top: 1px solid #404249;
                    font-size: 12px;
                    color: #b5bac1;
                    font-weight: 500;
                }}
                .embed-footer-icon {{
                    width: 20px;
                    height: 20px;
                    border-radius: 50%;
                    margin-right: 8px;
                }}
            </style>
            
            <div class="discord-message">
                <div class="message-header">
                    <img src="https://i.ibb.co/VpPdrYCk/Chat-GPT-Image-11-de-set-de-2025-18-35-32.png" class="bot-avatar">
                    <span class="bot-name">CAOS Bot</span>
                    <span class="bot-tag">BOT</span>
                </div>
                <div style="margin-left: 52px;">
            `;
            
            // Adicionar mensagem extra se tiver (como texto normal do Discord)
            if (extraMessage) {{
                previewHTML += `<div style="color: #dcddde; font-size: 16px; margin-bottom: 8px; line-height: 1.375; word-wrap: break-word;">${{extraMessage}}</div>`;
            }}
            
            previewHTML += `
                <div class="embed-container">
                    <div class="embed-content">
            `;
            
            // Thumbnail
            if (thumbnail) {{
                previewHTML += '<img src="' + thumbnail + '" class="embed-thumbnail" onerror="this.style.display=\\'none\\'">';
            }}
            
            // Author
            if (author) {{
                previewHTML += '<div class="embed-author">' + author + '</div>';
            }}
            
            // Title
            if (title) {{
                previewHTML += '<div class="embed-title">' + title + '</div>';
            }}
            
            // Description
            if (description) {{
                let desc = description.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                desc = desc.replace(/\*(.*?)\*/g, '<em>$1</em>');
                desc = desc.replace(/\\n/g, '<br>');  // Quebrar linhas
                previewHTML += '<div class="embed-description">' + desc + '</div>';
            }}
            
            // Fields
            if (fields.length > 0) {{
                previewHTML += '<div class="embed-fields">';
                fields.forEach(f => {{
                    previewHTML += '<div class="embed-field" style="' + (f.inline ? '' : 'grid-column: 1 / -1;') + '">';
                    previewHTML += '<div class="embed-field-name">' + (f.name || 'Campo') + '</div>';
                    previewHTML += '<div class="embed-field-value">' + (f.value || 'Valor') + '</div>';
                    previewHTML += '</div>';
                }});
                previewHTML += '</div>';
            }}
            
            // Image
            if (image) {{
                previewHTML += '<img src="' + image + '" class="embed-image" onerror="this.style.display=\\'none\\'">';
            }}
            
            // Footer
            if (footer || timestamp) {{
                previewHTML += '<div class="embed-footer">';
                if (footerIcon) {{
                    previewHTML += '<img src="' + footerIcon + '" class="embed-footer-icon" onerror="this.style.display=\\'none\\'">';
                }}
                if (footer) {{
                    previewHTML += '<span>' + footer + '</span>';
                }}
                if (timestamp) {{
                    if (footer) previewHTML += '<span style="margin: 0 4px;">‚Ä¢</span>';
                    const now = new Date();
                    const time = now.toLocaleTimeString('pt-BR', {{ hour: '2-digit', minute: '2-digit' }});
                    previewHTML += '<span>Hoje √†s ' + time + '</span>';
                }}
                previewHTML += '</div>';
            }}
            
            previewHTML += `
                    </div>
                </div>
                </div>
            </div>
            `;
            
            document.getElementById('embed-preview').innerHTML = previewHTML;
        }}
        
        // Preview da mensagem do vencedor
        function showWinnerPreview() {{
            const template = document.getElementById('embed-template').value;
            if (template !== 'giveaway') return;
            
            const prize = document.getElementById('giveaway-prize').value || 'N√£o especificado';
            const winners = document.getElementById('giveaway-winners').value || '1';
            const winnerMessage = document.getElementById('giveaway-winner-message').value || '';
            const colorPicker = document.getElementById('embed-color-picker').value;
            
            // Substituir placeholders
            let message = winnerMessage.replace(/\\{{{{prize}}}}/g, prize);
            message = message.replace(/\\{{{{winners}}}}/g, '@Vencedor' + (winners > 1 ? ` +${{parseInt(winners)-1}}` : ''));
            
            // Converter quebras de linha e markdown
            message = message.replace(/\\n/g, '<br>');
            message = message.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            message = message.replace(/\*(.*?)\*/g, '<em>$1</em>');
            
            const previewHTML = `
            <style>
                .discord-message {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
                    background: #313338;
                    padding: 16px;
                    border-radius: 4px;
                }}
                .discord-message * {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
                }}
            </style>
            <div class="discord-message">
                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                    <img src="https://i.ibb.co/VpPdrYCk/Chat-GPT-Image-11-de-set-de-2025-18-35-32.png" style="width: 40px; height: 40px; border-radius: 50%; margin-right: 12px;">
                    <span style="font-size: 15px; font-weight: 500; color: #f2f3f5; margin-right: 6px;">CAOS Bot</span>
                    <span style="background: #5865f2; color: #fff; font-size: 10px; font-weight: 500; padding: 2px 4px; border-radius: 3px; text-transform: uppercase;">BOT</span>
                </div>
                <div style="margin-left: 52px;">
                    <div style="color: #dbdee1; margin-bottom: 8px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;">@Vencedor${{winners > 1 ? ` +${{parseInt(winners)-1}}` : ''}}</div>
                    <div style="border-left: 4px solid ${{colorPicker}}; background: #2b2d31; padding: 12px; border-radius: 4px;">
                        <div style="color: #00aff4; font-size: 15px; font-weight: 600; margin-bottom: 8px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;">üéâ GIVEAWAY ENCERRADO!</div>
                        <div style="color: #dbdee1; font-size: 14px; line-height: 1.5; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;">
                            ${{message}}
                        </div>
                        <div style="margin-top: 12px; padding-top: 8px; border-top: 1px solid #404249; font-size: 12px; color: #b5bac1; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;">
                            Participantes: 10
                        </div>
                    </div>
                </div>
            </div>
            `;
            
            document.getElementById('embed-preview').innerHTML = previewHTML;
        }}
        
        // Enviar embed
        async function sendEmbed() {{
            const channelId = document.getElementById('embed-channel').value;
            
            if (!channelId) {{
                showToast('‚ùå Selecione um canal!', 'error');
                return;
            }}
            
            const title = document.getElementById('embed-title').value;
            const description = document.getElementById('embed-description').value;
            
            if (!title && !description) {{
                showToast('‚ùå Preencha pelo menos o t√≠tulo ou descri√ß√£o!', 'error');
                return;
            }}
            
            const template = document.getElementById('embed-template').value;
            
            // Coletar todos os dados
            const embedData = {{
                channel_id: channelId,
                title: title,
                description: description,
                color: document.getElementById('embed-color').value,
                image: document.getElementById('embed-image').value,
                thumbnail: document.getElementById('embed-thumbnail').value,
                author: document.getElementById('embed-author').value,
                author_url: document.getElementById('embed-author-url').value,
                footer: document.getElementById('embed-footer').value,
                footer_icon: document.getElementById('embed-footer-icon').value,
                timestamp: document.getElementById('embed-timestamp').checked,
                fields: []
            }};
            
            // Se for giveaway, adicionar dados espec√≠ficos
            if (template === 'giveaway') {{
                const duration = document.getElementById('giveaway-duration').value || '7';
                const unit = document.getElementById('giveaway-time-unit').value;
                const winners = document.getElementById('giveaway-winners').value || '1';
                const emoji = document.getElementById('giveaway-emoji').value || 'üéâ';
                const prize = document.getElementById('giveaway-prize').value || 'Pr√™mio n√£o especificado';
                const winnerMessage = document.getElementById('giveaway-winner-message').value || '';
                
                embedData.giveaway = {{
                    duration: parseInt(duration),
                    time_unit: unit,
                    winners: parseInt(winners),
                    emoji: emoji,
                    prize: prize,
                    winner_message: winnerMessage
                }};
            }}
            
            // Coletar fields
            document.querySelectorAll('.embed-field').forEach(field => {{
                const name = field.querySelector('.field-name').value;
                const value = field.querySelector('.field-value').value;
                const inline = field.querySelector('.field-inline').checked;
                if (name || value) {{
                    embedData.fields.push({{ name: name || 'Campo', value: value || 'Valor', inline }});
                }}
            }});
            
            // Adicionar mensagem extra se tiver
            const extraMessage = document.getElementById('embed-extra-message').value;
            if (extraMessage) {{
                embedData.extra_message = extraMessage;
            }}
            
            try {{
                const apiUrl = template === 'giveaway' ? '/api/embeds/giveaway' : '/api/embeds/send';
                const response = await fetch(apiUrl, {{
                    method: 'POST',
                    headers: {{ 'Content-Type': 'application/json' }},
                    body: JSON.stringify(embedData)
                }});
                
                const data = await response.json();
                
                if (data.success) {{
                    showToast('‚úÖ Embed enviado com sucesso!', 'success');
                }} else {{
                    showToast('‚ùå Erro: ' + data.message, 'error');
                }}
            }} catch (error) {{
                showToast('‚ùå Erro ao enviar embed!', 'error');
                console.error(error);
            }}
        }}
        
        // Carregar categorias para embed
        async function loadEmbedCategories() {{
            try {{
                const response = await fetch('/api/discord/categories');
                const data = await response.json();
                
                if (data.success) {{
                    const select = document.getElementById('embed-category');
                    select.innerHTML = '<option value="">Todas as categorias</option>';
                    data.categories.forEach(cat => {{
                        select.innerHTML += `<option value="${{cat.id}}">${{cat.name}}</option>`;
                    }});
                    
                    // Carregar todos os canais inicialmente
                    loadAllEmbedChannels();
                }}
            }} catch (error) {{
                console.error('Erro ao carregar categorias:', error);
            }}
        }}
        
        // Carregar todos os canais
        async function loadAllEmbedChannels() {{
            try {{
                const response = await fetch('/api/discord/text-channels');
                const data = await response.json();
                
                if (data.success) {{
                    const select = document.getElementById('embed-channel');
                    select.innerHTML = '<option value="">Selecione um canal...</option>';
                    data.channels.forEach(channel => {{
                        select.innerHTML += `<option value="${{channel.id}}">#${{channel.name}}</option>`;
                    }});
                }}
            }} catch (error) {{
                console.error('Erro ao carregar canais:', error);
            }}
        }}
        
        // Carregar canais por categoria
        async function loadEmbedChannelsByCategory() {{
            const categoryId = document.getElementById('embed-category').value;
            
            if (!categoryId) {{
                // Se n√£o selecionou categoria, mostra todos
                loadAllEmbedChannels();
                return;
            }}
            
            try {{
                const response = await fetch(`/api/discord/categories/${{categoryId}}/channels`);
                const data = await response.json();
                
                if (data.success) {{
                    const select = document.getElementById('embed-channel');
                    select.innerHTML = '<option value="">Selecione um canal...</option>';
                    data.channels.forEach(channel => {{
                        select.innerHTML += `<option value="${{channel.id}}">#${{channel.name}}</option>`;
                    }});
                }}
            }} catch (error) {{
                console.error('Erro ao carregar canais da categoria:', error);
            }}
        }}
        
        // Carregar perfil ao iniciar
        loadUserProfile();
        
        // Carregar categorias quando abrir p√°gina de embeds
        const originalShowPage = showPage;
        showPage = function(page) {{
            originalShowPage(page);
            if (page === 'embeds') {{
                loadEmbedCategories();
            }}
        }};
    </script>
</body>
</html>
        """
        return html
    except Exception as e:
        return f"Erro ao carregar dashboard: {e}", 500

@app.route('/api/config/status', methods=['GET'])
def get_config_status():
    """Retorna status atual das configura√ß√µes"""
    try:
        config = load_config_dashboard()
        return jsonify(config)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/config/toggle', methods=['POST'])
def toggle_config_api():
    """Alterna estado de uma configura√ß√£o"""
    try:
        data = request.get_json()
        key = data.get('key')
        
        if not key:
            return jsonify({'success': False, 'message': 'Key n√£o fornecida'}), 400
        
        config = load_config_dashboard()
        
        if key not in config:
            return jsonify({'success': False, 'message': 'Key inv√°lida'}), 400
        
        # Alternar estado
        config[key] = not config[key]
        save_config_dashboard(config)
        
        return jsonify({
            'success': True,
            'key': key,
            'new_value': config[key],
            'message': f'{key} agora est√° {"ativado" if config[key] else "desativado"}'
        })
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/config/update', methods=['POST'])
def update_config_api():
    """Atualiza m√∫ltiplas configura√ß√µes de uma vez"""
    try:
        data = request.get_json()
        config = load_config_dashboard()
        
        # Atualizar apenas chaves v√°lidas
        valid_keys = ['welcome_enabled', 'goodbye_enabled', 'autorole_enabled', 'tickets_enabled']
        updated = []
        
        for key in valid_keys:
            if key in data:
                config[key] = bool(data[key])
                updated.append(key)
        
        save_config_dashboard(config)
        
        return jsonify({
            'success': True,
            'updated': updated,
            'config': config,
            'message': f'{len(updated)} configura√ß√µes atualizadas'
        })
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

def load_config_dashboard():
    """Carrega configura√ß√µes do dashboard"""
    default_config = {
        'welcome_enabled': False,
        'goodbye_enabled': False,
        'autorole_enabled': False,
        'tickets_enabled': False,
        'status_message_id': None
    }
    
    if os.path.exists(WELCOME_CONFIG_FILE):
        try:
            with open(WELCOME_CONFIG_FILE, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if not content:
                    print("‚ö†Ô∏è Arquivo de config vazio, usando padr√µes")
                    return default_config
                return json.loads(content)
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON inv√°lido no arquivo de config: {e}")
            print(f"üîß Recriando arquivo com configs padr√£o...")
            # Deletar arquivo corrompido e criar novo
            try:
                os.remove(WELCOME_CONFIG_FILE)
            except:
                pass
            save_config_dashboard(default_config)
            return default_config
        except Exception as e:
            print(f"‚ùå Erro ao ler config: {e}")
            return default_config
    
    return default_config

def save_config_dashboard(config):
    """Salva configura√ß√µes do dashboard"""
    try:
        with open(WELCOME_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Configura√ß√µes salvas com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√µes: {e}")

# ========================================
# ENDPOINTS DO SISTEMA DE TICKETS
# ========================================

@app.route('/api/discord/channels', methods=['GET'])
def get_discord_channels():
    """Retorna lista de canais do Discord"""
    try:
        if not bot.guilds:
            return jsonify({'success': False, 'message': 'Bot n√£o conectado'}), 500
        
        guild = bot.guilds[0]  # Primeiro servidor
        channels = []
        
        for channel in guild.text_channels:
            channels.append({
                'id': str(channel.id),
                'name': channel.name,
                'category': channel.category.name if channel.category else 'Sem categoria'
            })
        
        return jsonify({'success': True, 'channels': channels})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/discord/categories', methods=['GET'])
def get_discord_categories():
    """Retorna lista de categorias do Discord"""
    try:
        if not bot.guilds:
            return jsonify({'success': False, 'message': 'Bot n√£o conectado'}), 500
        
        guild = bot.guilds[0]
        categories = []
        
        for category in guild.categories:
            categories.append({
                'id': str(category.id),
                'name': category.name
            })
        
        return jsonify({'success': True, 'categories': categories})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/tickets/config', methods=['GET'])
def get_ticket_config_route():
    """Retorna configura√ß√£o completa de tickets"""
    try:
        guild_id = request.args.get('guild_id')
        if not guild_id:
            return jsonify({'success': False, 'message': 'Guild ID n√£o especificado'}), 400
        
        # Se n√£o existe config, retorna padr√£o
        if guild_id not in ticket_config:
            config = get_default_ticket_config(guild_id)
        else:
            config = ticket_config[guild_id]
        
        return jsonify({'success': True, 'config': config})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/tickets/config', methods=['POST'])
def save_ticket_config_route():
    """Salva configura√ß√£o completa de tickets"""
    try:
        data = request.json
        guild_id = data.get('guild_id')
        config = data.get('config')
        
        if not guild_id or not config:
            return jsonify({'success': False, 'message': 'Dados incompletos'}), 400
        
        # Salvar configura√ß√£o
        ticket_config[guild_id] = config
        save_ticket_config()
        
        return jsonify({'success': True, 'message': 'Configura√ß√£o salva com sucesso!'})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/tickets/panel/send', methods=['POST'])
def send_ticket_panel():
    """Envia painel de ticket COMPLETO com categorias"""
    try:
        data = request.get_json()
        channel_id = data.get('channel_id')
        category_id = data.get('category_id')
        log_channel_id = data.get('log_channel_id')
        staff_roles = data.get('staff_roles', [])  # Array de IDs de staff
        title = data.get('title', 'üé´ SISTEMA DE TICKETS')
        description = data.get('description', 'Selecione uma categoria abaixo para abrir um ticket!')
        color = data.get('color', '0x5865F2')
        
        if not channel_id:
            return jsonify({'success': False, 'message': 'Canal n√£o especificado'}), 400
        
        # SALVAR CONFIGURA√á√ÉO (category_id, log_channel_id, staff_roles)
        if bot.guilds:
            guild_id = str(bot.guilds[0].id)
            ticket_config[guild_id] = {
                'category_id': category_id,
                'log_channel_id': log_channel_id,
                'staff_roles': staff_roles,
                'max_tickets_per_user': ticket_config.get(guild_id, {}).get('max_tickets_per_user', 1)
            }
            # Salvar no arquivo
            save_ticket_config()
        
        # Agendar envio do painel
        async def send_panel():
            try:
                channel = bot.get_channel(int(channel_id))
                if not channel:
                    return False
                
                # EMBED LIMPO (sem lista de categorias - aparecem no dropdown)
                embed = discord.Embed(
                    title=title,
                    description=description,
                    color=int(color, 16) if isinstance(color, str) else color
                )
                embed.set_footer(text='Sistema de Tickets ‚Ä¢ Caos Hub')
                
                # Usar o novo sistema de BOT√ÉO (abre dropdowns ephemeral)
                view = TicketPanelView()
                
                await channel.send(embed=embed, view=view)
                return True
            except Exception as e:
                print(f'Erro ao enviar painel: {e}')
                return False
        
        # Executar
        future = asyncio.run_coroutine_threadsafe(send_panel(), bot.loop)
        result = future.result(timeout=10)
        
        if result:
            return jsonify({'success': True, 'message': 'Painel enviado com sucesso!'})
        else:
            return jsonify({'success': False, 'message': 'Erro ao enviar painel'}), 500
            
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/discord/channels/<category_id>', methods=['GET'])
def get_category_channels(category_id):
    """Retorna canais de uma categoria espec√≠fica"""
    try:
        if not bot.guilds:
            return jsonify({'success': False, 'message': 'Bot n√£o conectado'}), 500
        
        guild = bot.guilds[0]
        category = guild.get_channel(int(category_id))
        
        if not category:
            return jsonify({'success': False, 'message': 'Categoria n√£o encontrada'}), 404
        
        channels = []
        for channel in category.text_channels:
            channels.append({
                'id': str(channel.id),
                'name': channel.name
            })
        
        return jsonify({'success': True, 'channels': channels})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/embeds/send', methods=['POST'])
def send_embed():
    """Envia embed customizado para um canal"""
    try:
        data = request.get_json()
        channel_id = data.get('channel_id')
        
        if not channel_id:
            return jsonify({'success': False, 'message': 'Canal n√£o especificado'}), 400
        
        # Criar embed
        embed_dict = {}
        
        if data.get('title'):
            embed_dict['title'] = data['title']
        
        if data.get('description'):
            embed_dict['description'] = data['description']
        
        if data.get('color'):
            try:
                color_hex = data['color'].replace('0x', '')
                embed_dict['color'] = int(color_hex, 16)
            except:
                embed_dict['color'] = 0xff6600
        
        if data.get('image'):
            embed_dict['image'] = {'url': data['image']}
        
        if data.get('thumbnail'):
            embed_dict['thumbnail'] = {'url': data['thumbnail']}
        
        if data.get('author'):
            author_dict = {'name': data['author']}
            if data.get('author_url'):
                author_dict['url'] = data['author_url']
            embed_dict['author'] = author_dict
        
        if data.get('footer'):
            footer_dict = {'text': data['footer']}
            if data.get('footer_icon'):
                footer_dict['icon_url'] = data['footer_icon']
            embed_dict['footer'] = footer_dict
        
        if data.get('timestamp'):
            from datetime import datetime
            embed_dict['timestamp'] = datetime.utcnow().isoformat()
        
        if data.get('fields'):
            embed_dict['fields'] = []
            for field in data['fields']:
                embed_dict['fields'].append({
                    'name': field.get('name', 'Campo'),
                    'value': field.get('value', 'Valor'),
                    'inline': field.get('inline', False)
                })
        
        # Enviar embed de forma ass√≠ncrona
        async def send_embed_async():
            try:
                channel = bot.get_channel(int(channel_id))
                if not channel:
                    return False, 'Canal n√£o encontrado'
                
                embed = discord.Embed.from_dict(embed_dict)
                
                # Enviar com mensagem extra se tiver
                extra_msg = data.get('extra_message', '')
                if extra_msg:
                    await channel.send(content=extra_msg, embed=embed)
                else:
                    await channel.send(embed=embed)
                
                return True, 'Embed enviado'
            except Exception as e:
                return False, str(e)
        
        future = asyncio.run_coroutine_threadsafe(send_embed_async(), bot.loop)
        success, message = future.result(timeout=10)
        
        if success:
            return jsonify({'success': True, 'message': message})
        else:
            return jsonify({'success': False, 'message': message}), 500
            
    except Exception as e:
        print(f'‚ùå Erro ao enviar embed: {e}')
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/embeds/giveaway', methods=['POST'])
def send_giveaway():
    """Envia giveaway com rea√ß√£o e sorteio autom√°tico"""
    try:
        data = request.get_json()
        channel_id = data.get('channel_id')
        giveaway_data = data.get('giveaway', {})
        
        if not channel_id:
            return jsonify({'success': False, 'message': 'Canal n√£o especificado'}), 400
        
        if not giveaway_data:
            return jsonify({'success': False, 'message': 'Dados do giveaway n√£o especificados'}), 400
        
        # Criar embed
        embed_dict = {}
        
        if data.get('title'):
            embed_dict['title'] = data['title']
        
        if data.get('description'):
            embed_dict['description'] = data['description']
        
        if data.get('color'):
            try:
                color_hex = data['color'].replace('0x', '')
                embed_dict['color'] = int(color_hex, 16)
            except:
                embed_dict['color'] = 0xe91e63
        
        if data.get('footer'):
            embed_dict['footer'] = {'text': data['footer']}
        
        if data.get('timestamp'):
            from datetime import datetime, timedelta
            
            # Calcular tempo de fim
            duration = giveaway_data.get('duration', 7)
            time_unit = giveaway_data.get('time_unit', 'd')
            
            if time_unit == 'm':
                end_time = datetime.utcnow() + timedelta(minutes=duration)
            elif time_unit == 'h':
                end_time = datetime.utcnow() + timedelta(hours=duration)
            else:  # dias
                end_time = datetime.utcnow() + timedelta(days=duration)
            
            embed_dict['timestamp'] = end_time.isoformat()
        
        # Enviar embed e adicionar rea√ß√£o
        async def send_giveaway_async():
            try:
                channel = bot.get_channel(int(channel_id))
                if not channel:
                    return False, 'Canal n√£o encontrado'
                
                embed = discord.Embed.from_dict(embed_dict)
                
                # Enviar com mensagem extra se tiver (JUNTO, n√£o separado)
                extra_msg = data.get('extra_message', '')
                if extra_msg:
                    message = await channel.send(content=extra_msg, embed=embed)
                else:
                    message = await channel.send(embed=embed)
                
                # Adicionar rea√ß√£o
                emoji = giveaway_data.get('emoji', 'üéâ')
                try:
                    await message.add_reaction(emoji)
                except:
                    await message.add_reaction('üéâ')  # Fallback
                    emoji = 'üéâ'
                
                # Agendar sorteio autom√°tico
                duration = giveaway_data.get('duration', 7)
                time_unit = giveaway_data.get('time_unit', 'd')
                winners_count = giveaway_data.get('winners', 1)
                prize = giveaway_data.get('prize', 'Pr√™mio')
                
                # Calcular tempo em segundos
                if time_unit == 'm':
                    wait_time = duration * 60
                elif time_unit == 'h':
                    wait_time = duration * 3600
                else:  # dias
                    wait_time = duration * 86400
                
                # Agendar task para sortear depois
                async def do_giveaway_draw():
                    await asyncio.sleep(wait_time)
                    
                    # Refetch da mensagem para pegar rea√ß√µes atualizadas
                    try:
                        msg = await channel.fetch_message(message.id)
                        
                        # Pegar usu√°rios que reagiram
                        reaction = None
                        for r in msg.reactions:
                            if str(r.emoji) == emoji:
                                reaction = r
                                break
                        
                        if not reaction or reaction.count <= 1:  # S√≥ o bot
                            await channel.send(f"üéâ **SORTEIO ENCERRADO**\n\nNingu√©m participou do sorteio de **{prize}**! üò¢")
                            return
                        
                        # Pegar participantes (excluindo o bot)
                        participants = []
                        async for user in reaction.users():
                            if not user.bot:
                                participants.append(user)
                        
                        if len(participants) == 0:
                            await channel.send(f"üéâ **SORTEIO ENCERRADO**\n\nNingu√©m participou do sorteio de **{prize}**! üò¢")
                            return
                        
                        # Sortear vencedores
                        import random
                        actual_winners = min(winners_count, len(participants))
                        winners = random.sample(participants, actual_winners)
                        
                        # Anunciar vencedores
                        winners_mention = ', '.join([w.mention for w in winners])
                        
                        # Usar mensagem customiz√°vel
                        winner_msg_template = giveaway_data.get('winner_message', 'üéä **Parab√©ns!** üéä\n\nVoc√™ ganhou **{prize}**!\n\nüìã Abra um ticket na categoria üéâ **Sorteios** para receber seu pr√™mio.')
                        winner_description = winner_msg_template.replace('{prize}', prize).replace('{winners}', winners_mention)
                        
                        result_embed = discord.Embed(
                            title="üéâ GIVEAWAY ENCERRADO!",
                            description=winner_description,
                            color=0x00ff00
                        )
                        result_embed.set_footer(text=f"Participantes: {len(participants)}")
                        
                        await channel.send(content=winners_mention, embed=result_embed)
                        
                    except Exception as e:
                        print(f"‚ùå Erro ao sortear giveaway: {e}")
                        await channel.send(f"‚ùå Erro ao realizar sorteio! Contate um administrador.")
                
                # Criar task
                bot.loop.create_task(do_giveaway_draw())
                
                return True, f'Giveaway criado! ID: {message.id}'
            except Exception as e:
                return False, str(e)
        
        future = asyncio.run_coroutine_threadsafe(send_giveaway_async(), bot.loop)
        success, message = future.result(timeout=10)
        
        if success:
            return jsonify({'success': True, 'message': message})
        else:
            return jsonify({'success': False, 'message': message}), 500
            
    except Exception as e:
        print(f'‚ùå Erro ao criar giveaway: {e}')
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/discord/text-channels', methods=['GET'])
def get_all_text_channels():
    """Retorna todos os canais de texto do servidor"""
    try:
        if not bot.guilds:
            return jsonify({'success': False, 'message': 'Bot n√£o conectado'}), 500
        
        guild = bot.guilds[0]
        channels = []
        
        for channel in guild.text_channels:
            channels.append({
                'id': str(channel.id),
                'name': channel.name
            })
        
        return jsonify({'success': True, 'channels': channels})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/discord/roles', methods=['GET'])
def get_discord_roles():
    """Retorna APENAS os cargos de STAFF (modera√ß√£o)"""
    # IDs dos cargos de staff (s√≥ esses aparecem no dropdown)
    STAFF_ROLE_IDS = [
        1365636960651051069,  # üî• Founder [FND]
        1365636456386789437,  # üåü Sub Dono [SDN]
        1365633918593794079,  # üëë Administrador [ADM]
        1365634226254254150,  # üõ†Ô∏è Staff [STF]
        1365633102973763595,  # ‚öîÔ∏è Moderador [MOD]
        1365631940434333748,  # üõ°Ô∏è Sub Moderador [SBM]
    ]
    
    try:
        if not bot.guilds:
            return jsonify({'success': False, 'message': 'Bot n√£o conectado'}), 500
        
        guild = bot.guilds[0]
        roles = []
        
        # Filtrar APENAS os cargos de staff
        for role in guild.roles:
            if role.id in STAFF_ROLE_IDS:
                roles.append({
                    'id': str(role.id),
                    'name': role.name,
                    'color': str(role.color)
                })
        
        # Ordenar na hierarquia (mesma ordem do array STAFF_ROLE_IDS)
        roles.sort(key=lambda r: STAFF_ROLE_IDS.index(int(r['id'])))
        
        return jsonify({'success': True, 'roles': roles})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/auth/check', methods=['GET'])
def check_auth():
    """Verifica se usu√°rio ainda tem permiss√µes (para polling em tempo real)"""
    try:
        if 'user' not in session:
            return jsonify({'authorized': False, 'reason': 'not_logged_in'}), 401
        
        user_id = session['user']['id']
        has_permission = check_user_permissions(user_id)
        
        if not has_permission:
            session.clear()
            return jsonify({'authorized': False, 'reason': 'permission_revoked'}), 403
        
        return jsonify({'authorized': True}), 200
    except Exception as e:
        return jsonify({'authorized': False, 'reason': str(e)}), 500

@app.route('/api/user/profile', methods=['GET'])
def get_user_profile():
    """Retorna perfil do usu√°rio logado"""
    try:
        if 'user' not in session:
            return jsonify({'success': False, 'message': 'N√£o autenticado'}), 401
        
        user = session['user']
        user_id = user.get('id')
        
        # Buscar cargo do usu√°rio no servidor
        if not bot.guilds:
            return jsonify({'success': False, 'message': 'Bot n√£o conectado'}), 500
        
        guild = bot.guilds[0]
        member = guild.get_member(int(user_id))
        
        role_name = 'Administrador'
        if member:
            # IDs dos cargos (mesmo ordem do c√≥digo)
            if '1365636960651051069' in [str(r.id) for r in member.roles]:
                role_name = 'üëë Founder'
            elif '1365636456386789437' in [str(r.id) for r in member.roles]:
                role_name = '‚ö° Sub-Dono'
            elif '1365633918593794079' in [str(r.id) for r in member.roles]:
                role_name = 'üõ°Ô∏è Administrador'
        
        return jsonify({
            'success': True,
            'username': user.get('username'),
            'avatar': user.get('avatar'),
            'role': role_name
        })
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

def get_current_stats():
    """Helper para obter estat√≠sticas atuais"""
    try:
        if not bot.guilds:
            return None
        
        guild = bot.guilds[0]
        
        # Separar humanos e bots
        humans = [m for m in guild.members if not m.bot]
        bots = [m for m in guild.members if m.bot]
        
        # Contar online separado (online, idle, dnd = considerados online)
        humans_online = sum(1 for m in humans if m.status in [discord.Status.online, discord.Status.idle, discord.Status.dnd])
        bots_online = sum(1 for m in bots if m.status in [discord.Status.online, discord.Status.idle, discord.Status.dnd])
        
        return {
            'success': True,
            'server_name': guild.name,
            'server_icon': str(guild.icon.url) if guild.icon else None,
            'total_members': guild.member_count,
            'total_humans': len(humans),
            'total_bots': len(bots),
            'humans_online': humans_online,
            'bots_online': bots_online,
            'online_members': humans_online + bots_online,
            'total_channels': len(guild.channels),
            'text_channels': len(guild.text_channels),
            'voice_channels': len(guild.voice_channels),
            'total_roles': len(guild.roles),
            'boost_level': guild.premium_tier,
            'boost_count': guild.premium_subscription_count,
            'created_at': guild.created_at.strftime('%Y-%m-%d')
        }
    except:
        return None

@app.route('/api/server/stats', methods=['GET'])
def get_server_stats():
    """Retorna estat√≠sticas do servidor"""
    stats = get_current_stats()
    if stats:
        return jsonify(stats)
    return jsonify({'success': False, 'message': 'Bot n√£o conectado'}), 500

@app.route('/api/server/stats/stream')
def stats_stream():
    """Stream de estat√≠sticas em tempo real via SSE"""
    def generate():
        import time
        import json
        last_stats = None
        while True:
            try:
                stats = get_current_stats()
                if stats and stats != last_stats:
                    yield f"data: {json.dumps(stats)}\n\n"
                    last_stats = stats
                time.sleep(2)  # Atualiza a cada 2 segundos
            except:
                pass
    
    return Response(generate(), mimetype='text/event-stream')

def run_web():
    import os
    try:
        port = int(os.getenv("PORT", 10000))
        print(f'üåê Servidor HTTP iniciado na porta {port}')
        print(f'üîß REDIRECT_URI: {DISCORD_REDIRECT_URI}')
        print(f'üîß CLIENT_ID: {DISCORD_CLIENT_ID}')
        print(f'üìç Rotas dispon√≠veis:')
        print(f'   - http://0.0.0.0:{port}/')
        print(f'   - http://0.0.0.0:{port}/test')
        print(f'   - http://0.0.0.0:{port}/ping')
        print(f'   - http://0.0.0.0:{port}/login')
        app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)
    except Exception as e:
        print(f'‚ùå ERRO AO INICIAR FLASK: {e}')
        import traceback
        traceback.print_exc()

# N√ÉO inicia aqui! Vai iniciar no bloco if __name__ == '__main__'

# Configura√ß√£o do bot
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True  # NECESS√ÅRIO para eventos de entrada/sa√≠da/ban
intents.presences = True  # NECESS√ÅRIO para ver status online/offline dos membros

# Bot configurado com PREFIXO (.)
bot = commands.Bot(command_prefix='.', intents=intents)

            description=f"**Criado por:** {member.mention}\n**Categoria:** {category_name}",
            color=0x5865F2,
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(name="üìã Assunto", value=assunto, inline=False)
        embed.add_field(name="üìù Descri√ß√£o", value=descricao, inline=False)
        embed.add_field(name="üî¢ N√∫mero do Ticket", value=f"`#{ticket_number}`", inline=True)
        embed.add_field(name="‚è∞ Status", value="üü¢ Aguardando atendimento", inline=True)
        embed.set_footer(text=f"Sistema de Tickets ‚Ä¢ Caos Hub | Ticket {ticket_name}")
        
        # Enviar com bot√µes de gerenciamento
        await ticket_channel.send(f"{member.mention}", embed=embed, view=TicketManageView(ticket_channel))
        
        # Responder
        await interaction.followup.send(
            f'‚úÖ Ticket criado com sucesso! {ticket_channel.mention}',
            ephemeral=True
        )
        
    except Exception as e:
        print(f'‚ùå Erro ao criar ticket: {e}')
        try:
            await interaction.followup.send('‚ùå Erro ao criar ticket. Contate um administrador.', ephemeral=True)
        except:
            pass

async def handle_create_ticket(interaction: discord.Interaction):
    """Handler antigo - redireciona para novo sistema"""
    # Agora n√£o usa mais - substitu√≠do pelo sistema de categorias
    pass

# Nova fun√ß√£o COMPLETA com todos os campos
async def create_ticket_channel_complete(interaction, category_name, category_emoji, priority_name, priority_emoji, assunto, descricao, idioma, info_adicional):
    """Cria canal de ticket COMPLETO igual da imagem"""
    try:
        guild = interaction.guild
        member = interaction.user
        
        # Verificar quantos tickets o usu√°rio j√° tem abertos
        user_tickets = [ch for ch in guild.text_channels if f'Ticket de {member.id}' in (ch.topic or '')]
        max_tickets = ticket_config.get('max_tickets_per_user', 1)  # Padr√£o: 1 ticket
        
        if len(user_tickets) >= max_tickets:
            await interaction.response.send_message(
                f'‚ùå Voc√™ j√° possui {len(user_tickets)} ticket(s) aberto(s). Limite: {max_tickets}\n' +
                (f'Ticket: {user_tickets[0].mention}' if len(user_tickets) == 1 else 
                 f'Tickets: {", ".join([t.mention for t in user_tickets])}'),
                ephemeral=True
            )
            return
        
        # Categoria STUFF (hardcoded)
        ticket_category = guild.get_channel(1365692340651556894)
        
        # Se n√£o encontrou, usar padr√£o
        if not ticket_category:
            ticket_category = discord.utils.get(guild.categories, name='üìÇ TICKETS')
            if not ticket_category:
                ticket_category = await guild.create_category('üìÇ TICKETS')
        
        # Mapear nomes curtos
        category_map = {
            "Geral": "geral", "Compras": "compras", "Suporte T√©cnico": "suporte",
            "Den√∫ncia": "denuncia", "Parceria": "parceria", "Financeiro": "financeiro",
            "Modera√ß√£o": "moderacao", "Bug": "bug",
        }
        
        # Incrementar contador
        category_short = category_map.get(category_name, "ticket")
        ticket_counters[category_short] += 1
        ticket_number = ticket_counters[category_short]
        
        # Nome: emoji-categoria-numero
        ticket_name = f'{category_emoji}-{category_short}-{ticket_number}'
        
        # ===== CONFIGURAR PERMISS√ïES NA CRIA√á√ÉO =====
        guild_id = str(guild.id)
        config = ticket_config.get(guild_id, {})
        selected_staff_roles = config.get('staff_roles', [])
        
        # Criar overwrites (permiss√µes do canal)
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),  # Bloquear @everyone
            member: discord.PermissionOverwrite(view_channel=True, send_messages=True)  # Liberar usu√°rio
        }
        
        # Adicionar APENAS os staff roles SELECIONADOS
        for role_id in selected_staff_roles:
            role = guild.get_role(int(role_id))
            if role:
                overwrites[role] = discord.PermissionOverwrite(
                    view_channel=True,
                    send_messages=True,
                    manage_messages=True
                )
        
        # Criar canal COM as permiss√µes j√° definidas (n√£o herda da categoria)
        ticket_channel = await guild.create_text_channel(
            name=ticket_name,
            category=ticket_category,
            topic=f'Ticket de {member.id} | {category_name} #{ticket_number}',
            overwrites=overwrites  # ‚Üê ISSO √â CRUCIAL!
        )
        
        # Cor baseada na prioridade
        priority_colors = {"Baixa": 0x00ff00, "M√©dia": 0xffff00, "Alta": 0xff8800, "Urgente": 0xff0000}
        embed_color = priority_colors.get(priority_name, 0x5865F2)
        
        # EMBED COMPLETO
        embed = discord.Embed(
            title=f"{category_emoji} Ticket de {member.display_name}",
            description=f"**üé´ NOVO TICKET ABERTO**\n\n*Ol√°! Obrigado por abrir um ticket. Nossa equipe responder√° em breve.*\n\n*Nossa equipe responder√° o mais breve poss√≠vel!*",
            color=embed_color,
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(name="üë§ Aberto por", value=f"{member.mention}\n**ID:** `{member.id}`", inline=True)
        embed.add_field(name=f"{category_emoji} Categoria", value=f"{category_emoji} {category_name}", inline=True)
        embed.add_field(name=f"{priority_emoji} Prioridade", value=f"{priority_emoji} {priority_name}", inline=True)
        embed.add_field(name="üåê Idioma", value=idioma, inline=False)
        embed.add_field(name="üìÑ Assunto", value=f"```\n{assunto}\n```", inline=False)
        embed.add_field(name="üìù Descri√ß√£o Detalhada", value=f"```\n{descricao}\n```", inline=False)
        embed.add_field(name="‚ÑπÔ∏è Informa√ß√µes Adicionais", value=f"```\n{info_adicional}\n```", inline=False)
        embed.set_footer(text=f"Sistema de Tickets ‚Ä¢ Caos Hub ‚Ä¢ Hoje √†s {discord.utils.utcnow().strftime('%I:%M %p')}")
        
        # Enviar mensagem no canal do ticket
        await ticket_channel.send(f"{member.mention}", embed=embed, view=TicketManageView(ticket_channel))
        
        # LOG
        log_channel = discord.utils.get(guild.text_channels, name='ticket-logs')
        if log_channel:
            log_embed = discord.Embed(title="üé´ NOVO TICKET", description=f"Ticket `{ticket_name}` criado", color=0x00ff00, timestamp=discord.utils.utcnow())
            log_embed.add_field(name="Canal", value=ticket_channel.mention, inline=True)
            log_embed.add_field(name="Usu√°rio", value=member.mention, inline=True)
            log_embed.add_field(name="Categoria", value=f"{category_emoji} {category_name}", inline=True)
            log_embed.add_field(name="Prioridade", value=f"{priority_emoji} {priority_name}", inline=True)
            await log_channel.send(embed=log_embed)
        
        # RETORNAR o canal criado
        return ticket_channel
        
    except Exception as e:
        print(f'‚ùå Erro: {e}')
        import traceback
        traceback.print_exc()
        return None

# ========================================
# EVENTOS DE BOAS-VINDAS/SA√çDA/BAN
# ========================================

@bot.event
async def on_member_join(member):
    """Evento quando algu√©m entra no servidor - CONTROLADO PELO DASHBOARD + ANTI-RAID"""
    try:
        guild = member.guild
        current_time = time.time()
        
        # ========================================
        # SISTEMA ANTI-RAID - VERIFICA√á√ÉO DE ENTRADA
        # ========================================
        
        # Adicionar entrada ao hist√≥rico
        raid_detection['recent_joins'].append(current_time)
        
        # Verificar se √© usu√°rio suspeito
        is_suspicious, suspicion_reason = await check_suspicious_user(member)
        
        # SE EST√Å EM MODO RAID + usu√°rio suspeito = BAN IMEDIATO
        if raid_detection['in_raid_mode'] and is_suspicious:
            try:
                await member.ban(reason=f"[ANTI-RAID] {suspicion_reason}")
                raid_detection['auto_banned'].add(member.id)
                print(f"üö® [ANTI-RAID] Banido: {member.name} - {suspicion_reason}")
                
                # Log
                log_channel = guild.get_channel(1315107491453444137)
                if log_channel:
                    embed = discord.Embed(
                        title="üö® AUTO-BAN (MODO RAID)",
                        description=f"**{member.name}** foi banido automaticamente.",
                        color=0xFF0000,
                        timestamp=discord.utils.utcnow()
                    )
                    embed.add_field(name="üë§ Usu√°rio", value=f"{member.mention}\nID: `{member.id}`", inline=True)
                    embed.add_field(name="üîç Motivo", value=suspicion_reason, inline=True)
                    embed.set_footer(text="Sistema Anti-Raid ‚Ä¢ Caos Hub")
                    await log_channel.send(embed=embed)
                
                return  # Para o processamento
            except Exception as e:
                print(f"‚ùå Erro ao banir raider: {e}")
        
        # Verificar padr√£o de raid (muitas entradas)
        if await check_raid_pattern(guild):
            # Ativar modo raid se n√£o estiver ativo
            if not raid_detection['in_raid_mode']:
                asyncio.create_task(activate_raid_mode(guild))
        
        # Adicionar √† lista de suspeitos se for suspeito (mesmo sem raid mode)
        if is_suspicious:
            raid_detection['suspicious_users'].add(member.id)
            print(f"‚ö†Ô∏è Usu√°rio suspeito detectado: {member.name} - {suspicion_reason}")
        
        print(f"\n{'='*50}")
        print(f"üì• NOVO MEMBRO DETECTADO: {member.name}")
        print(f"{'='*50}")
        print(f"üîç DEBUG - Configura√ß√µes atuais:")
        print(f"   welcome_config completo: {welcome_config}")
        print(f"   welcome_enabled: {is_on('welcome_enabled')}")
        print(f"   autorole_enabled: {is_on('autorole_enabled')}")
        print(f"   Tipo de welcome_enabled: {type(welcome_config.get('welcome_enabled'))}")
        
        # AUTOROLE - Verifica√ß√£o INTELIGENTE
        if is_on('autorole_enabled'):
            print(f"   ‚úÖ Autorole ATIVADO - Dando cargo...")
            role = member.guild.get_role(AUTOROLE_ID)
            if role:
                await member.add_roles(role)
                print(f"   ‚úÖ Cargo {role.name} adicionado a {member.name}")
            else:
                print(f"   ‚ö†Ô∏è Cargo de autorole n√£o encontrado!")
        else:
            print(f"   ‚ùå Autorole DESATIVADO - Pulando...")
        
        # BOAS-VINDAS - Verifica√ß√£o INTELIGENTE
        print(f"\nüéØ VERIFICANDO TOGGLE DE BOAS-VINDAS...")
        print(f"   Valor de welcome_enabled: {welcome_config.get('welcome_enabled')}")
        print(f"   Condi√ß√£o normalizada: {is_on('welcome_enabled')}")
        
        if is_on('welcome_enabled'):
            print(f"   ‚úÖ TOGGLE ATIVADO - Enviando mensagem de boas-vindas!")
            channel = member.guild.get_channel(WELCOME_CHANNEL_ID)
            if channel:
                embed = discord.Embed(
                    title=f"üéâ BEM-VINDO(A) AO {member.guild.name.upper()}!",
                    description=f"Ol√° {member.mention}! Seja muito bem-vindo(a) ao nosso servidor!\n\nüé≠ Voc√™ agora √© o **membro #{member.guild.member_count}**\n\nüìú Leia as regras e divirta-se!",
                    color=0xFFA500,  # LARANJA
                    timestamp=datetime.now()
                )
                embed.set_thumbnail(url=member.display_avatar.url)
                embed.set_image(url=WELCOME_GIF)
                embed.set_footer(text=f"ID: {member.id} ‚Ä¢ Sistema de Boas-vindas")
                
                await channel.send(embed=embed)
                print(f"   ‚úÖ Boas-vindas enviadas para {member.name}")
            else:
                print(f"   ‚ö†Ô∏è Canal de boas-vindas n√£o encontrado!")
        else:
            print(f"   ‚ùå TOGGLE DESATIVADO - N√ÉO enviando mensagem!")
            print(f"   üéâ Sistema funcionando corretamente - toggle respeitado!")
        
        print(f"{'='*50}\n")
                
    except Exception as e:
        print(f"‚ùå Erro no evento de entrada: {e}")

@bot.event
async def on_member_remove(member):
    """Evento quando algu√©m sai do servidor - CONTROLADO PELO DASHBOARD"""
    try:
        print(f"üì§ Membro saiu: {member.name}")
        print(f"   Estado atual - Goodbye: {is_on('goodbye_enabled')}")
        
        if is_on('goodbye_enabled'):
            print(f"   ‚úÖ Goodbye ATIVADO - Verificando se foi banimento...")
            
            # Verificar se o usu√°rio foi banido (n√£o mostrar mensagem de sa√≠da se foi ban)
            try:
                await member.guild.fetch_ban(member)
                # Se chegou aqui, o usu√°rio foi banido - N√ÉO mostrar mensagem de sa√≠da
                print(f"   üî® {member.name} foi BANIDO - Pulando mensagem de sa√≠da")
                return
            except:
                # Usu√°rio n√£o foi banido, mostrar mensagem de sa√≠da normal
                print(f"   ‚û°Ô∏è {member.name} SAIU (n√£o foi ban) - Enviando mensagem...")
                pass
            
            channel = member.guild.get_channel(GOODBYE_CHANNEL_ID)
            if channel:
                embed = discord.Embed(
                    title=f"üëã {member.name} SAIU DO SERVIDOR",
                    description=f"**{member.name}** saiu do servidor.\n\nüò¢ Esperamos que volte em breve!\n\nüë• Agora temos **{member.guild.member_count} membros**",
                    color=0x3498DB,  # AZUL
                    timestamp=datetime.now()
                )
                embed.set_thumbnail(url=member.display_avatar.url)
                embed.set_image(url=GOODBYE_GIF)
                embed.set_footer(text=f"ID: {member.id} ‚Ä¢ Sistema de Sa√≠da")
                
                await channel.send(embed=embed)
                print(f"   ‚úÖ Mensagem de sa√≠da enviada para {member.name}")
            else:
                print(f"   ‚ö†Ô∏è Canal de sa√≠da n√£o encontrado!")
        else:
            print(f"   ‚ùå Goodbye DESATIVADO - Pulando...")
                
    except Exception as e:
        print(f"‚ùå Erro no evento de sa√≠da: {e}")

# Evita loop de expuls√£o
ALREADY_KICKED = set()

@bot.event
async def on_voice_state_update(member, before, after):
    """Bloqueia bots de entrar em calls protegidas e mostra mensagem de kick"""
    try:
        # Ignorar membros que n√£o est√£o na lista de bots bloqueados
        if member.id not in BLOCKED_BOTS:
            return

        # Ignorar se j√° foi expulso recentemente
        if member.id in ALREADY_KICKED:
            return

        # Verificar se entrou em um canal protegido
        if after.channel and after.channel.id in PROTECTED_VOICE_CHANNELS:
            # Garantir que realmente acabou de entrar
            if before.channel is None or before.channel.id != after.channel.id:
                await asyncio.sleep(0.5)

                try:
                    # Simula um "kick manual" no canal de voz
                    guild = member.guild
                    voice_state = member.voice
                    if voice_state and voice_state.channel:
                        # Remove o bot da call de forma que ele entenda como "kick"
                        await member.edit(voice_channel=None)
                        ALREADY_KICKED.add(member.id)
                        print(f"üö´ Bot {member.name} foi expulso da call {after.channel.name}")

                        # Aguardar 60s antes de liberar o ID novamente (evita loop)
                        await asyncio.sleep(60)
                        ALREADY_KICKED.discard(member.id)

                except Exception as e:
                    print(f"‚ùå Erro ao expulsar bot: {e}")

    except Exception as e:
        print(f"‚ùå Erro no evento de voz: {e}")

@bot.event
async def on_message(message):
    """Sistema de modera√ß√£o autom√°tica COMPLETO + bloqueio de comandos + XP"""
    # Ignorar mensagens do pr√≥prio bot
    if message.author.bot:
        await bot.process_commands(message)
        return
    
    # ========================================
    # SISTEMA DE XP (ESTILO LORITTA)
    # ========================================
    if message.guild:  # S√≥ em servidores
        user_key = f"{message.author.id}_{message.guild.id}"
        current_time = time.time()
        
        # Verifica cooldown (padr√£o 60 segundos)
        if user_key not in xp_cooldowns or current_time - xp_cooldowns[user_key] >= 60:
            xp_cooldowns[user_key] = current_time
            
            # Ganha XP aleat√≥rio entre 15-25 (tipo Loritta)
            xp_gain = random.randint(15, 25)
            result = add_xp(message.author.id, message.guild.id, xp_gain)
            
            # Se subiu de n√≠vel, envia notifica√ß√£o
            if result['level_up']:
                try:
                    # Embed de level up
                    embed = discord.Embed(
                        title="üéâ LEVEL UP!",
                        description=f"Parab√©ns {message.author.mention}!\nVoc√™ subiu para o **N√≠vel {result['new_level']}**! üî•",
                        color=0xff6600
                    )
                    embed.set_thumbnail(url=message.author.display_avatar.url)
                    
                    await message.channel.send(embed=embed, delete_after=10)
                    
                    # Sistema de cargos autom√°ticos por n√≠vel
                    conn = sqlite3.connect('xp_database.db')
                    cursor = conn.cursor()
                    cursor.execute('SELECT role_id FROM level_roles WHERE guild_id = ? AND level = ?', 
                                 (str(message.guild.id), result['new_level']))
                    role_result = cursor.fetchone()
                    conn.close()
                    
                    if role_result:
                        role = message.guild.get_role(int(role_result[0]))
                        if role:
                            await message.author.add_roles(role)
                            print(f'üéñÔ∏è Cargo {role.name} adicionado a {message.author.name} (N√≠vel {result["new_level"]})')
                except Exception as e:
                    print(f'‚ùå Erro ao enviar level up: {e}')
    
    # ========================================
    # RESPOSTA QUANDO O BOT √â MENCIONADO
    # ========================================
    
    # Verificar se o bot foi mencionado diretamente (sem comando)
    if bot.user.mentioned_in(message) and not message.mention_everyone:
        # Remover men√ß√µes do bot da mensagem
        content_without_mentions = message.content.replace(f'<@{bot.user.id}>', '').replace(f'<@!{bot.user.id}>', '').strip()
        
        # S√≥ responde se:
        # 1. N√£o tem nada depois da men√ß√£o OU
        # 2. N√£o come√ßa com ponto (comando) OU
        # 3. N√£o tem outro @mention (tipo .ship @user @user)
        has_command = content_without_mentions.startswith('.')
        has_other_mention = '<@' in content_without_mentions
        
        if not content_without_mentions or (not has_command and not has_other_mention):
            embed = discord.Embed(
                title='üëã Ol√°! Eu sou o CAOS Bot!',
                description=f'Oi **{message.author.mention}**! Precisa de ajuda?\n\n'
                           f'Use o comando **`.help`** para ver todos os meus comandos!',
                color=0xff6600
            )
            embed.set_footer(
                text=f'Prefixo: . (ponto) ‚Ä¢ Digite .help para mais informa√ß√µes',
                icon_url=bot.user.display_avatar.url
            )
            embed.set_thumbnail(url=bot.user.display_avatar.url)
            
            await message.reply(embed=embed)
            return
    
    # ========================================
    # BLOQUEIO DE COMANDOS DE M√öSICA EM CALLS PROTEGIDAS
    # ========================================
    
    music_commands = ['m!p', 'm!play', 'm!join', 'm!summon', 'm!connect']
    message_lower = message.content.lower()
    is_music_command = any(message_lower.startswith(cmd) for cmd in music_commands)
    
    if is_music_command:
        if message.author.voice and message.author.voice.channel:
            voice_channel = message.author.voice.channel
            if voice_channel.id in PROTECTED_VOICE_CHANNELS:
                try:
                    await message.delete()
                    embed = discord.Embed(
                        title="üö´ COMANDO BLOQUEADO",
                        description=f"{message.author.mention}, voc√™ n√£o pode usar comandos de m√∫sica neste canal de voz!",
                        color=0xFF0000
                    )
                    embed.add_field(
                        name="‚ùå Canal Atual",
                        value=f"{voice_channel.mention}\n`Comandos de m√∫sica bloqueados`",
                        inline=True
                    )
                    embed.add_field(
                        name="‚úÖ Use nas Calls de M√∫sica",
                        value="Entre em um canal de m√∫sica para usar o bot!",
                        inline=True
                    )
                    embed.set_footer(text="Sistema de Bloqueio ‚Ä¢ Caos Hub")
                    warning = await message.channel.send(embed=embed)
                    await asyncio.sleep(10)
                    await warning.delete()
                    print(f"üö´ Comando de m√∫sica bloqueado de {message.author.name} no canal {voice_channel.name}")
                    return
                except Exception as e:
                    print(f"‚ùå Erro ao bloquear comando de m√∫sica: {e}")
    
    # ========================================
    # IGNORAR MODERADORES PARA SISTEMAS DE PROTE√á√ÉO
    # ========================================
    
    if message.author.guild_permissions.manage_messages:
        await bot.process_commands(message)
        return
    
    # ========================================
    # SISTEMA ANTI-RAID - DETEC√á√ÉO DE FLOOD GLOBAL
    # ========================================
    
    # Adicionar mensagem ao hist√≥rico global
    raid_detection['recent_messages'].append(time.time())
    
    # Verificar flood de mensagens no servidor
    if await check_message_flood(message.guild):
        if not raid_detection['in_raid_mode']:
            asyncio.create_task(activate_raid_mode(message.guild))
    
    # SE USU√ÅRIO SUSPEITO ENVIAR MENSAGEM EM MODO RAID = BAN
    if raid_detection['in_raid_mode'] and message.author.id in raid_detection['suspicious_users']:
        try:
            await message.author.ban(reason="[ANTI-RAID] Usu√°rio suspeito enviando mensagens durante raid")
            raid_detection['auto_banned'].add(message.author.id)
            raid_detection['suspicious_users'].discard(message.author.id)
            print(f"üö® [ANTI-RAID] Banido: {message.author.name} - Atividade suspeita em raid")
            return
        except:
            pass
    
    # ========================================
    # SISTEMA ANTI-SPAM E ANTI-FLOOD ATIVADO
    # ========================================
    
    user_id = message.author.id
    current_time = time.time()
    content = message.content
    
    # ANTI-MEN√á√ÉO (m√°ximo 1 men√ß√£o)
    mention_count = len(message.raw_mentions) + len(message.raw_role_mentions)
    if mention_count >= 2:
        try:
            await message.delete()
        except:
            pass
        mencoes = []
        for uid in message.raw_mentions:
            mencoes.append(f"<@{uid}>")
        for rid in message.raw_role_mentions:
            mencoes.append(f"<@&{rid}>")
        embed = discord.Embed(
            title="‚ö†Ô∏è EXCESSO DE MEN√á√ïES",
            description=f"**{message.author.display_name}**, voc√™ mencionou **{mention_count}** pessoas/cargos!",
            color=0xff8c00
        )
        embed.add_field(
            name="üìã Regra",
            value=f"**M√°ximo permitido:** 1 men√ß√£o por mensagem\n**Voc√™ mencionou:** {', '.join(mencoes)}",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await message.channel.send(embed=embed, delete_after=10)
        return
    
    # Adicionar ao hist√≥rico
    message_history[user_id].append(content.lower())
    user_message_times[user_id].append(current_time)
    
    # ANTI-SPAM (mensagens id√™nticas)
    if len(message_history[user_id]) >= 3:
        recent_messages = list(message_history[user_id])[-3:]
        if len(set(recent_messages)) == 1:
            await auto_moderate_spam(message, "spam de mensagens id√™nticas", f"Enviou 3 mensagens iguais: '{content[:50]}...'")
            return
    
    # ANTI-FLOOD (muitas mensagens r√°pidas)
    current_warnings = spam_warnings[user_id]
    flood_limit = 5 if current_warnings == 0 else (4 if current_warnings == 1 else 3)
    
    if len(user_message_times[user_id]) >= flood_limit:
        recent_times = list(user_message_times[user_id])[-flood_limit:]
        time_diff = recent_times[-1] - recent_times[0]
        if time_diff < 8:
            await auto_moderate_spam(message, "flood de mensagens", f"Enviou {flood_limit} mensagens em {time_diff:.1f} segundos")
            return
    
    # ANTI-CAPS (excesso de mai√∫sculas)
    if len(content) > 10:
        uppercase_count = sum(1 for c in content if c.isupper())
        total_letters = sum(1 for c in content if c.isalpha())
        if total_letters > 0:
            caps_percentage = (uppercase_count / total_letters) * 100
            if caps_percentage > 70 and total_letters > 15:
                await auto_moderate_spam(message, "excesso de mai√∫sculas", f"Mensagem com {caps_percentage:.1f}% em mai√∫sculas")
                return
    
    # ANTI-MENSAGEM LONGA (m√°ximo 90 caracteres)
    if len(content) > 90:
        await auto_moderate_spam(message, "mensagem muito longa", f"Mensagem com {len(content)} caracteres (m√°ximo: 90)")
        return
    
    # ANTI-EMOJI SPAM
    import re
    emoji_pattern = re.compile(r'[üòÄ-üôèüåÄ-üóøüöÄ-üõø‚òÄ-‚õø‚úÄ-‚ûø]')
    unicode_emojis = len(emoji_pattern.findall(content))
    custom_emojis = content.count('<:') + content.count('<a:')
    total_emojis = unicode_emojis + custom_emojis
    if total_emojis > 10:
        await auto_moderate_spam(message, "spam de emojis", f"Enviou {total_emojis} emojis em uma mensagem")
        return
    
    # ANTI-LINK SPAM
    link_patterns = ['http://', 'https://', 'www.', '.com', '.net', '.org', '.br', '.gg']
    link_count = sum(content.lower().count(pattern) for pattern in link_patterns)
    if link_count > 3:
        await auto_moderate_spam(message, "spam de links", f"Enviou {link_count} links em uma mensagem")
        return
    
    # Processar comandos normalmente
    await bot.process_commands(message)

@bot.event
async def on_member_ban(guild, user):
    """Evento quando algu√©m √© banido"""
    try:
        # Mensagem p√∫blica de ban (se ativado)
        if welcome_config['goodbye_enabled']:
            channel = guild.get_channel(GOODBYE_CHANNEL_ID)
            if channel:
                embed = discord.Embed(
                    title=f"üî® {user.name} FOI BANIDO!",
                    description=f"**{user.name}** foi banido do servidor.\n\n‚öñÔ∏è Justi√ßa foi feita!\n\nüë• Agora temos **{guild.member_count} membros**",
                    color=0xFF0000,  # VERMELHO
                    timestamp=datetime.now()
                )
                embed.set_thumbnail(url=user.display_avatar.url)
                embed.set_image(url=BAN_GIF)
                embed.set_footer(text=f"ID: {user.id} ‚Ä¢ Sistema de Banimento")
                
                await channel.send(embed=embed)
                print(f"üî® Mensagem de ban enviada para {user.name}")
        
        # LOG DETALHADA DE BAN
        log_channel = guild.get_channel(BAN_LOG_CHANNEL_ID)
        if log_channel:
            # Buscar informa√ß√µes do ban
            try:
                ban_info = await guild.fetch_ban(user)
                reason = ban_info.reason or "Nenhum motivo fornecido"
            except:
                reason = "N√£o foi poss√≠vel obter o motivo"
            
            # Buscar quem baniu (audit log)
            moderator = None
            try:
                async for entry in guild.audit_logs(limit=5, action=discord.AuditLogAction.ban):
                    if entry.target.id == user.id:
                        moderator = entry.user
                        break
            except:
                pass
            
            # Criar embed detalhada
            log_embed = discord.Embed(
                title="üî® USU√ÅRIO BANIDO",
                description=f"Um membro foi banido do servidor",
                color=0xFF0000,
                timestamp=datetime.now()
            )
            
            log_embed.add_field(
                name="üë§ Usu√°rio Banido",
                value=f"**Nome:** {user.name}\n**Tag:** {user.mention}\n**ID:** `{user.id}`",
                inline=True
            )
            
            if moderator:
                log_embed.add_field(
                    name="üëÆ Moderador",
                    value=f"**Nome:** {moderator.name}\n**Tag:** {moderator.mention}\n**ID:** `{moderator.id}`",
                    inline=True
                )
            else:
                log_embed.add_field(
                    name="üëÆ Moderador",
                    value="N√£o identificado",
                    inline=True
                )
            
            log_embed.add_field(name="\u200b", value="\u200b", inline=True)
            
            log_embed.add_field(
                name="üìù Motivo",
                value=f"```{reason}```",
                inline=False
            )
            
            log_embed.add_field(
                name="üìä Informa√ß√µes Adicionais",
                value=f"**Conta criada em:** <t:{int(user.created_at.timestamp())}:F>\n**Membros restantes:** {guild.member_count}",
                inline=False
            )
            
            log_embed.set_thumbnail(url=user.display_avatar.url)
            log_embed.set_footer(text=f"Sistema de Logs ‚Ä¢ Ban ID: {user.id}")
            
            await log_channel.send(embed=log_embed)
            print(f"üìã Log de ban registrado para {user.name}")
                
    except Exception as e:
        print(f"‚ùå Erro no evento de ban: {e}")

# ========================================
# COMANDOS DE CONVERSA
# ========================================

@bot.command(name='oi')
async def oi_command(ctx):
    saudacoes = [
        'Oi! Como voc√™ est√°? üòä',
        'Ol√°! Tudo bem? üëã',
        'E a√≠! Beleza? ü§ó',
        'Oi oi! Como foi seu dia? ‚ú®',
        'Salve! Tudo certo? üî•'
    ]
    resposta = random.choice(saudacoes)
    
    embed = discord.Embed(
        title="üëã Ol√°!",
        description=resposta,
        color=0x00ff88
    )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='comoesta')
async def comoesta_command(ctx, usuario: discord.Member = None):
    if usuario:
        embed = discord.Embed(
            title="ü§î Como voc√™ est√°?",
            description=f'{usuario.mention}, como voc√™ est√° hoje?',
            color=0x87ceeb
        )
    else:
        embed = discord.Embed(
            title="ü§î Como voc√™ est√°?",
            description='Como voc√™ est√° hoje?',
            color=0x87ceeb
        )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='conversa')
async def conversa_command(ctx):
    topicos = [
        'Qual foi a melhor parte do seu dia hoje?',
        'Se voc√™ pudesse ter qualquer superpoder, qual seria?',
        'Qual √© sua comida favorita?',
        'Voc√™ prefere praia ou montanha?',
        'Qual filme voc√™ assistiria mil vezes?',
        'Se voc√™ pudesse viajar para qualquer lugar, onde seria?',
        'Qual √© sua m√∫sica favorita no momento?',
        'Voc√™ √© mais de acordar cedo ou dormir tarde?',
        'Qual √© seu hobby favorito?',
        'Se voc√™ pudesse jantar com qualquer pessoa, quem seria?'
    ]
    topico = random.choice(topicos)
    
    embed = discord.Embed(
        title="üí≠ T√≥pico de Conversa",
        description=topico,
        color=0xff69b4
    )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='clima')
async def clima_command(ctx):
    perguntas = [
        'Como est√° seu humor hoje? üòä',
        'Que energia voc√™ est√° sentindo hoje? ‚ö°',
        'Como voc√™ descreveria seu dia em uma palavra? üí≠',
        'Est√° se sentindo bem hoje? üòå',
        'Qual √© seu mood de hoje? üé≠'
    ]
    pergunta = random.choice(perguntas)
    
    embed = discord.Embed(
        title="üå§Ô∏è Como est√° seu clima?",
        description=pergunta,
        color=0xffd700
    )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='tchau')
async def tchau_command(ctx):
    despedidas = [
        'Tchau! Foi √≥timo conversar com voc√™! üëã',
        'At√© mais! Cuide-se! üòä',
        'Falou! Volte sempre! ü§ó',
        'Tchau tchau! Tenha um √≥timo dia! ‚òÄÔ∏è',
        'At√© a pr√≥xima! üëã‚ú®'
    ]
    despedida = random.choice(despedidas)
    
    embed = discord.Embed(
        title="üëã Tchau!",
        description=despedida,
        color=0xff6b6b
    )
    embed.set_footer(text="Comandos de Conversa ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

# ========================================
# COMANDOS DE INTERA√á√ÉO SOCIAL COM GIFS
# ========================================

# GIFs de anime (URLs diretas)
INTERACTION_GIFS = {
    'kiss': [
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMGduOG9wamdxanplenNxaG56dWQ3azdnaXlndGpoMnlndHBtYnE0MyZlcD12MV9naWZzX3NlYXJjaCZjdD1n/FqBTvSNjNzeZG/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMGduOG9wamdxanplenNxaG56dWQ3azdnaXlndGpoMnlndHBtYnE0MyZlcD12MV9naWZzX3NlYXJjaCZjdD1n/MQVpBqASxSlFu/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMGduOG9wamdxanplenNxaG56dWQ3azdnaXlndGpoMnlndHBtYnE0MyZlcD12MV9naWZzX3NlYXJjaCZjdD1n/f82EqBTeCEgcU/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMGduOG9wamdxanplenNxaG56dWQ3azdnaXlndGpoMnlndHBtYnE0MyZlcD12MV9naWZzX3NlYXJjaCZjdD1n/jR22gdcPiOLaE/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMGduOG9wamdxanplenNxaG56dWQ3azdnaXlndGpoMnlndHBtYnE0MyZlcD12MV9naWZzX3NlYXJjaCZjdD1n/gTLfgIRwAiWOc/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPWVjZjA1ZTQ3MTNoeG5oZmJxd3NxZXZ5Y3ZhNHJjM2NlaDV1dmIydGVtaDVidDdqcSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/kU586ictpGb0Q/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPWVjZjA1ZTQ3MTNoeG5oZmJxd3NxZXZ5Y3ZhNHJjM2NlaDV1dmIydGVtaDVidDdqcSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/12VXIxKaIEarL2/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPWVjZjA1ZTQ3MTNoeG5oZmJxd3NxZXZ5Y3ZhNHJjM2NlaDV1dmIydGVtaDVidDdqcSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/nyGFcsP0kAobm/giphy.gif'
    ],
    'hug': [
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2NocHBpNXA4enpkYWdpM21raGc3aTFoOTlwYW52aTE1bjVxbGNpNiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/lrr9rHuoJOE0w/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2NocHBpNXA4enpkYWdpM21raGc3aTFoOTlwYW52aTE1bjVxbGNpNiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/49mdjsMrH7oze/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2NocHBpNXA4enpkYWdpM21raGc3aTFoOTlwYW52aTE1bjVxbGNpNiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/QFPoctlgZ5s0E/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2NocHBpNXA4enpkYWdpM21raGc3aTFoOTlwYW52aTE1bjVxbGNpNiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/PHZ7v9tfQu0o0/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2NocHBpNXA4enpkYWdpM21raGc3aTFoOTlwYW52aTE1bjVxbGNpNiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/lrr9rHuoJOE0w/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2NocHBpNXA4enpkYWdpM21raGc3aTFoOTlwYW52aTE1bjVxbGNpNiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/3bqtLDeiDtwhq/giphy.gif'
    ],
    'pat': [
        'https://media.tenor.com/FfEFgdPyCiYAAAAM/anime-pat.gif',
        'https://media.tenor.com/0Vj7hAId-KAAAAAC/anime-head-pat.gif',
        'https://media.tenor.com/5BIdXYCQqoMAAAAM/anime-head-pat.gif',
        'https://media.tenor.com/Q_sRzVhk52oAAAAM/anime-pat.gif',
        'https://media.tenor.com/r7RmEPHqyYwAAAAM/anime-pat.gif'
    ],
    'slap': [
        'https://media.tenor.com/BL8rTuNo_PMAAAAM/anime-slap.gif',
        'https://media.tenor.com/3Z8qVUHYZsoAAAAM/slap-anime.gif',
        'https://media.tenor.com/KNVh7dVgZhwAAAAM/anime-slap.gif',
        'https://media.tenor.com/xuMDM4tVuzAAAAAM/slap.gif',
        'https://media.tenor.com/yzHM6lBABd4AAAAM/bofetada-tapa.gif'
    ],
    'dance': [
        'https://media.tenor.com/ZdA1pYcKVe0AAAAM/anime-dance.gif',
        'https://media.tenor.com/EqQu9kXqLU0AAAAM/anime-dancing.gif',
        'https://media.tenor.com/7M-f2D_1KBAAAM/dance-anime.gif',
        'https://media.tenor.com/TpG8XnG8sHIAAAAM/anime-dance.gif',
        'https://media.tenor.com/BcvbWdzCFw0AAAAM/anime-dance.gif'
    ],
    'cry': [
        'https://media.tenor.com/8BaUXZUWnL4AAAAM/anime-cry.gif',
        'https://media.tenor.com/uNb8A2me1gUAAAAM/cry-anime.gif',
        'https://media.tenor.com/M4bsP1-8cfsAAAAM/cry-anime.gif',
        'https://media.tenor.com/YnCOBP2M3EQAAAAM/anime-crying.gif',
        'https://media.tenor.com/2X8LLmZMAnUAAAAM/anime-cry.gif'
    ]
}


# ========================================
# VIEWS COM BOT√ïES DE RETRIBUIR
# ========================================

class RetribuirView(discord.ui.View):
    def __init__(self, author, target, action_type, timeout=60):
        super().__init__(timeout=timeout)
        self.author = author  # Quem enviou o comando
        self.target = target  # Quem recebeu
        self.action_type = action_type  # 'kiss', 'hug', 'pat', etc
        self.message = None
    
    @discord.ui.button(label="üíù Retribuir", style=discord.ButtonStyle.success, custom_id="retribuir_button")
    async def retribuir_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # S√≥ o alvo pode retribuir
        if interaction.user.id != self.target.id:
            await interaction.response.send_message(
                "‚ùå S√≥ quem recebeu pode retribuir!",
                ephemeral=True
            )
            return
        
        # Desabilita o bot√£o
        button.disabled = True
        button.label = "‚úÖ Retribu√≠do"
        await interaction.message.edit(view=self)
        
        # Retribui a a√ß√£o
        gif = random.choice(INTERACTION_GIFS[self.action_type])
        
        if self.action_type == 'kiss':
            mensagens = [
                f'üíã **{self.target.mention}** retribuiu o beijo em **{self.author.mention}**!',
                f'üòò **{self.target.mention}** beijou **{self.author.mention}** de volta!',
                f'üíï **{self.target.mention}** correspondeu o beijo de **{self.author.mention}**!',
                f'‚ù§Ô∏è **{self.target.mention}** n√£o resistiu e beijou **{self.author.mention}** tamb√©m!'
            ]
            titulo = 'üíã Beijo Retribu√≠do'
            cor = 0xff1493
        
        elif self.action_type == 'hug':
            mensagens = [
                f'ü§ó **{self.target.mention}** retribuiu o abra√ßo em **{self.author.mention}**!',
                f'ü´Ç **{self.target.mention}** abra√ßou **{self.author.mention}** de volta!',
                f'üíõ **{self.target.mention}** correspondeu o abra√ßo de **{self.author.mention}**!',
                f'‚ú® **{self.target.mention}** abra√ßou **{self.author.mention}** tamb√©m!'
            ]
            titulo = 'ü§ó Abra√ßo Retribu√≠do'
            cor = 0xffd700
        
        elif self.action_type == 'pat':
            mensagens = [
                f'üòä **{self.target.mention}** retribuiu o carinho em **{self.author.mention}**!',
                f'ü•∞ **{self.target.mention}** acariciou **{self.author.mention}** de volta!',
                f'üíï **{self.target.mention}** correspondeu o carinho de **{self.author.mention}**!',
                f'‚ú® **{self.target.mention}** fez carinho em **{self.author.mention}** tamb√©m!'
            ]
            titulo = 'üòä Carinho Retribu√≠do'
            cor = 0x87ceeb
        
        else:
            mensagens = [f'‚ù§Ô∏è **{self.target.mention}** retribuiu a a√ß√£o!']
            titulo = 'üíù Retribu√≠do'
            cor = 0xff69b4
        
        mensagem = random.choice(mensagens)
        
        embed = discord.Embed(
            title=titulo,
            description=mensagem,
            color=cor
        )
        embed.set_image(url=gif)
        embed.set_footer(
            text=f'Retribu√≠do por {self.target.name} ‚Ä¢ {datetime.now().strftime("%H:%M")}',
            icon_url=self.target.display_avatar.url
        )
        
        await interaction.response.send_message(embed=embed)
    
    async def on_timeout(self):
        # Desabilita o bot√£o quando expirar
        for item in self.children:
            item.disabled = True
        
        if self.message:
            try:
                await self.message.edit(view=self)
            except:
                pass

@bot.command(name='beijar')
async def beijar_command(ctx, usuario: discord.Member = None):
    if not usuario:
        embed = discord.Embed(
            title='‚ùå Erro no Comando',
            description='Voc√™ precisa mencionar algu√©m para beijar!\n\n**Exemplo:**\n`.beijar @user`',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.id == ctx.author.id:
        embed = discord.Embed(
            title='üòÖ Ops!',
            description='Voc√™ n√£o pode beijar a si mesmo!\n*Tente beijar outra pessoa...*',
            color=0xffa500
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.bot:
        embed = discord.Embed(
            title='ü§ñ Erro',
            description='Voc√™ n√£o pode beijar um bot!\n*Bots n√£o t√™m sentimentos...*',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    # Mensagens aleat√≥rias
    mensagens = [
        f'üíã **{ctx.author.mention}** deu um beijo em **{usuario.mention}**!',
        f'üòò **{ctx.author.mention}** beijou **{usuario.mention}** de forma rom√¢ntica!',
        f'üíï **{ctx.author.mention}** roubou um beijo de **{usuario.mention}**!',
        f'üòç **{ctx.author.mention}** beijou **{usuario.mention}** apaixonadamente!',
        f'‚ù§Ô∏è **{ctx.author.mention}** deu um beijinho em **{usuario.mention}**!',
        f'üíñ **{ctx.author.mention}** surpreendeu **{usuario.mention}** com um beijo!',
        f'üåπ **{ctx.author.mention}** beijou os l√°bios de **{usuario.mention}**!',
        f'üíù **{ctx.author.mention}** selou os l√°bios de **{usuario.mention}** com um beijo!',
        f'‚ú® **{ctx.author.mention}** deu um beijo m√°gico em **{usuario.mention}**!',
        f'üéÄ **{ctx.author.mention}** encheu **{usuario.mention}** de beijos!',
        f'üíê **{ctx.author.mention}** presenteou **{usuario.mention}** com um beijo!',
        f'ü¶ã **{ctx.author.mention}** deu um beijo delicado em **{usuario.mention}**!',
        f'üå∫ **{ctx.author.mention}** beijou **{usuario.mention}** com paix√£o!'
    ]
    
    reacoes = [
        "Que momento rom√¢ntico! üíï",
        "O amor est√° no ar! ‚ù§Ô∏è",
        "Shippo muito! üíñ",
        "Que casal lindo! üòç",
        "Ahhh que fofo! ü•∞",
        "Meu cora√ß√£o! üíó",
        "Amo esse casal! üíù",
        "Que beijo perfeito! üíã",
        "T√¥ morrendo de amor! üíò",
        "Casem logo! üíç"
    ]
    
    gif = random.choice(INTERACTION_GIFS['kiss'])
    mensagem = random.choice(mensagens)
    reacao = random.choice(reacoes)
    
    embed = discord.Embed(
        title='üíã Beijo Rom√¢ntico',
        description=mensagem,
        color=0xff1493
    )
    embed.add_field(
        name='üíï Rea√ß√£o',
        value=reacao,
        inline=False
    )
    embed.set_image(url=gif)
    embed.set_footer(
        text=f'Comando usado por {ctx.author.name} ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    # Criar view com bot√£o de retribuir
    view = RetribuirView(ctx.author, usuario, 'kiss', timeout=60)
    message = await ctx.reply(embed=embed, view=view)
    view.message = message

@bot.command(name='abracar')
async def abracar_command(ctx, usuario: discord.Member = None):
    if not usuario:
        embed = discord.Embed(
            title='‚ùå Erro no Comando',
            description='Voc√™ precisa mencionar algu√©m para abra√ßar!\n\n**Exemplo:**\n`.abracar @user`',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.id == ctx.author.id:
        embed = discord.Embed(
            title='ü§ó Auto-Abra√ßo',
            description='Voc√™ se abra√ßou sozinho...\n*√Äs vezes precisamos de carinho pr√≥prio!*',
            color=0xffa500
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.bot:
        embed = discord.Embed(
            title='ü§ñ Erro',
            description='Bots n√£o podem ser abra√ßados!\n*Mas eles agradecem a inten√ß√£o!*',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    mensagens = [
        f'ü§ó **{ctx.author.mention}** deu um abra√ßo apertado em **{usuario.mention}**!',
        f'ü´Ç **{ctx.author.mention}** abra√ßou **{usuario.mention}** carinhosamente!',
        f'üíõ **{ctx.author.mention}** envolveu **{usuario.mention}** em um abra√ßo caloroso!',
        f'ü§ó **{ctx.author.mention}** deu um abra√ßo de urso em **{usuario.mention}**!',
        f'‚ú® **{ctx.author.mention}** abra√ßou **{usuario.mention}** com muito carinho!',
        f'üí´ **{ctx.author.mention}** deu um abra√ßo reconfortante em **{usuario.mention}**!',
        f'üåü **{ctx.author.mention}** abra√ßou **{usuario.mention}** com todo amor!',
        f'üíù **{ctx.author.mention}** deu um abra√ßo protetor em **{usuario.mention}**!',
        f'üéÄ **{ctx.author.mention}** abra√ßou **{usuario.mention}** fortemente!',
        f'üåà **{ctx.author.mention}** envolveu **{usuario.mention}** em um abra√ßo acolhedor!',
        f'ü¶ã **{ctx.author.mention}** abra√ßou **{usuario.mention}** com ternura!',
        f'üå∏ **{ctx.author.mention}** deu um super abra√ßo em **{usuario.mention}**!'
    ]
    
    sentimentos = [
        "Que abra√ßo aconchegante! ü•∞",
        "Abra√ßo que aquece o cora√ß√£o! ‚ù§Ô∏è",
        "Amizade verdadeira! üíõ",
        "Que momento lindo! ‚ú®",
        "Abra√ßos curam tudo! üí´",
        "Que carinho! ü§ó",
        "Energia positiva! ‚ö°",
        "Abra√ßo que reconforta! üíù",
        "Que fofura! ü•∫",
        "Abra√ßo perfeito! üåü"
    ]
    
    gif = random.choice(INTERACTION_GIFS['hug'])
    mensagem = random.choice(mensagens)
    sentimento = random.choice(sentimentos)
    
    embed = discord.Embed(
        title='ü§ó Abra√ßo Carinhoso',
        description=mensagem,
        color=0xffd700
    )
    embed.add_field(
        name='üíõ Sentimento',
        value=sentimento,
        inline=False
    )
    embed.set_image(url=gif)
    embed.set_footer(
        text=f'Comando usado por {ctx.author.name} ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    # Criar view com bot√£o de retribuir
    view = RetribuirView(ctx.author, usuario, 'hug', timeout=60)
    message = await ctx.reply(embed=embed, view=view)
    view.message = message

@bot.command(name='acariciar')
async def acariciar_command(ctx, usuario: discord.Member = None):
    if not usuario:
        embed = discord.Embed(
            title='‚ùå Erro no Comando',
            description='Voc√™ precisa mencionar algu√©m para acariciar!\n\n**Exemplo:**\n`.acariciar @user`',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.id == ctx.author.id:
        embed = discord.Embed(
            title='üòå Auto-Carinho',
            description='Voc√™ faz carinho em si mesmo...\n*Self-care √© importante!*',
            color=0xffa500
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.bot:
        embed = discord.Embed(
            title='ü§ñ Erro',
            description='Bots n√£o sentem carinhos!\n*Mas obrigado pela gentileza!*',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    mensagens = [
        f'üòä **{ctx.author.mention}** acariciou a cabe√ßa de **{usuario.mention}**!',
        f'ü•∞ **{ctx.author.mention}** fez um carinho em **{usuario.mention}**!',
        f'‚ú® **{ctx.author.mention}** deu head pat em **{usuario.mention}**!',
        f'üíï **{ctx.author.mention}** acariciou **{usuario.mention}** gentilmente!',
        f'üå∏ **{ctx.author.mention}** fez cafun√© em **{usuario.mention}**!',
        f'üòå **{ctx.author.mention}** acariciou **{usuario.mention}** com carinho!',
        f'üéÄ **{ctx.author.mention}** passou a m√£o na cabe√ßa de **{usuario.mention}**!',
        f'üí´ **{ctx.author.mention}** deu um carinho delicado em **{usuario.mention}**!',
        f'üå∫ **{ctx.author.mention}** acariciou **{usuario.mention}** suavemente!',
        f'ü¶ã **{ctx.author.mention}** fez um carinho relaxante em **{usuario.mention}**!',
        f'üå∑ **{ctx.author.mention}** mimou **{usuario.mention}** com carinhos!',
        f'üåº **{ctx.author.mention}** deu head pats em **{usuario.mention}**!'
    ]
    
    efeitos = [
        "Que relaxante! üòå",
        "Carinho gostoso! ü•∞",
        "T√£o fofo! üíï",
        "Que del√≠cia! ‚ú®",
        "Carinho que acalma! üí´",
        "Que mimo! üå∏",
        "Terap√™utico! üíÜ",
        "Carinho perfeito! üéÄ",
        "Que gentileza! üå∫",
        "Adorei! üòä"
    ]
    
    gif = random.choice(INTERACTION_GIFS['pat'])
    mensagem = random.choice(mensagens)
    efeito = random.choice(efeitos)
    
    embed = discord.Embed(
        title='üòä Carinho Gentil',
        description=mensagem,
        color=0x87ceeb
    )
    embed.add_field(
        name='üíï Efeito',
        value=efeito,
        inline=False
    )
    embed.set_image(url=gif)
    embed.set_footer(
        text=f'Comando usado por {ctx.author.name} ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    # Criar view com bot√£o de retribuir
    view = RetribuirView(ctx.author, usuario, 'pat', timeout=60)
    message = await ctx.reply(embed=embed, view=view)
    view.message = message

@bot.command(name='tapa')
async def tapa_command(ctx, usuario: discord.Member = None):
    if not usuario:
        embed = discord.Embed(
            title='‚ùå Erro no Comando',
            description='Voc√™ precisa mencionar algu√©m para dar um tapa!\n\n**Exemplo:**\n`.tapa @user`',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.id == ctx.author.id:
        embed = discord.Embed(
            title='ü§ï Auto-Tapa',
            description='Voc√™ se deu um tapa... Por qu√™?!\n*Isso deve ter do√≠do!*',
            color=0xffa500
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.bot:
        embed = discord.Embed(
            title='ü§ñ Erro',
            description='N√£o bata em bots!\n*Eles s√£o inocentes!*',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    mensagens = [
        f'üëã **{ctx.author.mention}** deu um tapa na cara de **{usuario.mention}**!',
        f'üí• **{ctx.author.mention}** acertou um tap√£o monumental em **{usuario.mention}**!',
        f'‚úã **{ctx.author.mention}** esfregou a m√£o na cara de **{usuario.mention}**!',
        f'üò§ **{ctx.author.mention}** deu uma bela palmada em **{usuario.mention}**!',
        f'üî• **{ctx.author.mention}** mandou um tapa √©pico em **{usuario.mention}**!',
        f'üí¢ **{ctx.author.mention}** n√£o perdoou e tapou **{usuario.mention}**!',
        f'‚ö° **{ctx.author.mention}** deu um tapa que ecoou no servidor em **{usuario.mention}**!',
        f'üí´ **{ctx.author.mention}** acertou um super tapa em **{usuario.mention}**!',
        f'üå™Ô∏è **{ctx.author.mention}** mandou ver na cara de **{usuario.mention}**!',
        f'üí™ **{ctx.author.mention}** mostrou quem manda com um tapa em **{usuario.mention}**!'
    ]
    
    reacoes = [
        "Isso deve ter do√≠do!",
        "Que tapa sonoro!",
        "Ouvi o barulho daqui!",
        "Eita! Sem d√≥ nem piedade!",
        "RIP a dignidade...",
        "Marcou at√©!",
        "Acho que acordou os vizinhos!",
        "Algu√©m chame a ambul√¢ncia!",
        "Voou at√©!",
        "Que pancada!"
    ]
    
    gif = random.choice(INTERACTION_GIFS['slap'])
    mensagem = random.choice(mensagens)
    reacao = random.choice(reacoes)
    
    embed = discord.Embed(
        title='üëã Tapa √âpico',
        description=mensagem,
        color=0xff4444
    )
    embed.add_field(
        name='üí• Rea√ß√£o',
        value=reacao,
        inline=False
    )
    embed.set_image(url=gif)
    embed.set_footer(
        text=f'Comando usado por {ctx.author.name} ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    await ctx.reply(embed=embed)

@bot.command(name='dancar')
async def dancar_command(ctx, usuario: discord.Member = None):
    gif = random.choice(INTERACTION_GIFS['dance'])
    
    if usuario:
        if usuario.id == ctx.author.id:
            embed = discord.Embed(
                title='üíÉ Dan√ßa Solo',
                description=f'**{ctx.author.mention}** est√° dan√ßando sozinho como se ningu√©m estivesse olhando!\n*Que show!*',
                color=0x9b59b6
            )
        elif usuario.bot:
            embed = discord.Embed(
                title='ü§ñ Erro',
                description='Bots n√£o dan√ßam!\n*Mas seria legal se dan√ßassem...*',
                color=0xff0000
            )
            await ctx.reply(embed=embed)
            return
        else:
            mensagens = [
                f'üíÉ **{ctx.author.mention}** est√° dan√ßando com **{usuario.mention}**!',
                f'üï∫ **{ctx.author.mention}** e **{usuario.mention}** est√£o arrasando na pista!',
                f'‚ú® **{ctx.author.mention}** chamou **{usuario.mention}** para dan√ßar!',
                f'üéµ **{ctx.author.mention}** e **{usuario.mention}** dan√ßam sincronizados!',
                f'üåü Que dupla incr√≠vel! **{ctx.author.mention}** e **{usuario.mention}** mandando ver!',
                f'üí´ **{ctx.author.mention}** rodou **{usuario.mention}** na pista de dan√ßa!'
            ]
            mensagem = random.choice(mensagens)
            embed = discord.Embed(
                title='üíÉ Dan√ßa em Dupla',
                description=mensagem,
                color=0x9b59b6
            )
    else:
        mensagens_solo = [
            f'üíÉ **{ctx.author.mention}** est√° dan√ßando sozinho!',
            f'üï∫ **{ctx.author.mention}** mandou ver nos passos!',
            f'‚ú® **{ctx.author.mention}** est√° arrasando na pista!',
            f'üéµ **{ctx.author.mention}** dan√ßando como se ningu√©m estivesse olhando!',
            f'üåü **{ctx.author.mention}** est√° fazendo um show solo!',
            f'üí´ Que performance! **{ctx.author.mention}** dan√ßando demais!',
            f'üé™ **{ctx.author.mention}** est√° quebrando tudo na pista!',
            f'üî• **{ctx.author.mention}** est√° dan√ßando pra caramba!',
            f'‚ö° **{ctx.author.mention}** mostrando seus melhores passos!',
            f'üåà **{ctx.author.mention}** est√° se divertindo muito!'
        ]
        
        comentarios = [
            "Que energia incr√≠vel!",
            "Arrasou nos passos!",
            "T√° pegando fogo!",
            "Show de performance!",
            "Que talento!",
            "A pista √© sua!",
            "Que ritmo maravilhoso!",
            "Est√° no flow!",
            "Mandou muito bem!",
            "Isso √© arte!"
        ]
        
        mensagem = random.choice(mensagens_solo)
        comentario = random.choice(comentarios)
        
        embed = discord.Embed(
            title='üíÉ Dan√ßa Solo',
            description=mensagem,
            color=0x9b59b6
        )
        embed.add_field(
            name='üé≠ Performance',
            value=comentario,
            inline=False
        )
    
    embed.set_image(url=gif)
    embed.set_footer(
        text=f'Comando usado por {ctx.author.name} ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    await ctx.reply(embed=embed)

@bot.command(name='chorar')
async def chorar_command(ctx):
    mensagens = [
        f'üò≠ **{ctx.author.mention}** est√° chorando muito...',
        f'üíß **{ctx.author.mention}** n√£o aguenta mais e chora...',
        f'üò¢ As l√°grimas de **{ctx.author.mention}** n√£o param de cair...',
        f'üòø **{ctx.author.mention}** est√° chorando copiosamente...',
        f'üíî **{ctx.author.mention}** chora de tristeza...',
        f'ü•∫ **{ctx.author.mention}** soltou as l√°grimas...',
        f'üò≠ **{ctx.author.mention}** est√° em prantos...',
        f'üíß **{ctx.author.mention}** chora sem parar...',
        f'üò¢ **{ctx.author.mention}** est√° muito emocionado...',
        f'üåßÔ∏è **{ctx.author.mention}** derramou l√°grimas...'
    ]
    
    motivos = [
        "Parece que est√° triste hoje...",
        "Algo n√£o est√° bem...",
        "O dia est√° dif√≠cil...",
        "Est√° precisando de apoio...",
        "Momento de desabafo...",
        "Deixa chorar, faz bem...",
        "√Äs vezes precisamos extravasar...",
        "Um abra√ßo resolve...",
        "Console essa pessoa!",
        "Est√° precisando de carinho..."
    ]
    
    gif = random.choice(INTERACTION_GIFS['cry'])
    mensagem = random.choice(mensagens)
    motivo = random.choice(motivos)
    
    embed = discord.Embed(
        title='üò≠ Momento Triste',
        description=mensagem,
        color=0x5865f2
    )
    embed.add_field(
        name='üí≠ Situa√ß√£o',
        value=motivo,
        inline=False
    )
    embed.add_field(
        name='üíù Apoio',
        value='Envie um abra√ßo ou carinho para essa pessoa! Use `.abracar` ou `.acariciar`',
        inline=False
    )
    embed.set_image(url=gif)
    embed.set_footer(
        text=f'Comando usado por {ctx.author.name} ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    await ctx.reply(embed=embed)


@bot.command(name='ship')
async def ship_command(ctx, user1: discord.Member = None, user2: discord.Member = None):
    if not user1 or not user2:
        embed = discord.Embed(
            title='‚ùå Erro no Comando',
            description='Voc√™ precisa mencionar 2 pessoas!\n\n**Exemplo:**\n`.ship @user1 @user2`',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if user1.bot or user2.bot:
        embed = discord.Embed(
            title='ü§ñ Erro',
            description='N√£o d√° pra shipar bots!\n*Eles n√£o t√™m sentimentos rom√¢nticos!*',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if user1.id == user2.id:
        embed = discord.Embed(
            title='üòÖ Narcisismo Detected',
            description=f'**{user1.mention}** n√£o pode ser shipado consigo mesmo!\n*Mas o amor pr√≥prio √© importante!* ‚ù§Ô∏è',
            color=0xffa500
        )
        await ctx.reply(embed=embed)
        return
    
    # Calcula porcentagem de ship (baseado em IDs para ser consistente)
    ship_value = (user1.id + user2.id) % 101
    
    # Nome do ship (jun√ß√£o dos nomes)
    name1 = user1.display_name[:len(user1.display_name)//2]
    name2 = user2.display_name[len(user2.display_name)//2:]
    ship_name = f"{name1}{name2}"
    
    # Barra de progresso visual
    filled = '‚ù§Ô∏è' * (ship_value // 10)
    empty = 'üñ§' * (10 - ship_value // 10)
    bar = filled + empty
    
    # Mensagem baseada na porcentagem com mais variedade
    if ship_value >= 90:
        emoji = "üíï"
        message = "PERFEI√á√ÉO ABSOLUTA! Casal do ano! Casem logo!"
        cor = 0xff1493  # Pink forte
    elif ship_value >= 75:
        emoji = "üíñ"
        message = "Extremamente compat√≠veis! Isso vai dar certo!"
        cor = 0xff69b4  # Pink m√©dio
    elif ship_value >= 60:
        emoji = "üíó"
        message = "Muito compat√≠veis! Vale a pena tentar!"
        cor = 0xffc0cb  # Pink claro
    elif ship_value >= 45:
        emoji = "üíõ"
        message = "Pode dar certo! Precisam se conhecer melhor!"
        cor = 0xffd700  # Dourado
    elif ship_value >= 30:
        emoji = "üíô"
        message = "Quem sabe com um pouco de esfor√ßo..."
        cor = 0x87ceeb  # Azul claro
    elif ship_value >= 15:
        emoji = "üíö"
        message = "Improv√°vel... Mas milagres acontecem!"
        cor = 0x90ee90  # Verde claro
    else:
        emoji = "üíî"
        message = "P√©ssimo! Melhor serem apenas amigos..."
        cor = 0x808080  # Cinza
    
    embed = discord.Embed(
        title=f'üíò SHIPAGEM: {ship_name.upper()}',
        description=f'**{user1.display_name}** {emoji} **{user2.display_name}**',
        color=cor
    )
    
    embed.add_field(
        name='üìä Compatibilidade',
        value=f'{bar}\n**{ship_value}%**',
        inline=False
    )
    
    embed.add_field(
        name='üí¨ Resultado',
        value=message,
        inline=False
    )
    
    # Adiciona "curiosidades" aleat√≥rias
    curiosidades = [
        "üé≠ Opostos se atraem!",
        "üåü A qu√≠mica √© evidente!",
        "üî• Que casal quente!",
        "‚ùÑÔ∏è Clima de frieza...",
        "‚ö° A energia entre voc√™s √© incr√≠vel!",
        "üåà Amor colorido!",
        "üí´ Conex√£o c√≥smica!",
        "üé™ Que palha√ßada seria esse relacionamento!",
        "üé® Voc√™s se complementam perfeitamente!",
        "üéµ Em harmonia total!"
    ]
    
    if ship_value >= 50:
        curiosidade = random.choice([c for c in curiosidades if not "frieza" in c.lower() and not "palha√ßada" in c.lower()])
    else:
        curiosidade = random.choice(curiosidades)
    
    embed.add_field(
        name='‚ú® An√°lise',
        value=curiosidade,
        inline=False
    )
    
    embed.set_footer(
        text=f'Ship feito por {ctx.author.name} ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    # Enviar embed (sem imagem)
    await ctx.reply(embed=embed)

# ========================================
# COMANDOS DE ZOEIRA PESADA
# ========================================

@bot.command(name='vaitomarnocu')
async def vaitomarnocu_command(ctx, usuario: discord.Member = None):
    if not usuario:
        await ctx.reply('‚ùå Menciona algu√©m pra xingar, oras!')
        return
    
    if usuario.id == ctx.author.id:
        await ctx.reply('ü§° Quer xingar voc√™ mesmo? Procure ajuda profissional!')
        return
    
    if usuario.bot:
        await ctx.reply('ü§ñ Deixa os bots em paz, eles s√≥ fazem o trabalho deles!')
        return
    
    xingamentos = [
        f'üñï **{ctx.author.mention}** mandou **{usuario.mention}** tomar no cu!',
        f'üí¢ **{ctx.author.mention}** disse: **{usuario.mention}**, vai se fuder!',
        f'üò§ **{ctx.author.mention}** falou pra **{usuario.mention}** ir pra pqp!',
        f'üî• **{ctx.author.mention}** mandou **{usuario.mention}** √† merda!',
        f'üíÄ **{ctx.author.mention}** disse: **{usuario.mention}**, vai catar coquinho!',
        f'‚ö° **{ctx.author.mention}** mandou **{usuario.mention}** se foder!',
        f'üëä **{ctx.author.mention}** disse: **{usuario.mention}**, vai tomar no olho do seu cu!',
        f'üí• **{ctx.author.mention}** mandou **{usuario.mention}** pra casa do caralho!',
        f'üå™Ô∏è **{ctx.author.mention}** falou: **{usuario.mention}**, vai se lascar!',
        f'üî® **{ctx.author.mention}** disse: **{usuario.mention}**, vai pra puta que pariu!',
        f'üí£ **{ctx.author.mention}** mandou **{usuario.mention}** pra aquele lugar!',
        f'üéØ **{ctx.author.mention}** disse: **{usuario.mention}**, vai mamar!',
        f'‚õàÔ∏è **{ctx.author.mention}** falou: **{usuario.mention}**, vai pro inferno!',
        f'üåã **{ctx.author.mention}** mandou **{usuario.mention}** tomar no centro do cu!',
        f'üí® **{ctx.author.mention}** disse: **{usuario.mention}**, vai chupar um canavial!',
        f'üó°Ô∏è **{ctx.author.mention}** mandou **{usuario.mention}** pra casa do caralho de asas!',
        f'‚öîÔ∏è **{ctx.author.mention}** disse: **{usuario.mention}**, vai pastar!',
        f'üî™ **{ctx.author.mention}** falou: **{usuario.mention}**, vai se ferrar na esquina!',
        f'üí¢ **{ctx.author.mention}** mandou **{usuario.mention}** enfiar o dedo no cu e rodar!',
        f'üé≠ **{ctx.author.mention}** disse: **{usuario.mention}**, vai pro caralho que te pariu!'
    ]
    
    mensagem = random.choice(xingamentos)
    
    embed = discord.Embed(
        title='üí¢ Xingamento Pesado',
        description=mensagem,
        color=0xff0000
    )
    embed.set_footer(
        text=f'√â zoeira! ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    await ctx.reply(embed=embed)

@bot.command(name='filhodaputa')
async def filhodaputa_command(ctx, usuario: discord.Member = None):
    if not usuario:
        await ctx.reply('‚ùå Menciona algu√©m pra xingar, oras!')
        return
    
    if usuario.id == ctx.author.id:
        await ctx.reply('ü§° Voc√™ √© filho da puta? N√£o precisa confirmar!')
        return
    
    if usuario.bot:
        await ctx.reply('ü§ñ Bots n√£o t√™m m√£e, deixa eles quietos!')
        return
    
    xingamentos = [
        f'üñï **{ctx.author.mention}** chamou **{usuario.mention}** de filho da puta!',
        f'üíÄ **{ctx.author.mention}** disse: **{usuario.mention}** √© um fdp mesmo!',
        f'üî• **{ctx.author.mention}** confirmou: **{usuario.mention}** √© filho duma puta!',
        f'üí¢ **{ctx.author.mention}** falou: **{usuario.mention}**, seu filho da m√£e!',
        f'‚ö° **{ctx.author.mention}** disse: **{usuario.mention}** √© um desgra√ßado!',
        f'üëä **{ctx.author.mention}** chamou **{usuario.mention}** de arrombado!',
        f'üí• **{ctx.author.mention}** falou: **{usuario.mention}** √© um babaca do caralho!',
        f'üå™Ô∏è **{ctx.author.mention}** disse: **{usuario.mention}** √© um merda!',
        f'üî® **{ctx.author.mention}** chamou **{usuario.mention}** de corno manso!',
        f'üí£ **{ctx.author.mention}** falou: **{usuario.mention}** √© um bosta!',
        f'üéØ **{ctx.author.mention}** disse: **{usuario.mention}** √© um lixo humano!',
        f'‚õàÔ∏è **{ctx.author.mention}** chamou **{usuario.mention}** de pilantra!',
        f'üåã **{ctx.author.mention}** falou: **{usuario.mention}** √© um verme!',
        f'üí® **{ctx.author.mention}** disse: **{usuario.mention}** √© um cuz√£o!',
        f'üó°Ô∏è **{ctx.author.mention}** chamou **{usuario.mention}** de energ√∫meno!',
        f'‚öîÔ∏è **{ctx.author.mention}** falou: **{usuario.mention}** √© um retardado!',
        f'üî™ **{ctx.author.mention}** disse: **{usuario.mention}** √© um imbecil!',
        f'üé≠ **{ctx.author.mention}** chamou **{usuario.mention}** de pau no cu!',
        f'üè¥ **{ctx.author.mention}** falou: **{usuario.mention}** √© um fracassado!',
        f'‚ö†Ô∏è **{ctx.author.mention}** disse: **{usuario.mention}** √© um escroto!'
    ]
    
    gifs = [
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmxkejQxbnU2OGk3NGcwOHRiNGFqZHRlZHE2enAzc2xib3VpMTg2YSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/44Eq3Ab5LPYn6/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmxkejQxbnU2OGk3NGcwOHRiNGFqZHRlZHE2enAzc2xib3VpMTg2YSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/yV5xcSTmtVPBS/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmxkejQxbnU2OGk3NGcwOHRiNGFqZHRlZHE2enAzc2xib3VpMTg2YSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/l4Fsly71gEOtGvLQA/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmxkejQxbnU2OGk3NGcwOHRiNGFqZHRlZHE2enAzc2xib3VpMTg2YSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/FNMXxCshJxel7cRYuj/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmxkejQxbnU2OGk3NGcwOHRiNGFqZHRlZHE2enAzc2xib3VpMTg2YSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/ImWifslsGZjrSyxyjM/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmxkejQxbnU2OGk3NGcwOHRiNGFqZHRlZHE2enAzc2xib3VpMTg2YSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/I7p8K5EY9w9dC/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmxkejQxbnU2OGk3NGcwOHRiNGFqZHRlZHE2enAzc2xib3VpMTg2YSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/KzGCAlMiK6hQQ/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmxkejQxbnU2OGk3NGcwOHRiNGFqZHRlZHE2enAzc2xib3VpMTg2YSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/BXHtzkBTqd9dAemgCL/giphy.gif',
        'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmxkejQxbnU2OGk3NGcwOHRiNGFqZHRlZHE2enAzc2xib3VpMTg2YSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/U7P2vnWfPkIQ8/giphy.gif'
    ]
    
    mensagem = random.choice(xingamentos)
    gif = random.choice(gifs)
    
    embed = discord.Embed(
        title='üî• Xingamento Destruidor',
        description=mensagem,
        color=0xff0000
    )
    embed.set_image(url=gif)
    embed.set_footer(
        text=f'√â brincadeira, relaxa! ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    await ctx.reply(embed=embed)

@bot.command(name='cafune')
async def cafune_command(ctx, usuario: discord.Member = None):
    if not usuario:
        embed = discord.Embed(
            title='‚ùå Erro no Comando',
            description='Voc√™ precisa mencionar algu√©m para fazer cafun√©!\n\n**Exemplo:**\n`.cafune @user`',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.id == ctx.author.id:
        embed = discord.Embed(
            title='üòå Auto-Cafun√©',
            description='Voc√™ faz cafun√© em si mesmo... Relaxante!\n*Self-care extremo!*',
            color=0xffa500
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario.bot:
        embed = discord.Embed(
            title='ü§ñ Erro',
            description='Bots n√£o t√™m cabelo para fazer cafun√©!\n*Mas agradecem pela inten√ß√£o!*',
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    mensagens = [
        f'üòå **{ctx.author.mention}** est√° fazendo cafun√© em **{usuario.mention}**!',
        f'üíÜ **{ctx.author.mention}** acaricia a cabe√ßa de **{usuario.mention}** suavemente!',
        f'‚ú® **{ctx.author.mention}** faz um cafun√© relaxante em **{usuario.mention}**!',
        f'üå∏ **{ctx.author.mention}** passa a m√£o no cabelo de **{usuario.mention}**!',
        f'üí§ **{ctx.author.mention}** est√° fazendo **{usuario.mention}** relaxar com cafun√©!',
        f'ü•∞ **{ctx.author.mention}** d√° um cafun√© carinhoso em **{usuario.mention}**!',
        f'üéÄ **{ctx.author.mention}** faz cafun√© gostoso em **{usuario.mention}**!',
        f'üí´ **{ctx.author.mention}** est√° mimando **{usuario.mention}** com cafun√©!',
        f'üå∫ **{ctx.author.mention}** d√° um cafun√© delicioso em **{usuario.mention}**!',
        f'ü¶ã **{ctx.author.mention}** faz cafun√© que d√° sono em **{usuario.mention}**!',
        f'üå∑ **{ctx.author.mention}** est√° fazendo **{usuario.mention}** dormir com cafun√©!',
        f'üåº **{ctx.author.mention}** d√° o melhor cafun√© em **{usuario.mention}**!'
    ]
    
    beneficios = [
        "Que paz! üòå",
        "Puro relaxamento! üíÜ",
        "Quase dormindo... üí§",
        "Que del√≠cia! ü•∞",
        "Terap√™utico! ‚ú®",
        "Que carinho gostoso! üíï",
        "Relaxa demais! üå∏",
        "Melhor sensa√ß√£o! üí´",
        "T√£o bom! üéÄ",
        "Cafun√© perfeito! üå∫"
    ]
    
    gif = random.choice(INTERACTION_GIFS['pat'])
    mensagem = random.choice(mensagens)
    beneficio = random.choice(beneficios)
    
    embed = discord.Embed(
        title='üòå Cafun√© Relaxante',
        description=mensagem,
        color=0xffc0cb
    )
    embed.add_field(
        name='üíÜ Benef√≠cio',
        value=beneficio,
        inline=False
    )
    embed.add_field(
        name='‚ú® Momento',
        value='Momento de paz e relaxamento...',
        inline=False
    )
    embed.set_image(url=gif)
    embed.set_footer(
        text=f'Comando usado por {ctx.author.name} ‚Ä¢ {datetime.now().strftime("%H:%M")}',
        icon_url=ctx.author.display_avatar.url
    )
    
    # Criar view com bot√£o de retribuir
    view = RetribuirView(ctx.author, usuario, 'pat', timeout=60)
    message = await ctx.reply(embed=embed, view=view)
    view.message = message

# ========================================
# COMANDOS DE XP/RANK (ESTILO LORITTA)
# ========================================

@bot.command(name='rank')
async def rank_command(ctx, user: discord.Member = None):
    """Ver rank com card visual tipo Loritta"""
    user = user or ctx.author
    
    try:
        await ctx.defer() if hasattr(ctx, 'defer') else None
        
        # Busca dados do usu√°rio
        data = get_user_xp(user.id, ctx.guild.id)
        level = data['level']
        xp = data['xp']
        messages = data['messages']
        xp_needed = calculate_xp_for_level(level + 1)
        rank_position = get_user_rank(user.id, ctx.guild.id)
        
        # Gera rank card via Vacefron API com background customizado CAOS
        params = {
            'username': user.name,
            'avatar': str(user.display_avatar.url),
            'level': level,
            'rank': rank_position,
            'currentxp': xp,
            'nextlevelxp': xp_needed,
            'previouslevelxp': 0,
            'custombg': 'https://i.ibb.co/BVX3K2Y2/1.png',  # Background customizado laranja CAOS
            'xpcolor': 'FF6600'
        }
        
        url = f"https://vacefron.nl/api/rankcard?{urlencode(params)}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    image_bytes = await response.read()
                    file = discord.File(fp=BytesIO(image_bytes), filename='rank.png')
                else:
                    await ctx.reply("‚ùå Erro ao gerar rank card!")
                    return
        
        # Embed com info extra
        embed = discord.Embed(
            title=f"üìä Rank de {user.name}",
            color=0xff6600
        )
        embed.add_field(name="üì® Mensagens", value=f"`{messages:,}`", inline=True)
        embed.add_field(name="üèÜ Posi√ß√£o", value=f"`#{rank_position}`", inline=True)
        embed.add_field(name="üìà Pr√≥ximo N√≠vel", value=f"`{xp_needed - xp:,} XP`", inline=True)
        
        # Verificar se tem cargo por n√≠vel
        conn = sqlite3.connect('xp_database.db')
        cursor = conn.cursor()
        cursor.execute('SELECT role_id FROM level_roles WHERE guild_id = ? AND level = ?', 
                     (str(ctx.guild.id), level))
        role_result = cursor.fetchone()
        conn.close()
        
        if role_result:
            role = ctx.guild.get_role(int(role_result[0]))
            if role:
                embed.add_field(name="üéñÔ∏è Cargo Atual", value=role.mention, inline=False)
        
        embed.set_image(url="attachment://rank.png")
        embed.set_footer(text="Sistema de XP tipo Loritta ‚Ä¢ CAOS Hub")
        
        await ctx.reply(embed=embed, file=file)
    except Exception as e:
        print(f'‚ùå Erro no comando rank: {e}')
        await ctx.reply(f"‚ùå Erro ao buscar rank: {e}")

@bot.command(name='rankxp', aliases=['leaderboard', 'lb', 'top'])
async def rankxp_command(ctx):
    """Ver top 10 usu√°rios do servidor com visual estilo Loritta"""
    try:
        top_users = get_leaderboard(ctx.guild.id, 10)
        
        if not top_users:
            await ctx.reply("‚ùå Ainda n√£o h√° usu√°rios no ranking!")
            return
        
        # Cria descri√ß√£o elaborada com visual de ranking
        description_lines = []
        medals = ['ü•á', 'ü•à', 'ü•â']
        
        for i, (user_id, xp, level, messages) in enumerate(top_users, 1):
            user = ctx.guild.get_member(int(user_id))
            if user:
                medal = medals[i-1] if i <= 3 else f"**`#{i:02d}`**"
                
                # Barra de progresso visual
                xp_bar_length = min(int((xp / max(top_users[0][1], 1)) * 10), 10)
                xp_bar = "‚ñà" * xp_bar_length + "‚ñë" * (10 - xp_bar_length)
                
                description_lines.append(
                    f"{medal} **{user.name}**\n"
                    f"‚îî `Lv.{level:02d}` ‚Ä¢ {xp_bar} ‚Ä¢ `{xp:,} XP` ‚Ä¢ `{messages:,} msgs`\n"
                )
        
        embed = discord.Embed(
            title=f"üèÜ RANKING DE XP ‚Ä¢ {ctx.guild.name.upper()}",
            description="\n".join(description_lines) + f"\n\n**üìä Total de membros no ranking:** `{len(top_users)}`",
            color=0xff6600
        )
        
        # Adiciona avatar do #1 como thumbnail
        if top_users:
            first_user = ctx.guild.get_member(int(top_users[0][0]))
            if first_user:
                embed.set_thumbnail(url=first_user.display_avatar.url)
        
        # Banner do servidor como imagem principal
        if ctx.guild.banner:
            embed.set_image(url=ctx.guild.banner.url)
        elif ctx.guild.icon:
            embed.set_image(url=ctx.guild.icon.url)
        else:
            # Usa imagem do CAOS como fallback
            embed.set_image(url="https://i.ibb.co/BVX3K2Y2/1.png")
        
        embed.set_footer(
            text="üî• Sistema de XP tipo Loritta ‚Ä¢ Use .rank pra ver seu card individual",
            icon_url=ctx.guild.icon.url if ctx.guild.icon else None
        )
        
        await ctx.reply(embed=embed)
    except Exception as e:
        print(f'‚ùå Erro no rankxp: {e}')
        await ctx.reply(f"‚ùå Erro ao buscar ranking: {e}")

@bot.command(name='setxp')
@commands.has_permissions(administrator=True)
async def setxp_command(ctx, user: discord.Member, xp: int):
    """Define XP de um usu√°rio (Admin)"""
    try:
        conn = sqlite3.connect('xp_database.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO user_xp (user_id, guild_id, xp, level, messages, last_xp_time)
            VALUES (?, ?, ?, 0, 0, ?)
        ''', (str(user.id), str(ctx.guild.id), xp, time.time()))
        conn.commit()
        conn.close()
        
        await ctx.reply(f"‚úÖ XP de {user.mention} definido para **{xp:,} XP**!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro: {e}")

@setxp_command.error
async def setxp_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# ========================================
# COMANDOS DE CONTROLE - BOAS-VINDAS/SA√çDA/BAN
# ========================================

@bot.command(name='setupwelcome')
@commands.has_permissions(administrator=True)
async def setup_welcome_command(ctx):
    """Ativa TODO o sistema de boas-vindas/sa√≠da/ban de uma vez"""
    
    # Ativar tudo EXCETO tickets (tickets precisa configurar separado)
    welcome_config['welcome_enabled'] = True
    welcome_config['goodbye_enabled'] = True
    welcome_config['autorole_enabled'] = True
    # N√ÉO ativa tickets automaticamente
    save_welcome_config()
    
    # Criar/atualizar painel
    await update_status_panel(ctx.guild)
    
    embed = discord.Embed(
        title="‚úÖ SISTEMA ATIVADO COM SUCESSO!",
        description="O sistema de boas-vindas, sa√≠da/ban e autorole foi ativado!",
        color=0x00ff88
    )
    embed.add_field(
        name="üìã Configura√ß√µes",
        value=f"üëã **Boas-vindas:** <#{WELCOME_CHANNEL_ID}>\nüëã **Sa√≠da/Ban:** <#{GOODBYE_CHANNEL_ID}>\nüé≠ **Autorole:** <@&{AUTOROLE_ID}>\nüìä **Painel:** <#{STATUS_CHANNEL_ID}>",
        inline=False
    )
    embed.add_field(
        name="‚ÑπÔ∏è Tickets",
        value="Para ativar tickets, use `.ticket config` primeiro, depois `.toggletickets`",
        inline=False
    )
    embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@setup_welcome_command.error
async def setup_welcome_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

@bot.command(name='togglewelcome')
@commands.has_permissions(administrator=True)
async def toggle_welcome_command(ctx):
    """Liga/desliga sistema de boas-vindas"""
    
    welcome_config['welcome_enabled'] = not welcome_config['welcome_enabled']
    save_welcome_config()
    
    # Atualizar painel
    await update_status_panel(ctx.guild)
    
    status = "‚úÖ **ATIVADO**" if welcome_config['welcome_enabled'] else "‚ùå **DESATIVADO**"
    
    embed = discord.Embed(
        title="üîÑ BOAS-VINDAS ATUALIZADO",
        description=f"Sistema de boas-vindas: {status}",
        color=0x00ff88 if welcome_config['welcome_enabled'] else 0xff6b6b
    )
    embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@toggle_welcome_command.error
async def toggle_welcome_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

@bot.command(name='togglegoodbye')
@commands.has_permissions(administrator=True)
async def toggle_goodbye_command(ctx):
    """Liga/desliga sistema de sa√≠da/ban"""
    
    welcome_config['goodbye_enabled'] = not welcome_config['goodbye_enabled']
    save_welcome_config()
    
    # Atualizar painel
    await update_status_panel(ctx.guild)
    
    status = "‚úÖ **ATIVADO**" if welcome_config['goodbye_enabled'] else "‚ùå **DESATIVADO**"
    
    embed = discord.Embed(
        title="üîÑ SA√çDA/BAN ATUALIZADO",
        description=f"Sistema de sa√≠da/ban: {status}",
        color=0x00ff88 if welcome_config['goodbye_enabled'] else 0xff6b6b
    )
    embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@toggle_goodbye_command.error
async def toggle_goodbye_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

@bot.command(name='toggleautorole')
@commands.has_permissions(administrator=True)
async def toggle_autorole_command(ctx):
    """Liga/desliga sistema de autorole"""
    
    welcome_config['autorole_enabled'] = not welcome_config['autorole_enabled']
    save_welcome_config()
    
    # Atualizar painel
    await update_status_panel(ctx.guild)
    
    status = "‚úÖ **ATIVADO**" if welcome_config['autorole_enabled'] else "‚ùå **DESATIVADO**"
    
    embed = discord.Embed(
        title="üîÑ AUTOROLE ATUALIZADO",
        description=f"Sistema de autorole: {status}",
        color=0x00ff88 if welcome_config['autorole_enabled'] else 0xff6b6b
    )
    embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@toggle_autorole_command.error
async def toggle_autorole_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# COMANDO .toggletickets REMOVIDO - USE O DASHBOARD
# Acesse: https://caosbot-discord.onrender.com/dashboard

# ========================================
# SISTEMA DE BLOQUEIO DE BOTS EM CALLS
# ========================================

@bot.command(name='blockedcalls')
@commands.has_permissions(administrator=True)
async def blocked_calls_command(ctx):
    """Mostra informa√ß√µes sobre o sistema de bloqueio de bots em calls"""
    
    embed = discord.Embed(
        title="üö´ SISTEMA DE BLOQUEIO DE BOTS",
        description="Sistema autom√°tico que impede bots espec√≠ficos de entrar em canais de voz protegidos",
        color=0xFF0000,
        timestamp=datetime.now()
    )
    
    # Bots bloqueados
    blocked_bots_text = ""
    for bot_id in BLOCKED_BOTS:
        bot = ctx.guild.get_member(bot_id)
        if bot:
            blocked_bots_text += f"‚Ä¢ {bot.mention} (`{bot.name}`)\n"
        else:
            blocked_bots_text += f"‚Ä¢ ID: `{bot_id}` (n√£o encontrado)\n"
    
    embed.add_field(
        name="ü§ñ Bots Bloqueados",
        value=blocked_bots_text or "Nenhum bot configurado",
        inline=False
    )
    
    # Canais protegidos
    protected_channels_text = ""
    for channel_id in PROTECTED_VOICE_CHANNELS:
        channel = ctx.guild.get_channel(channel_id)
        if channel:
            protected_channels_text += f"‚Ä¢ {channel.mention}\n"
        else:
            protected_channels_text += f"‚Ä¢ ID: `{channel_id}` (n√£o encontrado)\n"
    
    embed.add_field(
        name="üîí Canais Protegidos",
        value=protected_channels_text or "Nenhum canal configurado",
        inline=False
    )
    
    embed.add_field(
        name="‚öôÔ∏è Como Funciona",
        value="‚Ä¢ Bloqueia comandos de m√∫sica (`m!p`, `m!play`, etc)\n‚Ä¢ Desconecta bot automaticamente se entrar\n‚Ä¢ Sistema anti-loop com cooldown de 30s",
        inline=False
    )
    
    embed.set_footer(text="Sistema de Bloqueio ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed)

@blocked_calls_command.error
async def blocked_calls_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

@bot.command(name='config_bloqueio')
@commands.has_permissions(administrator=True)
async def config_bloqueio(ctx):
    """Configura√ß√£o simplificada do sistema de bloqueio"""
    embed = discord.Embed(
        title="‚öôÔ∏è Configura√ß√£o do Sistema de Bloqueio",
        color=0x00FFFF,
        timestamp=datetime.now()
    )
    embed.add_field(
        name="ü§ñ Bots Bloqueados", 
        value="\n".join(f"`{b}`" for b in BLOCKED_BOTS),
        inline=False
    )
    embed.add_field(
        name="üîí Canais Protegidos", 
        value="\n".join(f"`{c}`" for c in PROTECTED_VOICE_CHANNELS),
        inline=False
    )
    embed.set_footer(text="Sistema de Bloqueio ‚Ä¢ Caos Hub")
    await ctx.send(embed=embed)

@config_bloqueio.error
async def config_bloqueio_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# ========================================
# COMANDOS DE MODERA√á√ÉO
# ========================================

# IDs dos cargos de STAFF (hierarquia do maior pro menor)
FOUNDER_ROLE_ID = 1365636960651051069    # [FND] Founder
SUBDONO_ROLE_ID = 1365636456386789437    # [SDN] Sub Dono
ADMIN_ROLE_ID = 1365633918593794079      # [ADM] Administrador
STAFF_ROLE_ID = 1365634226254254150      # [STF] Staff
MOD_ROLE_ID = 1365633102973763595        # [MOD] Moderador
SUBMOD_ROLE_ID = 1365631940434333748     # [SBM] Sub Moderador

# IDs dos cargos ADV
ADV_CARGO_1_ID = 1365861145738477598  # ADV 1
ADV_CARGO_2_ID = 1365861187392241714  # ADV 2
ADV_CARGO_3_ID = 1365861225900277832  # ADV 3

# ID do canal de logs
LOG_CHANNEL_ID = 1417638740435800186

# Hierarquia de cargos (maior n√∫mero = mais poder)
ROLE_HIERARCHY = {
    FOUNDER_ROLE_ID: 6,  # Founder
    SUBDONO_ROLE_ID: 5,  # Sub Dono
    ADMIN_ROLE_ID: 4,    # Administrador
    STAFF_ROLE_ID: 3,    # Staff
    MOD_ROLE_ID: 2,      # Moderador
    SUBMOD_ROLE_ID: 1    # Sub Moderador
}

def get_highest_staff_role(member):
    """Retorna o cargo de staff mais alto do membro e seu n√≠vel de hierarquia"""
    highest_level = 0
    highest_role = None
    
    for role in member.roles:
        if role.id in ROLE_HIERARCHY:
            level = ROLE_HIERARCHY[role.id]
            if level > highest_level:
                highest_level = level
                highest_role = role
    
    return highest_role, highest_level

def can_moderate(moderator, target):
    """Verifica se o moderador pode punir o alvo baseado na hierarquia"""
    mod_role, mod_level = get_highest_staff_role(moderator)
    target_role, target_level = get_highest_staff_role(target)
    
    # Se o alvo n√£o tem cargo de staff, pode punir
    if target_level == 0:
        return True, None
    
    # Se o moderador tem cargo maior, pode punir
    if mod_level > target_level:
        return True, None
    
    # Se tem o mesmo n√≠vel ou menor, n√£o pode
    if mod_level <= target_level:
        return False, target_role
    
    return False, None

# Arquivo para salvar dados das advert√™ncias
WARNINGS_FILE = "warnings_data.json"

# Dicion√°rio para rastrear advert√™ncias dos usu√°rios com detalhes completos
user_warnings = {}
user_warnings_details = {}  # Detalhes das advert√™ncias: motivo, moderador, timestamp

# Sistema de nicknames autom√°ticos por cargo (configurado com IDs reais)
CARGO_PREFIXES = {
    # Cargos de modera√ß√£o do servidor (IDs fornecidos pelo usu√°rio)
    1365636960651051069: "[FND]",  # Founder
    1365636456386789437: "[SDN]",  # Sub Dono
    1365633918593794079: "[ADM]",  # Administrador
    1365634226254254150: "[STF]",  # Staff
    1365633102973763595: "[MOD]",  # Moderador
    1365631940434333748: "[SBM]",  # Sub Moderador
}

# Dicion√°rio para salvar configura√ß√µes de cargos
ROLE_CONFIG_FILE = "role_config.json"

# ========================================
# SISTEMA DE BOAS-VINDAS/SA√çDA/BAN
# ========================================

# Configura√ß√µes fixas (IDs fornecidos pelo usu√°rio)
WELCOME_CHANNEL_ID = 1365848708532535369  # Canal de entrada
GOODBYE_CHANNEL_ID = 1365848742355275886  # Canal de sa√≠da/ban
AUTOROLE_ID = 1365630916927553586  # Cargo Membro
STATUS_CHANNEL_ID = 1424157618447974471  # Canal do painel de status

# Canais de logs de modera√ß√£o
KICK_LOG_CHANNEL_ID = 1417645057602752543  # Canal de log de kicks
BAN_LOG_CHANNEL_ID = 1417645081057558568  # Canal de log de bans

# Sistema de bloqueio de bots em calls
BLOCKED_BOTS = [
    411916947773587456,  # Jockie Music
    412347257233604609,  # Jockie 2
    412347553141751808   # Jockie 3
]

PROTECTED_VOICE_CHANNELS = [
    1365675025801412640,  # Call Voice 1
    1365678315905613855,  # Call Voice 2
    1365678337267208266,  # Call Voice 3
    1365678370917978256,  # Call Voice 4
    1365678387573817497,  # Call Voice 5
    1365678408637349891   # Call Voice 6
]

# GIFs
WELCOME_GIF = "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExeWd3ZnNhYm0yN2p2M2UwcnZlY2k1bjNuYjg3b3dvZ3EyY2hhcHZjaCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/1n4iuWZFnTeN6qvdpD/giphy.gif"
GOODBYE_GIF = "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExZmFwZjhxb2k2NnFwajloYXBjMDN2eTJmdzAwMGtmZnhobjNwYTBrayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/QA7TPdyKJvj5Xdjm9A/giphy.gif"
BAN_GIF = "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExbDE4YnhmZms4b29va2JxYnRubnI3cXVybzhsdWJsb3MxZmI3ZDB3eSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/nrXif9YExO9EI/giphy.gif"

# Arquivo de configura√ß√£o
WELCOME_CONFIG_FILE = "welcome_config.json"

# Estado do sistema (DESATIVADO por padr√£o - aguarda dashboard)
welcome_config = {
    'welcome_enabled': False,  # ‚ùå Aguardando dashboard
    'goodbye_enabled': False,  # ‚ùå Aguardando dashboard
    'autorole_enabled': False,  # ‚ùå Aguardando dashboard
    'tickets_enabled': False,  # ‚ùå Aguardando dashboard
    'status_message_id': None
}

# ===============================
# Helpers de normaliza√ß√£o de toggles
# ===============================
def to_bool(value):
    """Converte qualquer valor comum em boolean consistente."""
    try:
        if isinstance(value, bool):
            return value
        if value is None:
            return False
        if isinstance(value, (int, float)):
            return value != 0
        if isinstance(value, str):
            v = value.strip().lower()
            return v in ("1", "true", "on", "yes", "y", "enabled")
    except Exception:
        pass
    return False

def normalize_config(cfg: dict) -> dict:
    """Garante que as chaves de toggle sejam sempre booleanas."""
    for key in ("welcome_enabled", "goodbye_enabled", "autorole_enabled", "tickets_enabled"):
        if key in cfg:
            cfg[key] = to_bool(cfg.get(key))
        else:
            cfg[key] = False
    return cfg

def is_on(key: str) -> bool:
    """Retorna o valor booleano normalizado do toggle atual em mem√≥ria."""
    return to_bool(welcome_config.get(key))

def save_welcome_config():
    """Salva configura√ß√µes do sistema de boas-vindas"""
    try:
        with open(WELCOME_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(welcome_config, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Configura√ß√µes de boas-vindas salvas")
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√µes de boas-vindas: {e}")

def load_welcome_config():
    """Carrega configura√ß√µes do sistema de boas-vindas DO ARQUIVO LOCAL"""
    global welcome_config
    try:
        # DESATIVADO: N√£o tenta conectar ao dashboard externo (causa loop)
        # Usa apenas arquivo local para evitar problemas de inicializa√ß√£o
        
        # Ler do arquivo local
        if os.path.exists(WELCOME_CONFIG_FILE):
            with open(WELCOME_CONFIG_FILE, 'r', encoding='utf-8') as f:
                loaded_config = json.load(f)
                welcome_config.update(normalize_config(loaded_config))
            print(f"‚úÖ Configura√ß√µes carregadas do arquivo local")
            print(f"   Welcome: {is_on('welcome_enabled')}")
            print(f"   Goodbye: {is_on('goodbye_enabled')}")
            print(f"   Autorole: {is_on('autorole_enabled')}")
            print(f"   Tickets: {is_on('tickets_enabled')}")
        else:
            # Se n√£o existe arquivo, cria um padr√£o
            print("üìù Arquivo de configura√ß√£o n√£o encontrado, criando padr√£o...")
            welcome_config.update({
                'welcome_enabled': True,
                'goodbye_enabled': True,
                'autorole_enabled': False,
                'tickets_enabled': True
            })
            save_welcome_config()
            print(f"‚úÖ Configura√ß√µes padr√£o criadas")
            print(f"   Welcome: {is_on('welcome_enabled')}")
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√µes: {e}")
        print("   Mantendo tudo DESATIVADO por seguran√ßa")

async def update_status_panel(guild):
    """Atualiza o painel de status do sistema"""
    try:
        status_channel = guild.get_channel(STATUS_CHANNEL_ID)
        if not status_channel:
            return
        
        # Pegar canais e cargo
        welcome_channel = guild.get_channel(WELCOME_CHANNEL_ID)
        goodbye_channel = guild.get_channel(GOODBYE_CHANNEL_ID)
        autorole = guild.get_role(AUTOROLE_ID)
        
        # Criar embed do painel (COR PRETA)
        embed = discord.Embed(
            title="üéõÔ∏è PAINEL DE CONTROLE",
            description="**Sistema de Eventos e Automa√ß√£o**",
            color=0x000000,  # PRETO
            timestamp=datetime.now()
        )
        
        # Status Boas-vindas (COM CODE BLOCK)
        welcome_status = "Online" if welcome_config['welcome_enabled'] else "Offline"
        welcome_info = f"**Status**\n```{welcome_status}```\n**Canal:** {welcome_channel.mention if welcome_channel else '`N√£o configurado`'}"
        embed.add_field(
            name="üëã Boas-vindas",
            value=welcome_info,
            inline=True
        )
        
        # Status Sa√≠da/Ban (COM CODE BLOCK)
        goodbye_status = "Online" if welcome_config['goodbye_enabled'] else "Offline"
        goodbye_info = f"**Status**\n```{goodbye_status}```\n**Canal:** {goodbye_channel.mention if goodbye_channel else '`N√£o configurado`'}"
        embed.add_field(
            name="üëã Sa√≠da/Ban",
            value=goodbye_info,
            inline=True
        )
        
        # Espa√ßo em branco para layout
        embed.add_field(name="\u200b", value="\u200b", inline=True)
        
        # Status Autorole (COM CODE BLOCK)
        autorole_status = "Online" if welcome_config['autorole_enabled'] else "Offline"
        autorole_info = f"**Status**\n```{autorole_status}```\n**Cargo:** {autorole.mention if autorole else '`N√£o configurado`'}"
        embed.add_field(
            name="üé≠ Autorole",
            value=autorole_info,
            inline=True
        )
        
        # Status Tickets (COM CODE BLOCK)
        tickets_status = "Online" if welcome_config['tickets_enabled'] else "Offline"
        
        # Pegar info do ticket_config se existir
        guild_id = str(guild.id)
        ticket_info_text = f"**Status**\n```{tickets_status}```"
        
        if 'ticket_config' in globals() and guild_id in ticket_config:
            tconfig = ticket_config[guild_id]
            if tconfig.get('category_id'):
                category = guild.get_channel(tconfig['category_id'])
                ticket_info_text += f"\n**Categoria:** {category.mention if category else '`N√£o encontrada`'}"
            
            if tconfig.get('staff_role_ids'):
                staff_roles = [guild.get_role(rid) for rid in tconfig['staff_role_ids']]
                staff_roles = [r for r in staff_roles if r]
                if staff_roles:
                    ticket_info_text += f"\n**Staff:** {staff_roles[0].mention}"
        
        embed.add_field(
            name="üé´ Tickets",
            value=ticket_info_text,
            inline=True
        )
        
        # Espa√ßo em branco para layout
        embed.add_field(name="\u200b", value="\u200b", inline=True)
        
        # Comandos dispon√≠veis
        embed.add_field(
            name="‚öôÔ∏è Comandos Dispon√≠veis",
            value=(
                "**Configura√ß√£o:**\n"
                "‚Ä¢ `.setupwelcome` - Ativar eventos\n"
                "‚Ä¢ `.ticket config` - Configurar tickets\n\n"
                "**Controles:**\n"
                "‚Ä¢ `.togglewelcome` - Boas-vindas\n"
                "‚Ä¢ `.togglegoodbye` - Sa√≠da/Ban\n"
                "‚Ä¢ `.toggleautorole` - Autorole\n"
                "‚Ä¢ `.toggletickets` - Tickets"
            ),
            inline=False
        )
        
        embed.set_footer(text="Sistema de Eventos ‚Ä¢ Caos Hub")
        
        # Atualizar ou criar mensagem
        if welcome_config['status_message_id']:
            try:
                msg = await status_channel.fetch_message(welcome_config['status_message_id'])
                await msg.edit(embed=embed)
            except:
                # Se n√£o encontrar, criar nova
                msg = await status_channel.send(embed=embed)
                welcome_config['status_message_id'] = msg.id
                save_welcome_config()
        else:
            # Criar nova mensagem
            msg = await status_channel.send(embed=embed)
            welcome_config['status_message_id'] = msg.id
            save_welcome_config()
            
    except Exception as e:
        print(f"‚ùå Erro ao atualizar painel de status: {e}")

def save_role_config():
    """Salva configura√ß√µes de cargos em arquivo JSON"""
    try:
        data = {
            'cargo_prefixes': {str(k): v for k, v in CARGO_PREFIXES.items()}
        }
        with open(ROLE_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Configura√ß√µes de cargos salvas em {ROLE_CONFIG_FILE}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√µes de cargos: {e}")

def load_role_config():
    """Carrega configura√ß√µes de cargos do arquivo JSON"""
    global CARGO_PREFIXES
    try:
        if os.path.exists(ROLE_CONFIG_FILE):
            with open(ROLE_CONFIG_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # Converter chaves de string para int
            loaded_prefixes = {int(k): v for k, v in data.get('cargo_prefixes', {}).items()}
            CARGO_PREFIXES.update(loaded_prefixes)
            
            print(f"‚úÖ Configura√ß√µes de cargos carregadas: {len(CARGO_PREFIXES)} cargos")
        else:
            print("üìù Arquivo de configura√ß√£o de cargos n√£o encontrado, usando padr√µes")
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√µes de cargos: {e}")

# Armazenar nicknames originais
original_nicknames = {}

def save_warnings_data():
    """Salva os dados das advert√™ncias em arquivo JSON"""
    try:
        data = {
            'user_warnings': user_warnings,
            'user_warnings_details': {}
        }
        
        # Converter timestamps para string para serializa√ß√£o JSON
        for user_id, details_list in user_warnings_details.items():
            data['user_warnings_details'][str(user_id)] = []
            for detail in details_list:
                detail_copy = detail.copy()
                if 'timestamp' in detail_copy:
                    detail_copy['timestamp'] = detail_copy['timestamp'].isoformat()
                data['user_warnings_details'][str(user_id)].append(detail_copy)
        
        with open(WARNINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Dados das advert√™ncias salvos em {WARNINGS_FILE}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar dados das advert√™ncias: {e}")

def load_warnings_data():
    """Carrega os dados das advert√™ncias do arquivo JSON"""
    global user_warnings, user_warnings_details
    
    try:
        if os.path.exists(WARNINGS_FILE):
            with open(WARNINGS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            user_warnings = data.get('user_warnings', {})
            # Converter chaves de string para int
            user_warnings = {int(k): v for k, v in user_warnings.items()}
            
            user_warnings_details = {}
            details_data = data.get('user_warnings_details', {})
            
            # Converter timestamps de volta para datetime
            import datetime
            for user_id_str, details_list in details_data.items():
                user_id = int(user_id_str)
                user_warnings_details[user_id] = []
                for detail in details_list:
                    if 'timestamp' in detail and isinstance(detail['timestamp'], str):
                        detail['timestamp'] = datetime.datetime.fromisoformat(detail['timestamp'])
                    user_warnings_details[user_id].append(detail)
            
            print(f"‚úÖ Dados das advert√™ncias carregados: {len(user_warnings)} usu√°rios")
        else:
            print("üìù Arquivo de advert√™ncias n√£o encontrado, iniciando com dados vazios")
            
    except Exception as e:
        print(f"‚ùå Erro ao carregar dados das advert√™ncias: {e}")
        user_warnings = {}
        user_warnings_details = {}

# ID do cargo de mute
MUTE_ROLE_ID = None  # Ser√° criado automaticamente

# ID do cargo de Sub Moderador (substitua pelo ID correto)
SUB_MODERADOR_ROLE_ID = None  # Coloque o ID do cargo aqui

def is_sub_moderator_or_higher():
    """Decorator personalizado para verificar se o usu√°rio √© sub moderador ou tem permiss√µes superiores"""
    async def predicate(ctx):
        # Verificar se √© administrador
        if ctx.author.guild_permissions.administrator:
            return True
        
        # Verificar se tem permiss√µes de modera√ß√£o padr√£o
        if (ctx.author.guild_permissions.manage_roles or 
            ctx.author.guild_permissions.kick_members or 
            ctx.author.guild_permissions.ban_members or
            ctx.author.guild_permissions.manage_messages):
            return True
        
        # Verificar se tem o cargo de Sub Moderador
        if SUB_MODERADOR_ROLE_ID:
            sub_mod_role = ctx.guild.get_role(SUB_MODERADOR_ROLE_ID)
            if sub_mod_role and sub_mod_role in ctx.author.roles:
                return True
        
        # Se n√£o tem nenhuma das condi√ß√µes acima, negar acesso
        return False
    
    return commands.check(predicate)

# Sistemas de prote√ß√£o
message_history = defaultdict(lambda: deque(maxlen=5))  # √öltimas 5 mensagens por usu√°rio
user_message_times = defaultdict(lambda: deque(maxlen=5))  # Timestamps das mensagens
spam_warnings = defaultdict(int)  # Avisos de spam por usu√°rio (0=5msgs, 1=4msgs, 2+=3msgs)

# Sistema de contadores de tickets por categoria
ticket_counters = defaultdict(int)  # Contador incremental por categoria

# ========================================
# SISTEMA ANTI-RAID AVAN√áADO
# ========================================
raid_detection = {
    'enabled': True,
    'in_raid_mode': False,
    'raid_start_time': None,
    'recent_joins': deque(maxlen=20),  # √öltimas 20 entradas
    'recent_messages': deque(maxlen=100),  # √öltimas 100 mensagens
    'suspicious_users': set(),  # Usu√°rios suspeitos
    'auto_banned': set(),  # IDs de usu√°rios banidos automaticamente
}

# Configura√ß√µes do anti-raid
RAID_CONFIG = {
    'join_threshold': 10,  # N√∫mero de entradas para ativar modo raid
    'join_timeframe': 60,  # Em quantos segundos (10 entradas em 60s = raid)
    'message_threshold': 15,  # Mensagens no servidor (DIMINU√çDO PARA TESTAR - era 50)
    'message_timeframe': 10,  # Janela de tempo para contar mensagens
    'account_age_min': 7,  # Dias m√≠nimos de conta (contas novas s√£o suspeitas)
    'lockdown_duration': 300,  # Segundos em modo raid (5 minutos)
    'slowmode_duration': 5,  # Segundos de slowmode durante raid
}

async def check_raid_pattern(guild):
    """Verifica se h√° padr√£o de raid (entradas massivas)"""
    if not raid_detection['enabled']:
        return False
    
    current_time = time.time()
    recent_joins = raid_detection['recent_joins']
    
    # Limpar entradas antigas
    while recent_joins and current_time - recent_joins[0] > RAID_CONFIG['join_timeframe']:
        recent_joins.popleft()
    
    # Se tiver muitas entradas recentes
    if len(recent_joins) >= RAID_CONFIG['join_threshold']:
        return True
    
    return False

async def check_message_flood(guild):
    """Verifica se h√° flood de mensagens no servidor"""
    current_time = time.time()
    recent_messages = raid_detection['recent_messages']
    
    # Limpar mensagens antigas
    while recent_messages and current_time - recent_messages[0] > RAID_CONFIG['message_timeframe']:
        recent_messages.popleft()
    
    # Se tiver muitas mensagens em pouco tempo
    messages_per_second = len(recent_messages) / RAID_CONFIG['message_timeframe']
    if messages_per_second >= (RAID_CONFIG['message_threshold'] / RAID_CONFIG['message_timeframe']):
        return True
    
    return False

async def activate_raid_mode(guild):
    """Ativa modo anti-raid no servidor"""
    if raid_detection['in_raid_mode']:
        return  # J√° est√° em modo raid
    
    raid_detection['in_raid_mode'] = True
    raid_detection['raid_start_time'] = time.time()
    
    print(f"üö® MODO ANTI-RAID ATIVADO em {guild.name}")
    
    # Canal de logs
    log_channel = guild.get_channel(1315107491453444137)  # Canal de logs
    
    if log_channel:
        embed = discord.Embed(
            title="üö® MODO ANTI-RAID ATIVADO",
            description="**Raid detectado! Medidas de prote√ß√£o ativadas.**",
            color=0xFF0000,
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(
            name="üõ°Ô∏è Prote√ß√µes Ativas",
            value=(
                "‚úÖ Slowmode (5s) em todos os canais\n"
                "‚úÖ Auto-ban de contas novas (<7 dias)\n"
                "‚úÖ Bloqueio de spam intensificado\n"
                "‚úÖ Monitoramento ativo"
            ),
            inline=False
        )
        embed.add_field(
            name="‚è±Ô∏è Dura√ß√£o",
            value=f"{RAID_CONFIG['lockdown_duration'] // 60} minutos (autom√°tico)",
            inline=False
        )
        embed.set_footer(text="Sistema Anti-Raid ‚Ä¢ Caos Hub")
        await log_channel.send("@everyone", embed=embed)
    
    # Aplicar slowmode em canais de texto
    for channel in guild.text_channels:
        try:
            if channel.slowmode_delay == 0:  # S√≥ aplicar se n√£o tiver slowmode
                await channel.edit(slowmode_delay=RAID_CONFIG['slowmode_duration'])
        except:
            pass
    
    # Agendar desativa√ß√£o autom√°tica
    await asyncio.sleep(RAID_CONFIG['lockdown_duration'])
    await deactivate_raid_mode(guild)

async def deactivate_raid_mode(guild):
    """Desativa modo anti-raid"""
    if not raid_detection['in_raid_mode']:
        return
    
    raid_detection['in_raid_mode'] = False
    raid_detection['raid_start_time'] = None
    raid_detection['suspicious_users'].clear()
    
    print(f"‚úÖ MODO ANTI-RAID DESATIVADO em {guild.name}")
    
    # Canal de logs
    log_channel = guild.get_channel(1315107491453444137)
    
    if log_channel:
        embed = discord.Embed(
            title="‚úÖ MODO ANTI-RAID DESATIVADO",
            description="Servidor voltou ao normal.",
            color=0x00FF00,
            timestamp=discord.utils.utcnow()
        )
        embed.set_footer(text="Sistema Anti-Raid ‚Ä¢ Caos Hub")
        await log_channel.send(embed=embed)
    
    # Remover slowmode
    for channel in guild.text_channels:
        try:
            if channel.slowmode_delay == RAID_CONFIG['slowmode_duration']:
                await channel.edit(slowmode_delay=0)
        except:
            pass

async def check_suspicious_user(member):
    """Verifica se um usu√°rio √© suspeito (conta nova, bot, etc)"""
    # Verificar idade da conta
    account_age = (discord.utils.utcnow() - member.created_at).days
    
    # Conta muito nova
    if account_age < RAID_CONFIG['account_age_min']:
        return True, f"Conta criada h√° {account_age} dias"
    
    # Avatar padr√£o + conta nova
    if member.avatar is None and account_age < 30:
        return True, "Sem avatar + conta nova"
    
    # Nome suspeito (muitos n√∫meros)
    if sum(c.isdigit() for c in member.name) > len(member.name) * 0.7:
        return True, "Nome suspeito (muitos n√∫meros)"
    
    return False, None

async def get_or_create_mute_role(guild):
    """Obt√©m ou cria o cargo de mute"""
    global MUTE_ROLE_ID
    
    # Se j√° temos o ID salvo, tentar usar ele primeiro
    if MUTE_ROLE_ID:
        mute_role = guild.get_role(MUTE_ROLE_ID)
        if mute_role:
            return mute_role
    
    # Procurar cargo existente por nome
    mute_role = discord.utils.get(guild.roles, name="Muted")
    
    # Se n√£o encontrou, procurar por outros nomes comuns
    if not mute_role:
        common_names = ["Muted", "Mutado", "Silenciado", "Mute"]
        for name in common_names:
            mute_role = discord.utils.get(guild.roles, name=name)
            if mute_role:
                break
    
    if not mute_role:
        try:
            # Criar cargo de mute
            mute_role = await guild.create_role(
                name="Muted",
                color=discord.Color.dark_gray(),
                reason="Cargo de mute criado automaticamente pelo bot"
            )
            
            print(f"‚úÖ Cargo 'Muted' criado com ID: {mute_role.id}")
            
            # Configurar permiss√µes em todos os canais
            channels_configured = 0
            for channel in guild.channels:
                try:
                    if isinstance(channel, discord.TextChannel):
                        await channel.set_permissions(mute_role, send_messages=False, add_reactions=False)
                        channels_configured += 1
                    elif isinstance(channel, discord.VoiceChannel):
                        await channel.set_permissions(mute_role, speak=False, connect=False)
                        channels_configured += 1
                except Exception as e:
                    print(f"Erro ao configurar permiss√µes no canal {channel.name}: {e}")
                    continue
            
            print(f"‚úÖ Permiss√µes configuradas em {channels_configured} canais")
                    
        except Exception as e:
            print(f"‚ùå Erro ao criar cargo de mute: {e}")
            return None
    
    # Salvar o ID para uso futuro
    MUTE_ROLE_ID = mute_role.id
    return mute_role

async def send_adv_log(ctx, usuario, motivo, warning_count, action_type="advertencia"):
    """Envia log detalhado de advert√™ncia para o canal espec√≠fico"""
    try:
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if not log_channel:
            return
        
        # Definir cores e √≠cones baseado no n√≠vel
        if warning_count == 1:
            color = 0xffff00  # Amarelo
            level_icon = "üü°"
            level_name = "ADV 1"
            level_desc = "Primeira Advert√™ncia"
            threat_level = "BAIXO"
        elif warning_count == 2:
            color = 0xff8c00  # Laranja
            level_icon = "üü†"
            level_name = "ADV 2"
            level_desc = "Segunda Advert√™ncia"
            threat_level = "M√âDIO"
        else:
            color = 0xff0000  # Vermelho
            level_icon = "üî¥"
            level_name = "ADV 3"
            level_desc = "Terceira Advert√™ncia + Ban"
            threat_level = "CR√çTICO"
        
        # Criar embed principal
        if action_type == "advertencia":
            embed = discord.Embed(
                title=f"üö® SISTEMA DE ADVERT√äNCIAS - {level_desc.upper()}",
                description=f"{level_icon} **{level_name}** aplicada com sucesso",
                color=color,
                timestamp=ctx.message.created_at
            )
        else:  # remo√ß√£o
            if warning_count == 0:
                embed = discord.Embed(
                    title="üßπ SISTEMA DE ADVERT√äNCIAS - REMO√á√ÉO TOTAL",
                    description="‚úÖ **Todas as advert√™ncias removidas** com sucesso",
                    color=0x00ff00,
                    timestamp=ctx.message.created_at
                )
            else:
                embed = discord.Embed(
                    title="üîÑ SISTEMA DE ADVERT√äNCIAS - REDU√á√ÉO",
                    description="‚úÖ **Advert√™ncia removida** com sucesso",
                    color=0x00ff00,
                    timestamp=ctx.message.created_at
                )
        
        # Informa√ß√µes do usu√°rio punido
        embed.add_field(
            name="üë§ USU√ÅRIO PUNIDO",
            value=f"**Nome:** {usuario.display_name}\n**Tag:** {usuario.name}#{usuario.discriminator}\n**ID:** `{usuario.id}`\n**Men√ß√£o:** {usuario.mention}",
            inline=True
        )
        
        # Informa√ß√µes do moderador
        embed.add_field(
            name="üëÆ MODERADOR",
            value=f"**Nome:** {ctx.author.display_name}\n**Tag:** {ctx.author.name}#{ctx.author.discriminator}\n**ID:** `{ctx.author.id}`\n**Men√ß√£o:** {ctx.author.mention}",
            inline=True
        )
        
        if action_type == "advertencia":
            # N√≠vel de amea√ßa
            embed.add_field(
                name="‚ö†Ô∏è N√çVEL DE AMEA√áA",
                value=f"**Status:** {threat_level}\n**Advert√™ncias:** {warning_count}/3\n**Pr√≥xima a√ß√£o:** {'Ban autom√°tico' if warning_count >= 2 else f'ADV {warning_count + 1}'}",
                inline=True
            )
        
        # Motivo detalhado
        embed.add_field(
            name="üìù MOTIVO DA A√á√ÉO",
            value=f"```{motivo}```",
            inline=False
        )
        
        if action_type == "advertencia":
            # Detalhes da puni√ß√£o
            if warning_count == 1:
                punishment_details = f"üü° **Cargo aplicado:** <@&{ADV_CARGO_1_ID}>\n‚ö†Ô∏è **Consequ√™ncia:** Aviso inicial\nüì¢ **Orienta√ß√£o:** Melhore a conduta"
            elif warning_count == 2:
                punishment_details = f"üü† **Cargo aplicado:** <@&{ADV_CARGO_2_ID}>\nüö® **Consequ√™ncia:** Advert√™ncia s√©ria\n‚ö†Ô∏è **Orienta√ß√£o:** √öLTIMA CHANCE"
            else:
                punishment_details = f"üî¥ **Cargo aplicado:** <@&{ADV_CARGO_3_ID}>\nüíÄ **Consequ√™ncia:** Banimento autom√°tico\nüö´ **Status:** Usu√°rio removido"
            
            embed.add_field(
                name="‚öñÔ∏è DETALHES DA PUNI√á√ÉO",
                value=punishment_details,
                inline=False
            )
        
        # Informa√ß√µes do servidor
        embed.add_field(
            name="üè† INFORMA√á√ïES DO SERVIDOR",
            value=f"**Servidor:** {ctx.guild.name}\n**Canal:** #{ctx.channel.name}\n**Comando:** `{ctx.message.content.split()[0]}`",
            inline=True
        )
        
        # Informa√ß√µes t√©cnicas
        embed.add_field(
            name="üîß INFORMA√á√ïES T√âCNICAS",
            value=f"**Timestamp:** <t:{int(ctx.message.created_at.timestamp())}:F>\n**Message ID:** `{ctx.message.id}`\n**Sistema:** Caos Bot v2.0",
            inline=True
        )
        
        if action_type == "advertencia" and warning_count >= 3:
            # Informa√ß√µes do ban
            embed.add_field(
                name="üî® DETALHES DO BANIMENTO",
                value=f"**Motivo do ban:** 3 advert√™ncias atingidas\n**Tipo:** Autom√°tico\n**Revers√≠vel:** N√£o\n**Data:** <t:{int(ctx.message.created_at.timestamp())}:F>",
                inline=False
            )
        
        # Footer personalizado
        embed.set_footer(
            text=f"Sistema de Modera√ß√£o ‚Ä¢ Caos Hub | Log ID: {ctx.message.id}",
            icon_url=ctx.guild.icon.url if ctx.guild.icon else None
        )
        
        # Thumbnail do usu√°rio
        embed.set_thumbnail(url=usuario.display_avatar.url)
        
        # Autor do embed
        embed.set_author(
            name=f"A√ß√£o executada por {ctx.author.display_name}",
            icon_url=ctx.author.display_avatar.url
        )
        
        await log_channel.send(embed=embed)
        
    except Exception as e:
        print(f"Erro ao enviar log: {e}")

@bot.command(name='adv')
@is_sub_moderator_or_higher()
async def adv_command(ctx, usuario: discord.Member = None, *, motivo=None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `.adv @usu√°rio [motivo]`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    # VERIFICA√á√ÉO DE HIERARQUIA
    can_punish, target_role = can_moderate(ctx.author, usuario)
    if not can_punish:
        mod_role, mod_level = get_highest_staff_role(ctx.author)
        embed = discord.Embed(
            title="üõ°Ô∏è Sem Permiss√£o - Hierarquia",
            description=f"‚ùå **Voc√™ n√£o pode advertir este usu√°rio!**\n\n"
                       f"**Seu cargo:** {mod_role.mention if mod_role else 'Nenhum'}\n"
                       f"**Cargo do alvo:** {target_role.mention if target_role else 'Nenhum'}\n\n"
                       f"‚öñÔ∏è **Regra:** Voc√™ s√≥ pode advertir membros com cargo **inferior** ao seu na hierarquia.\n\n"
                       f"**Hierarquia atual:**\n"
                       f"üëë [FND] Founder\n"
                       f"üíé [SDN] Sub Dono\n"
                       f"üî¥ [ADM] Administrador\n"
                       f"üü† [STF] Staff\n"
                       f"üü° [MOD] Moderador\n"
                       f"üü¢ [SBM] Sub Moderador\n"
                       f"‚ö™ Membro",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    # Definir motivo padr√£o se n√£o fornecido
    if motivo is None:
        motivo = "Sem motivo especificado"
    
    # Verificar se o usu√°rio j√° tem advert√™ncias
    user_id = usuario.id
    if user_id not in user_warnings:
        user_warnings[user_id] = 0
    
    user_warnings[user_id] += 1
    warning_count = user_warnings[user_id]
    
    # Salvar detalhes da advert√™ncia
    if user_id not in user_warnings_details:
        user_warnings_details[user_id] = []
    
    import datetime
    user_warnings_details[user_id].append({
        'level': warning_count,
        'motivo': motivo,
        'moderador': ctx.author.display_name,
        'moderador_id': ctx.author.id,
        'timestamp': datetime.datetime.now(),
        'channel': ctx.channel.name
    })
    
    # Salvar dados no arquivo
    save_warnings_data()
    
    try:
        if warning_count == 1:
            # Primeira advert√™ncia - ADV 1
            cargo = ctx.guild.get_role(ADV_CARGO_1_ID)
            if cargo:
                await usuario.add_roles(cargo)
                
                embed = discord.Embed(
                    title="‚ö†Ô∏è PRIMEIRA ADVERT√äNCIA",
                    description=f"**{usuario.display_name}** recebeu sua primeira advert√™ncia!",
                    color=0xffff00
                )
                embed.add_field(
                    name="üìã Detalhes",
                    value="üü° **ADV 1** - Aviso inicial\n‚ö†Ô∏è Comportamento inadequado detectado\nüì¢ Melhore sua conduta no servidor!",
                    inline=False
                )
                embed.add_field(
                    name="üìù Motivo",
                    value=f"`{motivo}`",
                    inline=False
                )
                embed.add_field(
                    name="‚è≠Ô∏è Pr√≥ximo N√≠vel",
                    value="üü† **ADV 2** - Advert√™ncia s√©ria",
                    inline=True
                )
                embed.add_field(
                    name="üë§ Usu√°rio",
                    value=usuario.mention,
                    inline=True
                )
                embed.add_field(
                    name="üëÆ Moderador",
                    value=ctx.author.mention,
                    inline=True
                )
                embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
                await ctx.reply(embed=embed)
                
                # Enviar log detalhado
                await send_adv_log(ctx, usuario, motivo, warning_count)
            else:
                await ctx.reply("‚ùå Cargo ADV 1 n√£o encontrado!")
                
        elif warning_count == 2:
            # Segunda advert√™ncia - ADV 2 (remove ADV 1)
            cargo_antigo = ctx.guild.get_role(ADV_CARGO_1_ID)
            cargo_novo = ctx.guild.get_role(ADV_CARGO_2_ID)
            
            if cargo_antigo and cargo_antigo in usuario.roles:
                await usuario.remove_roles(cargo_antigo)
            
            if cargo_novo:
                await usuario.add_roles(cargo_novo)
                
                embed = discord.Embed(
                    title="üö® SEGUNDA ADVERT√äNCIA",
                    description=f"**{usuario.display_name}** est√° em situa√ß√£o cr√≠tica!",
                    color=0xff8c00
                )
                embed.add_field(
                    name="üìã Detalhes",
                    value="üü† **ADV 2** - Advert√™ncia s√©ria\nüö® Comportamento persistente inadequado\n‚ö†Ô∏è √öLTIMA CHANCE antes do banimento!",
                    inline=False
                )
                embed.add_field(
                    name="üìù Motivo",
                    value=f"`{motivo}`",
                    inline=False
                )
                embed.add_field(
                    name="‚è≠Ô∏è Pr√≥ximo N√≠vel",
                    value="üî¥ **ADV 3** - BANIMENTO AUTOM√ÅTICO",
                    inline=True
                )
                embed.add_field(
                    name="üë§ Usu√°rio",
                    value=usuario.mention,
                    inline=True
                )
                embed.add_field(
                    name="üëÆ Moderador",
                    value=ctx.author.mention,
                    inline=True
                )
                embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
                await ctx.reply(embed=embed)
                
                # Enviar log detalhado
                await send_adv_log(ctx, usuario, motivo, warning_count)
            else:
                await ctx.reply("‚ùå Cargo ADV 2 n√£o encontrado!")
                
        elif warning_count >= 3:
            # Terceira advert√™ncia - BAN (remove cargos anteriores)
            cargo_adv1 = ctx.guild.get_role(ADV_CARGO_1_ID)
            cargo_adv2 = ctx.guild.get_role(ADV_CARGO_2_ID)
            cargo_adv3 = ctx.guild.get_role(ADV_CARGO_3_ID)
            
            # Remover cargos anteriores
            if cargo_adv1 and cargo_adv1 in usuario.roles:
                await usuario.remove_roles(cargo_adv1)
            if cargo_adv2 and cargo_adv2 in usuario.roles:
                await usuario.remove_roles(cargo_adv2)
            
            if cargo_adv3:
                await usuario.add_roles(cargo_adv3)
            
            embed = discord.Embed(
                title="üî® BANIMENTO AUTOM√ÅTICO",
                description=f"**{usuario.display_name}** foi banido do servidor!",
                color=0xff0000
            )
            embed.add_field(
                name="üìã Detalhes",
                value="üî¥ **ADV 3** - Banimento definitivo\nüíÄ Tr√™s advert√™ncias atingidas\nüö´ Usu√°rio removido permanentemente",
                inline=False
            )
            embed.add_field(
                name="üìù Motivo Final",
                value=f"`{motivo}`",
                inline=False
            )
            embed.add_field(
                name="‚öñÔ∏è Motivo do Ban",
                value="3 advert√™ncias - Ban autom√°tico",
                inline=True
            )
            embed.add_field(
                name="üë§ Usu√°rio Banido",
                value=f"{usuario.mention}\n`{usuario.id}`",
                inline=True
            )
            embed.add_field(
                name="üëÆ Moderador",
                value=ctx.author.mention,
                inline=True
            )
            embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
            await ctx.reply(embed=embed)
            
            # Enviar log detalhado
            await send_adv_log(ctx, usuario, motivo, warning_count)
            
            # Banir o usu√°rio
            await usuario.ban(reason=f"3 advert√™ncias - Ban autom√°tico | √öltimo motivo: {motivo}")
            
            # Resetar contador
            user_warnings[user_id] = 0
            
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para gerenciar cargos ou banir usu√°rios!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao aplicar advert√™ncia: {e}")

@adv_command.error
async def adv_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='radv')
@is_sub_moderator_or_higher()
async def radv_command(ctx, usuario: discord.Member = None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!radv @usu√°rio`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    user_id = usuario.id
    
    # Verificar se o usu√°rio tem advert√™ncias
    if user_id not in user_warnings or user_warnings[user_id] == 0:
        embed = discord.Embed(
            title="‚ÑπÔ∏è Sem Advert√™ncias",
            description=f"**{usuario.display_name}** n√£o possui advert√™ncias para remover.",
            color=0x00ff00
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    try:
        current_warnings = user_warnings[user_id]
        new_warnings = current_warnings - 1
        
        # Determinar qual cargo remover e qual aplicar
        cargo_adv1 = ctx.guild.get_role(ADV_CARGO_1_ID)
        cargo_adv2 = ctx.guild.get_role(ADV_CARGO_2_ID)
        cargo_adv3 = ctx.guild.get_role(ADV_CARGO_3_ID)
        
        cargo_removido = ""
        cargo_aplicado = ""
        
        if current_warnings == 3:
            # De ADV 3 para ADV 2
            if cargo_adv3 and cargo_adv3 in usuario.roles:
                await usuario.remove_roles(cargo_adv3)
                cargo_removido = "ADV 3"
            if cargo_adv2:
                await usuario.add_roles(cargo_adv2)
                cargo_aplicado = "ADV 2"
        elif current_warnings == 2:
            # De ADV 2 para ADV 1
            if cargo_adv2 and cargo_adv2 in usuario.roles:
                await usuario.remove_roles(cargo_adv2)
                cargo_removido = "ADV 2"
            if cargo_adv1:
                await usuario.add_roles(cargo_adv1)
                cargo_aplicado = "ADV 1"
        elif current_warnings == 1:
            # De ADV 1 para sem advert√™ncia
            if cargo_adv1 and cargo_adv1 in usuario.roles:
                await usuario.remove_roles(cargo_adv1)
                cargo_removido = "ADV 1"
            cargo_aplicado = "Nenhum"
        
        # Atualizar contador
        user_warnings[user_id] = new_warnings
        
        embed = discord.Embed(
            title="‚úÖ ADVERT√äNCIA REMOVIDA",
            description=f"**{usuario.display_name}** teve 1 advert√™ncia removida!",
            color=0x00ff00
        )
        embed.add_field(
            name="üìã Detalhes",
            value=f"üîÑ **Advert√™ncias:** {current_warnings} ‚Üí {new_warnings}\nüóëÔ∏è **Cargo removido:** {cargo_removido}\n‚ú® **Cargo atual:** {cargo_aplicado}\nüìâ N√≠vel de advert√™ncia reduzido!",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        # Enviar log de remo√ß√£o
        await send_adv_log(ctx, usuario, f"Advert√™ncia removida: {current_warnings} ‚Üí {new_warnings}", new_warnings, "remocao")
        
        # Salvar dados no arquivo
        save_warnings_data()
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para gerenciar cargos!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao remover advert√™ncias: {e}")

@radv_command.error
async def radv_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='radvall')
@is_sub_moderator_or_higher()
async def radvall_command(ctx, usuario: discord.Member = None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!radvall @usu√°rio`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    user_id = usuario.id
    
    # DETEC√á√ÉO INTELIGENTE - Verificar cargos reais do usu√°rio
    cargo_adv1 = ctx.guild.get_role(ADV_CARGO_1_ID)
    cargo_adv2 = ctx.guild.get_role(ADV_CARGO_2_ID)
    cargo_adv3 = ctx.guild.get_role(ADV_CARGO_3_ID)
    
    tem_adv = False
    if (cargo_adv1 and cargo_adv1 in usuario.roles) or \
       (cargo_adv2 and cargo_adv2 in usuario.roles) or \
       (cargo_adv3 and cargo_adv3 in usuario.roles):
        tem_adv = True
    
    # Verificar se o usu√°rio tem advert√™ncias (cargos OU contador)
    if not tem_adv and (user_id not in user_warnings or user_warnings[user_id] == 0):
        embed = discord.Embed(
            title="‚ÑπÔ∏è Sem Advert√™ncias",
            description=f"**{usuario.display_name}** n√£o possui advert√™ncias para remover.",
            color=0x00ff00
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    try:
        # Guardar quantas ADVs tinha
        advs_anteriores = user_warnings.get(user_id, 0)
        
        # Remover cargos
        roles_removidos = []
        
        if cargo_adv1 and cargo_adv1 in usuario.roles:
            await usuario.remove_roles(cargo_adv1, reason=f"Todas ADVs removidas por {ctx.author}")
            roles_removidos.append("ADV 1")
        
        if cargo_adv2 and cargo_adv2 in usuario.roles:
            await usuario.remove_roles(cargo_adv2, reason=f"Todas ADVs removidas por {ctx.author}")
            roles_removidos.append("ADV 2")
        
        if cargo_adv3 and cargo_adv3 in usuario.roles:
            await usuario.remove_roles(cargo_adv3, reason=f"Todas ADVs removidas por {ctx.author}")
            roles_removidos.append("ADV 3")
        
        # Resetar contador
        user_warnings[user_id] = 0
        save_warnings_data()
        
        embed = discord.Embed(
            title="üßπ TODAS ADVERT√äNCIAS REMOVIDAS",
            description=f"**{usuario.display_name}** teve TODAS as advert√™ncias removidas!",
            color=0x00ff00
        )
        embed.add_field(
            name="üìã Detalhes",
            value=f"üßπ **Advert√™ncias anteriores:** {advs_anteriores}\n‚ú® **Cargos removidos:** {', '.join(roles_removidos) if roles_removidos else 'Nenhum'}\nüéâ Usu√°rio com ficha limpa!",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Advert√™ncias ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        # Enviar log de remo√ß√£o total
        await send_adv_log(ctx, usuario, "Todas as advert√™ncias removidas pelo moderador", 0, "remocao")
        
        # Salvar dados no arquivo
        save_warnings_data()
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para gerenciar cargos!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao remover advert√™ncias: {e}")

@radvall_command.error
async def radvall_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

# COMANDO SEEADV REMOVIDO - ESTAVA BUGADO

@bot.command(name='debugadv')
@is_sub_moderator_or_higher()
async def debug_adv_command(ctx):
    """Comando de debug para verificar advert√™ncias"""
    
    # Verificar cargos
    cargo_adv1 = ctx.guild.get_role(ADV_CARGO_1_ID)
    cargo_adv2 = ctx.guild.get_role(ADV_CARGO_2_ID) 
    cargo_adv3 = ctx.guild.get_role(ADV_CARGO_3_ID)
    
    debug_text = f"üîç **DEBUG DE ADVERT√äNCIAS**\n\n"
    debug_text += f"**CARGOS ADV:**\n"
    debug_text += f"üü° ADV 1 (ID: {ADV_CARGO_1_ID}): {cargo_adv1.name if cargo_adv1 else '‚ùå N√ÉO ENCONTRADO'}\n"
    debug_text += f"üü† ADV 2 (ID: {ADV_CARGO_2_ID}): {cargo_adv2.name if cargo_adv2 else '‚ùå N√ÉO ENCONTRADO'}\n"
    debug_text += f"üî¥ ADV 3 (ID: {ADV_CARGO_3_ID}): {cargo_adv3.name if cargo_adv3 else '‚ùå N√ÉO ENCONTRADO'}\n\n"
    
    # Verificar usu√°rios com cargos
    users_with_adv = []
    for member in ctx.guild.members:
        if member.bot:
            continue
            
        has_adv1 = cargo_adv1 and cargo_adv1 in member.roles
        has_adv2 = cargo_adv2 and cargo_adv2 in member.roles  
        has_adv3 = cargo_adv3 and cargo_adv3 in member.roles
        
        if has_adv1 or has_adv2 or has_adv3:
            roles = []
            if has_adv1: roles.append("ADV1")
            if has_adv2: roles.append("ADV2") 
            if has_adv3: roles.append("ADV3")
            users_with_adv.append(f"‚Ä¢ {member.display_name}: {', '.join(roles)}")
    
    debug_text += f"**USU√ÅRIOS COM CARGOS ADV:** {len(users_with_adv)}\n"
    if users_with_adv:
        debug_text += "\n".join(users_with_adv)  # TODOS os usu√°rios
    else:
        debug_text += "Nenhum usu√°rio encontrado com cargos ADV"
    
    debug_text += f"\n\n**DADOS SALVOS:** {len(user_warnings)} usu√°rios\n"
    for user_id, warnings in user_warnings.items():  # TODOS os dados salvos
        if warnings > 0:
            member = ctx.guild.get_member(user_id)
            name = member.display_name if member else f"ID:{user_id}"
            debug_text += f"‚Ä¢ {name}: {warnings} advert√™ncias\n"
    
    embed = discord.Embed(
        title="üîç DEBUG DE ADVERT√äNCIAS",
        description=debug_text[:2000],
        color=0x00ffff
    )
    
    await ctx.reply(embed=embed)

@bot.command(name='mute')
@is_sub_moderator_or_higher()
async def mute_command(ctx, usuario: discord.Member = None, *, args=None):
    """Muta usu√°rio com tempo opcional - Uso: .mute @usu√°rio motivo tempo"""
    
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!",
            color=0xff0000
        )
        embed.add_field(
            name="üìù Uso Correto",
            value="`.mute @usu√°rio [motivo] [tempo]`",
            inline=False
        )
        embed.add_field(
            name="üìù Exemplos",
            value="`.mute @Jo√£o spam` (indefinido)\n`.mute @Jo√£o flood 1h` (1 hora)\n`.mute @Jo√£o toxic 30m` (30 minutos)\n`.mute @Jo√£o raid 2d` (2 dias)",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    if usuario == ctx.author:
        await ctx.reply("‚ùå Voc√™ n√£o pode se mutar!")
        return
    
    if usuario.top_role >= ctx.author.top_role:
        await ctx.reply("‚ùå Voc√™ n√£o pode mutar este usu√°rio!")
        return
    
    # Processar argumentos (motivo e tempo)
    motivo = "Sem motivo especificado"
    duracao_texto = "Indefinido"
    duracao_minutos = None
    
    if args:
        import re
        # Procurar padr√£o de tempo (1h, 30m, 2d, etc)
        tempo_match = re.search(r'(\d+)([smhd])', args.lower())
        
        if tempo_match:
            numero = int(tempo_match.group(1))
            unidade = tempo_match.group(2)
            
            # Converter para minutos
            if unidade == 's':  # segundos
                duracao_minutos = numero // 60 if numero >= 60 else 1
                duracao_texto = f"{numero} segundos"
            elif unidade == 'm':  # minutos
                duracao_minutos = numero
                duracao_texto = f"{numero} minutos"
            elif unidade == 'h':  # horas
                duracao_minutos = numero * 60
                duracao_texto = f"{numero} horas"
            elif unidade == 'd':  # dias
                duracao_minutos = numero * 1440
                duracao_texto = f"{numero} dias"
            
            # Limitar a 28 dias (limite do Discord)
            if duracao_minutos > 40320:
                duracao_minutos = 40320
                duracao_texto = "28 dias (m√°ximo)"
            
            # Remover tempo do motivo
            motivo = args.replace(tempo_match.group(0), '').strip()
        else:
            motivo = args
        
        if not motivo:
            motivo = "Sem motivo especificado"
    
    try:
        # Obter ou criar cargo de mute
        mute_role = await get_or_create_mute_role(ctx.guild)
        if not mute_role:
            await ctx.reply("‚ùå Erro ao criar cargo de mute!")
            return
        
        # Verificar se j√° est√° mutado
        if mute_role in usuario.roles:
            await ctx.reply("‚ùå Este usu√°rio j√° est√° mutado!")
            return
        
        # Aplicar mute
        await usuario.add_roles(mute_role, reason=f"Mutado por {ctx.author} | Motivo: {motivo} | Dura√ß√£o: {duracao_texto}")
        
        # Se tem dura√ß√£o, agendar unmute
        if duracao_minutos:
            asyncio.create_task(auto_unmute(usuario, mute_role, duracao_minutos))
        
        embed = discord.Embed(
            title="üîá USU√ÅRIO MUTADO",
            description=f"**{usuario.display_name}** foi mutado com sucesso!",
            color=0x808080
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{motivo}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.add_field(
            name="‚è∞ Dura√ß√£o",
            value=duracao_texto,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except discord.Forbidden:
        pass
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao mutar usu√°rio: {e}")

async def auto_unmute(usuario, mute_role, minutos):
    """Remove mute automaticamente ap√≥s o tempo"""
    import asyncio
    await asyncio.sleep(minutos * 60)
    try:
        if mute_role in usuario.roles:
            await usuario.remove_roles(mute_role, reason="Tempo de mute expirado")
    except:
        pass

@mute_command.error
async def mute_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='unmute')
@is_sub_moderator_or_higher()
async def unmute_command(ctx, usuario: discord.Member = None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `.unmute @usu√°rio`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    try:
        # Obter cargo de mute
        mute_role = await get_or_create_mute_role(ctx.guild)
        if not mute_role:
            await ctx.reply("‚ùå Erro ao encontrar/criar cargo de mute!")
            return
        
        # Verificar se est√° mutado (buscar por qualquer cargo de mute poss√≠vel)
        user_mute_roles = []
        common_mute_names = ["Muted", "Mutado", "Silenciado", "Mute"]
        
        for role in usuario.roles:
            if role.name in common_mute_names or role == mute_role:
                user_mute_roles.append(role)
        
        if not user_mute_roles:
            await ctx.reply("‚ùå Este usu√°rio n√£o est√° mutado!")
            return
        
        # Remover todos os cargos de mute encontrados
        for mute_role_to_remove in user_mute_roles:
            try:
                await usuario.remove_roles(mute_role_to_remove, reason=f"Desmutado por {ctx.author}")
            except Exception as e:
                print(f"Erro ao remover cargo {mute_role_to_remove.name}: {e}")
                continue
        
        embed = discord.Embed(
            title="üîä MUTE REMOVIDO",
            description=f"**{usuario.display_name}** pode falar novamente!",
            color=0x00ff00
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except discord.Forbidden:
        pass  # N√£o mostrar erro se a a√ß√£o foi executada
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao desmutar usu√°rio: {e}")

@unmute_command.error
async def unmute_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

# COMANDO RADVALLSERVER REMOVIDO - CONFORME SOLICITADO

# ========================================
# COMANDOS B√ÅSICOS DE MODERA√á√ÉO
# ========================================

@bot.command(name='kick')
@is_sub_moderator_or_higher()
async def kick_command(ctx, usuario: discord.Member = None, *, motivo="Sem motivo especificado"):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!kick @usu√°rio [motivo]`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario == ctx.author:
        await ctx.reply("‚ùå Voc√™ n√£o pode se expulsar!")
        return
    
    if usuario.top_role >= ctx.author.top_role:
        await ctx.reply("‚ùå Voc√™ n√£o pode expulsar este usu√°rio!")
        return
    
    try:
        # Salvar informa√ß√µes antes de kickar
        user_name = usuario.name
        user_id = usuario.id
        user_avatar = usuario.display_avatar.url
        user_created_at = usuario.created_at
        user_joined_at = usuario.joined_at
        
        # Mensagem de confirma√ß√£o no canal
        embed = discord.Embed(
            title="üë¢ USU√ÅRIO EXPULSO",
            description=f"**{usuario.display_name}** foi expulso do servidor!",
            color=0xff8c00
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{motivo}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=f"{usuario.mention}\n`{usuario.id}`",
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        # Executar kick
        await usuario.kick(reason=f"Expulso por {ctx.author} | Motivo: {motivo}")
        
        # LOG DETALHADA DE KICK
        log_channel = ctx.guild.get_channel(KICK_LOG_CHANNEL_ID)
        if log_channel:
            log_embed = discord.Embed(
                title="üë¢ USU√ÅRIO EXPULSO (KICK)",
                description=f"Um membro foi expulso do servidor",
                color=0xFFA500,  # LARANJA
                timestamp=datetime.now()
            )
            
            log_embed.add_field(
                name="üë§ Usu√°rio Expulso",
                value=f"**Nome:** {user_name}\n**ID:** `{user_id}`",
                inline=True
            )
            
            log_embed.add_field(
                name="üëÆ Moderador",
                value=f"**Nome:** {ctx.author.name}\n**Tag:** {ctx.author.mention}\n**ID:** `{ctx.author.id}`",
                inline=True
            )
            
            log_embed.add_field(name="\u200b", value="\u200b", inline=True)
            
            log_embed.add_field(
                name="üìù Motivo",
                value=f"```{motivo}```",
                inline=False
            )
            
            log_embed.add_field(
                name="üìä Informa√ß√µes do Usu√°rio",
                value=f"**Conta criada em:** <t:{int(user_created_at.timestamp())}:F>\n**Entrou no servidor em:** <t:{int(user_joined_at.timestamp())}:F>\n**Tempo no servidor:** {(datetime.now() - user_joined_at.replace(tzinfo=None)).days} dias",
                inline=False
            )
            
            log_embed.add_field(
                name="üìç Canal da A√ß√£o",
                value=f"{ctx.channel.mention} (`{ctx.channel.name}`)",
                inline=False
            )
            
            log_embed.set_thumbnail(url=user_avatar)
            log_embed.set_footer(text=f"Sistema de Logs ‚Ä¢ Kick ID: {user_id}")
            
            await log_channel.send(embed=log_embed)
            print(f"üìã Log de kick registrado para {user_name}")
        
    except discord.Forbidden:
        pass  # N√£o mostrar erro se a a√ß√£o foi executada
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao expulsar usu√°rio: {e}")

@kick_command.error
async def kick_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='ban')
@is_sub_moderator_or_higher()
async def ban_command(ctx, usuario: discord.Member = None, *, motivo="Sem motivo especificado"):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!ban @usu√°rio [motivo]`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    if usuario == ctx.author:
        await ctx.reply("‚ùå Voc√™ n√£o pode se banir!")
        return
    
    if usuario.top_role >= ctx.author.top_role:
        await ctx.reply("‚ùå Voc√™ n√£o pode banir este usu√°rio!")
        return
    
    try:
        embed = discord.Embed(
            title="üî® USU√ÅRIO BANIDO",
            description=f"**{usuario.display_name}** foi banido do servidor!",
            color=0xff0000
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{motivo}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=f"{usuario.mention}\n`{usuario.id}`",
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        await usuario.ban(reason=f"Banido por {ctx.author} | Motivo: {motivo}")
        
    except discord.Forbidden:
        pass  # N√£o mostrar erro se a a√ß√£o foi executada
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao banir usu√°rio: {e}")

@ban_command.error
async def ban_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='timeout')
@is_sub_moderator_or_higher()
async def timeout_command(ctx, usuario: discord.Member = None, *, args=None):
    """Aplica timeout com tempo - Uso: .timeout @usu√°rio motivo tempo"""
    
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!",
            color=0xff0000
        )
        embed.add_field(
            name="üìù Uso Correto",
            value="`.timeout @usu√°rio [motivo] [tempo]`",
            inline=False
        )
        embed.add_field(
            name="üìù Exemplos",
            value="`.timeout @Jo√£o spam 10m` (10 minutos)\n`.timeout @Jo√£o flood 1h` (1 hora)\n`.timeout @Jo√£o toxic 30m` (30 minutos)\n`.timeout @Jo√£o raid 2d` (2 dias)",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    if usuario == ctx.author:
        await ctx.reply("‚ùå Voc√™ n√£o pode se silenciar!")
        return
    
    if usuario.top_role >= ctx.author.top_role:
        await ctx.reply("‚ùå Voc√™ n√£o pode silenciar este usu√°rio!")
        return
    
    # Verificar se j√° est√° em timeout
    if usuario.timed_out_until and usuario.timed_out_until > discord.utils.utcnow():
        await ctx.reply("‚ùå Este usu√°rio j√° est√° em timeout!")
        return
    
    # Processar argumentos (motivo e tempo)
    motivo = "Sem motivo especificado"
    duracao_texto = "10 minutos"
    duracao_minutos = 10  # Padr√£o
    
    if args:
        import re
        # Procurar padr√£o de tempo (1h, 30m, 2d, etc)
        tempo_match = re.search(r'(\d+)([smhd])', args.lower())
        
        if tempo_match:
            numero = int(tempo_match.group(1))
            unidade = tempo_match.group(2)
            
            # Converter para minutos
            if unidade == 's':  # segundos
                duracao_minutos = numero // 60 if numero >= 60 else 1
                duracao_texto = f"{numero} segundos"
            elif unidade == 'm':  # minutos
                duracao_minutos = numero
                duracao_texto = f"{numero} minutos"
            elif unidade == 'h':  # horas
                duracao_minutos = numero * 60
                duracao_texto = f"{numero} horas"
            elif unidade == 'd':  # dias
                duracao_minutos = numero * 1440
                duracao_texto = f"{numero} dias"
            
            # Limitar a 28 dias (limite do Discord)
            if duracao_minutos > 40320:
                duracao_minutos = 40320
                duracao_texto = "28 dias (m√°ximo)"
            
            # Remover tempo do motivo
            motivo = args.replace(tempo_match.group(0), '').strip()
        else:
            motivo = args
        
        if not motivo:
            motivo = "Sem motivo especificado"
    
    try:
        # Calcular dura√ß√£o do timeout (CORRIGIDO - usar datetime.timedelta)
        from datetime import timedelta
        timeout_duration = discord.utils.utcnow() + timedelta(minutes=duracao_minutos)
        
        # Aplicar timeout
        await usuario.timeout(timeout_duration, reason=f"Timeout por {ctx.author.display_name} | Motivo: {motivo}")
        
        embed = discord.Embed(
            title="üîá USU√ÅRIO EM TIMEOUT",
            description=f"**{usuario.display_name}** foi silenciado com sucesso!",
            color=0xffa500
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{motivo}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.add_field(
            name="‚è∞ Dura√ß√£o",
            value=duracao_texto,
            inline=True
        )
        embed.add_field(
            name="üìÖ Expira em",
            value=f"<t:{int(timeout_duration.timestamp())}:F>",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para aplicar timeout neste usu√°rio!")
    except discord.HTTPException as e:
        await ctx.reply(f"‚ùå Erro do Discord ao aplicar timeout: {e}")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro inesperado ao silenciar usu√°rio: {e}")

@timeout_command.error
async def timeout_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='untimeout')
@is_sub_moderator_or_higher()
async def untimeout_command(ctx, usuario: discord.Member = None):
    if usuario is None:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description="Voc√™ precisa mencionar um usu√°rio!\n\n**Uso:** `!untimeout @usu√°rio`",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return
    
    try:
        if usuario.timed_out_until is None:
            await ctx.reply("‚ùå Este usu√°rio n√£o est√° silenciado!")
            return
        
        embed = discord.Embed(
            title="üîä SILENCIAMENTO REMOVIDO",
            description=f"**{usuario.display_name}** pode falar novamente!",
            color=0x00ff00
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=usuario.mention,
            inline=True
        )
        embed.add_field(
            name="üëÆ Moderador",
            value=ctx.author.mention,
            inline=True
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
        await usuario.timeout(None, reason=f"Timeout removido por {ctx.author}")
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para remover timeout!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao remover timeout: {e}")

@untimeout_command.error
async def untimeout_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='clear')
@is_sub_moderator_or_higher()
async def clear_command(ctx, quantidade: int = 10):
    if quantidade > 100:
        quantidade = 100
    elif quantidade < 1:
        quantidade = 1
    
    try:
        deleted = await ctx.channel.purge(limit=quantidade + 1)  # +1 para incluir o comando
        
        embed = discord.Embed(
            title="üßπ MENSAGENS LIMPAS",
            description=f"**{len(deleted) - 1}** mensagens foram deletadas!",
            color=0x00ff00
        )
        embed.add_field(
            name="üìä Detalhes",
            value=f"**Canal:** {ctx.channel.mention}\n**Moderador:** {ctx.author.mention}",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        
        msg = await ctx.send(embed=embed)
        await asyncio.sleep(3)
        await msg.delete()
        
    except discord.Forbidden:
        await ctx.reply("‚ùå N√£o tenho permiss√£o para deletar mensagens!")
    except Exception as e:
        await ctx.reply(f"‚ùå Erro ao limpar mensagens: {e}")

@clear_command.error
async def clear_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.reply("‚ùå Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!")

@bot.command(name='restart')
@commands.has_permissions(administrator=True)
async def restart_command(ctx):
    """Reinicia o bot para resolver problemas de duplica√ß√£o"""
    embed = discord.Embed(
        title="üîÑ REINICIANDO BOT",
        description="O bot ser√° reiniciado em 3 segundos...",
        color=0xffaa00
    )
    embed.add_field(
        name="‚ö†Ô∏è Aten√ß√£o",
        value="Isso vai resolver problemas de:\n‚Ä¢ Mensagens duplicadas\n‚Ä¢ Comandos travados\n‚Ä¢ Cache corrompido",
        inline=False
    )
    embed.set_footer(text="Sistema de Manuten√ß√£o ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)
    
    await asyncio.sleep(3)
    
    # Salvar dados antes de reiniciar
    save_warnings_data()
    save_role_config()
    
    # Reiniciar o bot
    await bot.close()
    
    # No Render, o bot reinicia automaticamente ap√≥s fechar
    import sys
    import os
    os.execv(sys.executable, ['python'] + sys.argv)

@restart_command.error
async def restart_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para reiniciar o bot!")


# ========================================
# COMANDO .SCAN - PEGAR TODOS OS IDS DO SERVIDOR
# ========================================
@bot.command(name='scan')
@commands.has_permissions(administrator=True)
async def scan_server(ctx):
    """Escaneia e mostra TODOS os IDs do servidor (cargos, canais, categorias, etc)"""
    
    guild = ctx.guild
    
    # Criar arquivo de texto com todos os IDs
    scan_text = f"üìä SCAN COMPLETO DO SERVIDOR: {guild.name}\n"
    scan_text += f"=" * 60 + "\n\n"
    
    # CARGOS
    scan_text += "üè∑Ô∏è CARGOS:\n"
    scan_text += "-" * 60 + "\n"
    for role in guild.roles:
        scan_text += f"Nome: {role.name}\n"
        scan_text += f"ID: {role.id}\n"
        scan_text += f"Cor: {role.color}\n"
        scan_text += f"Posi√ß√£o: {role.position}\n"
        scan_text += f"Mencion√°vel: {role.mentionable}\n"
        scan_text += "-" * 60 + "\n"
    
    # CATEGORIAS DE CANAIS
    scan_text += "\nüìÅ CATEGORIAS:\n"
    scan_text += "-" * 60 + "\n"
    for category in guild.categories:
        scan_text += f"Nome: {category.name}\n"
        scan_text += f"ID: {category.id}\n"
        scan_text += f"Posi√ß√£o: {category.position}\n"
        scan_text += "-" * 60 + "\n"
    
    # CANAIS DE TEXTO
    scan_text += "\nüí¨ CANAIS DE TEXTO:\n"
    scan_text += "-" * 60 + "\n"
    for channel in guild.text_channels:
        scan_text += f"Nome: {channel.name}\n"
        scan_text += f"ID: {channel.id}\n"
        scan_text += f"Categoria: {channel.category.name if channel.category else 'Sem categoria'}\n"
        scan_text += f"Posi√ß√£o: {channel.position}\n"
        scan_text += "-" * 60 + "\n"
    
    # CANAIS DE VOZ
    scan_text += "\nüîä CANAIS DE VOZ:\n"
    scan_text += "-" * 60 + "\n"
    for channel in guild.voice_channels:
        scan_text += f"Nome: {channel.name}\n"
        scan_text += f"ID: {channel.id}\n"
        scan_text += f"Categoria: {channel.category.name if channel.category else 'Sem categoria'}\n"
        scan_text += f"Posi√ß√£o: {channel.position}\n"
        scan_text += "-" * 60 + "\n"
    
    # EMOJIS
    scan_text += "\nüòÄ EMOJIS PERSONALIZADOS:\n"
    scan_text += "-" * 60 + "\n"
    for emoji in guild.emojis:
        scan_text += f"Nome: {emoji.name}\n"
        scan_text += f"ID: {emoji.id}\n"
        scan_text += f"Animado: {emoji.animated}\n"
        scan_text += "-" * 60 + "\n"
    
    # INFORMA√á√ïES DO SERVIDOR
    scan_text += f"\nüåê INFORMA√á√ïES DO SERVIDOR:\n"
    scan_text += "-" * 60 + "\n"
    scan_text += f"Nome: {guild.name}\n"
    scan_text += f"ID: {guild.id}\n"
    scan_text += f"Dono: {guild.owner.name} (ID: {guild.owner.id})\n"
    scan_text += f"Regi√£o: {guild.preferred_locale}\n"
    scan_text += f"Membros: {guild.member_count}\n"
    scan_text += f"Criado em: {guild.created_at.strftime('%d/%m/%Y %H:%M:%S')}\n"
    scan_text += "-" * 60 + "\n"
    
    # Salvar em arquivo
    filename = f"scan_{guild.id}.txt"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(scan_text)
    
    # Enviar arquivo
    embed = discord.Embed(
        title="‚úÖ SCAN COMPLETO FINALIZADO",
        description=f"Todos os IDs do servidor **{guild.name}** foram escaneados!",
        color=0x00ff00
    )
    embed.add_field(
        name="üìä Estat√≠sticas",
        value=f"**Cargos:** {len(guild.roles)}\n"
              f"**Categorias:** {len(guild.categories)}\n"
              f"**Canais de Texto:** {len(guild.text_channels)}\n"
              f"**Canais de Voz:** {len(guild.voice_channels)}\n"
              f"**Emojis:** {len(guild.emojis)}\n"
              f"**Membros:** {guild.member_count}",
        inline=False
    )
    embed.set_footer(text="Sistema de Scan ‚Ä¢ Caos Hub")
    
    await ctx.reply(embed=embed, file=discord.File(filename))
    
    # Deletar arquivo local
    import os
    os.remove(filename)
    
    print(f"‚úÖ Scan completo do servidor {guild.name} enviado para {ctx.author.name}")

@scan_server.error
async def scan_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar o comando .scan!")




# ========================================
# SISTEMA ANTI-SPAM - VERS√ÉO FINAL
# ========================================

async def auto_moderate_spam(message, violation_type, details=""):
    """Sistema anti-spam: 5 msgs = aviso 1, 4 msgs = aviso 2, 3 msgs = ADV + TIMEOUT"""
    user_id = message.author.id
    
    # Deletar mensagem
    try:
        await message.delete()
    except:
        pass
    
    # Incrementar contador
    if user_id not in spam_warnings:
        spam_warnings[user_id] = 0
    spam_warnings[user_id] += 1
    count = spam_warnings[user_id]
    
    # PRIMEIRO AVISO - EXATAMENTE 5 mensagens
    if count == 5:
        embed = discord.Embed(
            title="‚ö†Ô∏è PRIMEIRO AVISO - SPAM DETECTADO",
            description=f"**{message.author.display_name}**, voc√™ foi detectado fazendo spam!",
            color=0xffff00
        )
        embed.add_field(
            name="üìã Detalhes",
            value=f"**Viola√ß√£o:** {violation_type}\n**Detalhes:** {details}\n**Pr√≥ximo:** Segundo aviso (4 mensagens)",
            inline=False
        )
        embed.set_footer(text="Sistema Anti-Spam ‚Ä¢ Caos Hub")
        await message.channel.send(embed=embed)
        # N√ÉO RESETAR - continua contando
        
    # SEGUNDO AVISO - 9 mensagens (5 + 4)
    elif count == 9:
        embed = discord.Embed(
            title="üö® SEGUNDO AVISO - √öLTIMA CHANCE",
            description=f"**{message.author.display_name}**, PARE DE FAZER SPAM!",
            color=0xff8c00
        )
        embed.add_field(
            name="üìã Detalhes",
            value=f"**Viola√ß√£o:** {violation_type}\n**Detalhes:** {details}\n**Pr√≥ximo:** ADV 1 + Timeout (3 mensagens)",
            inline=False
        )
        embed.set_footer(text="Sistema Anti-Spam ‚Ä¢ Caos Hub")
        await message.channel.send(embed=embed)
        # N√ÉO RESETAR - continua contando
        
    # ADV - 12 mensagens (5 + 4 + 3)
    elif count >= 12:
        # Verificar quantas ADVs o usu√°rio j√° tem (SEM incrementar ainda)
        if user_id not in user_warnings:
            user_warnings[user_id] = 0
        
        # Verificar qual ADV vai receber BASEADO no que j√° tem
        current_adv = user_warnings[user_id]
        
        # Incrementar APENAS quando aplicar ADV
        user_warnings[user_id] += 1
        adv_count = user_warnings[user_id]
        
        # ADV 1 (usu√°rio n√£o tinha ADV)
        if adv_count == 1:
            cargo = message.guild.get_role(ADV_CARGO_1_ID)
            adv_level = "ADV 1"
            color = 0xffff00
            next_adv = "ADV 2"
            
        # ADV 2
        elif adv_count == 2:
            # Remover ADV 1
            cargo_adv1 = message.guild.get_role(ADV_CARGO_1_ID)
            if cargo_adv1 and cargo_adv1 in message.author.roles:
                await message.author.remove_roles(cargo_adv1)
            
            cargo = message.guild.get_role(ADV_CARGO_2_ID)
            adv_level = "ADV 2"
            color = 0xff8c00
            next_adv = "ADV 3 + BAN"
            
        # ADV 3 = BAN IMEDIATO
        else:
            # Remover ADV 1 e 2
            cargo_adv1 = message.guild.get_role(ADV_CARGO_1_ID)
            cargo_adv2 = message.guild.get_role(ADV_CARGO_2_ID)
            if cargo_adv1 and cargo_adv1 in message.author.roles:
                await message.author.remove_roles(cargo_adv1)
            if cargo_adv2 and cargo_adv2 in message.author.roles:
                await message.author.remove_roles(cargo_adv2)
            
            cargo = message.guild.get_role(ADV_CARGO_3_ID)
            if cargo:
                await message.author.add_roles(cargo)
            
            # BANIR IMEDIATAMENTE
            embed = discord.Embed(
                title="üî® ADV 3 - BANIMENTO AUTOM√ÅTICO",
                description=f"**{message.author.display_name}** foi banido por atingir ADV 3!",
                color=0xff0000
            )
            embed.add_field(
                name="üìã Motivo",
                value=f"**Viola√ß√£o:** {violation_type}\n**Detalhes:** {details}",
                inline=False
            )
            embed.set_footer(text="Sistema Anti-Spam ‚Ä¢ Caos Hub")
            await message.channel.send(embed=embed)
            
            await message.author.ban(reason="ADV 3 - Spam repetido")
            user_warnings[user_id] = 0
            spam_warnings[user_id] = 0
            save_warnings_data()
            return
        
        # Aplicar cargo ADV
        if cargo:
            await message.author.add_roles(cargo)
        
        # APLICAR TIMEOUT DE 1 MINUTO - IGUAL AO COMANDO .timeout
        from datetime import timedelta
        timeout_aplicado = False
        try:
            timeout_duration = discord.utils.utcnow() + timedelta(minutes=1)
            await message.author.timeout(timeout_duration, reason=f"{adv_level} - Spam autom√°tico")
            timeout_aplicado = True
        except discord.Forbidden:
            pass
        except discord.HTTPException:
            pass
        except Exception:
            pass
        
        # Embed de ADV aplicada COM TIMEOUT
        embed = discord.Embed(
            title=f"üö® {adv_level} APLICADA",
            description=f"**{message.author.display_name}** recebeu {adv_level} por spam!",
            color=color
        )
        embed.add_field(
            name="üìù Motivo",
            value=f"`{violation_type}`",
            inline=False
        )
        embed.add_field(
            name="üë§ Usu√°rio",
            value=message.author.mention,
            inline=True
        )
        embed.add_field(
            name="‚è∞ Timeout",
            value="1 minuto" if timeout_aplicado else "‚ùå Falhou",
            inline=True
        )
        embed.add_field(
            name="üö® Pr√≥xima Puni√ß√£o",
            value=next_adv,
            inline=True
        )
        if timeout_aplicado:
            embed.add_field(
                name="üìÖ Expira em",
                value=f"<t:{int((discord.utils.utcnow() + timedelta(minutes=1)).timestamp())}:F>",
                inline=False
            )
        embed.set_footer(text="Sistema Anti-Spam ‚Ä¢ Caos Hub")
        await message.channel.send(embed=embed)
        
        # RESETAR contador de spam (volta pro zero - precisa fazer 5‚Üí9‚Üí12 de novo)
        spam_warnings[user_id] = 0
        save_warnings_data()

# ========================================
# SISTEMA DE AJUDA PERSONALIZADO
# ========================================

# Remover comando help padr√£o
bot.remove_command('help')

@bot.command(name='help')
async def help_command(ctx, categoria=None):
    """Sistema de ajuda personalizado com categorias"""
    
    if categoria is None:
        # Menu principal de categorias
        embed = discord.Embed(
            title="ü§ñ CENTRAL DE AJUDA - CAOS BOT",
            description="**Bem-vindo ao sistema de ajuda!** üéâ\n\nEscolha uma categoria abaixo para ver os comandos dispon√≠veis:",
            color=0x00ff88
        )
        
        embed.add_field(
            name="üõ°Ô∏è **MODERA√á√ÉO**",
            value="`.help moderacao`\nComandos para moderar o servidor",
            inline=True
        )
        
        embed.add_field(
            name="‚ö†Ô∏è **ADVERT√äNCIAS**",
            value="`.help advertencias`\nSistema de advert√™ncias progressivas",
            inline=True
        )
        
        embed.add_field(
            name="üîá **MUTE & TIMEOUT**",
            value="`.help mute`\nComandos de silenciamento",
            inline=True
        )
        
        embed.add_field(
            name="üéÆ **DIVERS√ÉO**",
            value="`.help diversao`\nComandos para se divertir",
            inline=True
        )
        
        embed.add_field(
            name="üí¨ **CONVERSA**",
            value="`.help conversa`\nComandos de intera√ß√£o social",
            inline=True
        )
        
        embed.add_field(
            name="üõ†Ô∏è **UTILIDADES**",
            value="`.help utilidades`\nComandos √∫teis diversos",
            inline=True
        )
        
        embed.add_field(
            name="üìä **RANK & XP**",
            value="`.help rank`\nSistema de n√≠veis e ranking",
            inline=True
        )
        
        embed.add_field(
            name="üìã **INFORMA√á√ïES**",
            value="**Prefixo:** `.` (ponto)\n**Permiss√µes:** Sub Moderador+\n**Vers√£o:** 2.0 Premium",
            inline=False
        )
        
        embed.set_footer(text="üí° Dica: Use .help [categoria] para ver comandos espec√≠ficos ‚Ä¢ Caos Hub")
        embed.set_thumbnail(url=bot.user.display_avatar.url)
        
        await ctx.reply(embed=embed)
        return
    
    # Categorias espec√≠ficas
    categoria = categoria.lower()
    
    if categoria in ['moderacao', 'modera√ß√£o', 'mod']:
        embed = discord.Embed(
            title="üõ°Ô∏è COMANDOS DE MODERA√á√ÉO",
            description="**Comandos para manter a ordem no servidor**\n*Requer: Sub Moderador ou permiss√µes de modera√ß√£o*",
            color=0xff4444
        )
        
        embed.add_field(
            name="üë¢ `.kick @usu√°rio [motivo]`",
            value="**Expulsa** um usu√°rio do servidor\n*Exemplo: `.kick @Jo√£o spam`*",
            inline=False
        )
        
        embed.add_field(
            name="üî® `.ban @usu√°rio [motivo]`",
            value="**Bane** um usu√°rio permanentemente\n*Exemplo: `.ban @Jo√£o comportamento t√≥xico`*",
            inline=False
        )
        
        embed.add_field(
            name="üîá `.timeout @usu√°rio [minutos] [motivo]`",
            value="**Silencia** temporariamente (m√°x 24h)\n*Exemplo: `.timeout @Jo√£o 30 flood`*",
            inline=False
        )
        
        embed.add_field(
            name="üîä `.untimeout @usu√°rio`",
            value="**Remove** o timeout de um usu√°rio\n*Exemplo: `.untimeout @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="üßπ `.clear [quantidade]`",
            value="**Deleta** mensagens (1-100, padr√£o: 10)\n*Exemplo: `.clear 50`*",
            inline=False
        )
        
        embed.add_field(
            name="üéØ `.addrole @cargo @usu√°rio`",
            value="**Adiciona** cargo ao usu√°rio e aplica prefixo\n*Exemplo: `.addrole @Moderador @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="üóëÔ∏è `.removerole @cargo @usu√°rio`",
            value="**Remove** cargo do usu√°rio e restaura nickname\n*Exemplo: `.removerole @Moderador @Jo√£o`*",
            inline=False
        )
        
        embed.set_footer(text="üõ°Ô∏è Modera√ß√£o ‚Ä¢ Use com responsabilidade")
        
    elif categoria in ['advertencias', 'advert√™ncias', 'adv']:
        embed = discord.Embed(
            title="‚ö†Ô∏è SISTEMA DE ADVERT√äNCIAS",
            description="**Sistema progressivo de puni√ß√µes**\n*ADV 1 ‚Üí ADV 2 ‚Üí ADV 3 + Ban Autom√°tico*",
            color=0xffaa00
        )
        
        embed.add_field(
            name="‚ö†Ô∏è `.adv @usu√°rio [motivo]`",
            value="**Aplica** advert√™ncia progressiva\n*Exemplo: `.adv @Jo√£o linguagem inadequada`*",
            inline=False
        )
        
        embed.add_field(
            name="üîÑ `.radv @usu√°rio`",
            value="**Remove** UMA advert√™ncia por vez\n*Exemplo: `.radv @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="üßπ `.radvall @usu√°rio`",
            value="**Remove** TODAS as advert√™ncias\n*Exemplo: `.radvall @Jo√£o`*",
            inline=False
        )
        
        
        embed.add_field(
            name="üìã **N√çVEIS DE ADVERT√äNCIA**",
            value="üü° **ADV 1** - Primeira advert√™ncia\nüü† **ADV 2** - Segunda advert√™ncia\nüî¥ **ADV 3** - Terceira + Ban autom√°tico",
            inline=False
        )
        
        embed.set_footer(text="‚ö†Ô∏è Advert√™ncias ‚Ä¢ Sistema autom√°tico de puni√ß√µes")
        
    elif categoria in ['mute', 'timeout', 'silenciar']:
        embed = discord.Embed(
            title="üîá COMANDOS DE SILENCIAMENTO",
            description="**Controle total sobre comunica√ß√£o dos usu√°rios**",
            color=0x808080
        )
        
        embed.add_field(
            name="üîá `.mute @usu√°rio [motivo]`",
            value="**Muta** usu√°rio indefinidamente\n*Remove capacidade de falar/reagir*\n*Exemplo: `.mute @Jo√£o comportamento inadequado`*",
            inline=False
        )
        
        embed.add_field(
            name="üîä `.unmute @usu√°rio`",
            value="**Desmuta** usu√°rio mutado\n*Restaura capacidade de comunica√ß√£o*\n*Exemplo: `.unmute @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="‚è∞ `.timeout @usu√°rio [minutos] [motivo]`",
            value="**Timeout** tempor√°rio (1-1440 min)\n*Silenciamento com dura√ß√£o definida*\n*Exemplo: `.timeout @Jo√£o 60 spam`*",
            inline=False
        )
        
        embed.add_field(
            name="‚è∞ `.untimeout @usu√°rio`",
            value="**Remove** timeout ativo\n*Cancela silenciamento tempor√°rio*\n*Exemplo: `.untimeout @Jo√£o`*",
            inline=False
        )
        
        embed.add_field(
            name="üîç **DIFEREN√áAS**",
            value="**Mute:** Indefinido, manual para remover\n**Timeout:** Tempor√°rio, remove automaticamente",
            inline=False
        )
        
        embed.set_footer(text="üîá Silenciamento ‚Ä¢ Mute vs Timeout")
        
    elif categoria in ['diversao', 'divers√£o', 'fun']:
        embed = discord.Embed(
            title="üéÆ COMANDOS DE DIVERS√ÉO",
            description="**Comandos para animar o servidor e se divertir!**",
            color=0xff69b4
        )
        
        embed.add_field(
            name="üòÇ `.piada`",
            value="**Conta** uma piada aleat√≥ria\n*Humor garantido!*",
            inline=True
        )
        
        embed.add_field(
            name="üé≤ `.escolher op√ß√£o1, op√ß√£o2, ...`",
            value="**Escolhe** entre v√°rias op√ß√µes\n*Exemplo: `.escolher pizza, hamb√∫rguer, sushi`*",
            inline=True
        )
        
        embed.add_field(
            name="üíã `.beijar @usu√°rio`",
            value="**Beija** algu√©m com GIF animado\n*Rom√¢ntico e fofo*",
            inline=True
        )
        
        embed.add_field(
            name="ü§ó `.abracar @usu√°rio`",
            value="**Abra√ßa** algu√©m com GIF\n*Demonstre carinho*",
            inline=True
        )
        
        embed.add_field(
            name="üòä `.acariciar @usu√°rio`",
            value="**Acaricia** algu√©m (head pat)\n*Relaxante e carinhoso*",
            inline=True
        )
        
        embed.add_field(
            name="üëã `.tapa @usu√°rio`",
            value="**D√° um tapa** em algu√©m\n*Quando necess√°rio*",
            inline=True
        )
        
        embed.add_field(
            name="üíÉ `.dancar [@usu√°rio]`",
            value="**Dan√ßa** sozinho ou com algu√©m\n*Mostre seus passos!*",
            inline=True
        )
        
        embed.add_field(
            name="üò≠ `.chorar`",
            value="**Chora** dramaticamente\n*√Äs vezes necess√°rio*",
            inline=True
        )
        
        embed.add_field(
            name="üòå `.cafune @usu√°rio`",
            value="**Faz cafun√©** em algu√©m\n*Relaxante*",
            inline=True
        )
        
        embed.add_field(
            name="üíò `.ship @user1 @user2`",
            value="**Shipa** duas pessoas\n*Veja a compatibilidade!*",
            inline=True
        )
        
        embed.set_footer(text="üéÆ Divers√£o ‚Ä¢ Mais comandos em desenvolvimento")
        
    elif categoria in ['conversa', 'social', 'chat']:
        embed = discord.Embed(
            title="üí¨ COMANDOS DE CONVERSA",
            description="**Comandos para intera√ß√£o social e conversas**",
            color=0x87ceeb
        )
        
        embed.add_field(
            name="üëã `.oi`",
            value="**Cumprimenta** com sauda√ß√µes aleat√≥rias\n*Inicia conversas de forma amig√°vel*",
            inline=True
        )
        
        embed.add_field(
            name="ü§ó `.comoesta [@usu√°rio]`",
            value="**Pergunta** como algu√©m est√°\n*Demonstra interesse genu√≠no*",
            inline=True
        )
        
        embed.add_field(
            name="üí≠ `.conversa`",
            value="**Sugere** t√≥picos de conversa\n*Quebra o gelo em conversas*",
            inline=True
        )
        
        embed.add_field(
            name="üå§Ô∏è `.clima`",
            value="**Pergunta** sobre humor/energia\n*Conecta com o estado emocional*",
            inline=True
        )
        
        embed.add_field(
            name="üëã `.tchau`",
            value="**Despede-se** com mensagens carinhosas\n*Finaliza conversas educadamente*",
            inline=True
        )
        
        embed.add_field(
            name="ü§ó `.abraco [@usu√°rio]`",
            value="**Envia** abra√ßos virtuais\n*Demonstra carinho e apoio*",
            inline=True
        )
        
        embed.add_field(
            name="‚ú® `.elogio [@usu√°rio]`",
            value="**Faz** elogios motivacionais\n*Eleva a autoestima dos outros*",
            inline=True
        )
        
        embed.add_field(
            name="üí™ `.motivacao`",
            value="**Compartilha** frases inspiradoras\n*Motiva e inspira positivamente*",
            inline=True
        )
        
        embed.set_footer(text="üí¨ Conversa ‚Ä¢ Intera√ß√µes sociais saud√°veis")
        
    elif categoria in ['utilidades', 'utils', 'uteis']:
        embed = discord.Embed(
            title="üõ†Ô∏è COMANDOS UTILIT√ÅRIOS",
            description="**Comandos √∫teis para administra√ß√£o e informa√ß√µes**",
            color=0x9932cc
        )
        
        
        embed.add_field(
            name="üßπ `.clear [quantidade]`",
            value="**Limpa** mensagens do canal\n*Organiza√ß√£o e limpeza*",
            inline=False
        )
        
        embed.add_field(
            name="‚ùì `.help [categoria]`",
            value="**Mostra** esta ajuda\n*Sistema de ajuda completo*",
            inline=False
        )
        
        
        
        embed.add_field(
            name="üîß **EM DESENVOLVIMENTO**",
            value="*Mais utilit√°rios sendo desenvolvidos*\n*Sugest√µes s√£o bem-vindas*",
            inline=False
        )
        
        embed.set_footer(text="üõ†Ô∏è Utilidades ‚Ä¢ Ferramentas administrativas")
        
    elif categoria in ['rank', 'xp', 'nivel', 'n√≠vel', 'level']:
        embed = discord.Embed(
            title="üìä SISTEMA DE RANK & XP",
            description="**Sistema de n√≠veis estilo Loritta!**\nGanhe XP conversando e suba de n√≠vel!\n\n**Como ganhar XP:**\nüí¨ Envie mensagens (+10-15 XP)\n‚è±Ô∏è Cooldown: 60 segundos\nüö´ Spam n√£o conta",
            color=0xff6600
        )
        
        embed.add_field(
            name="üìä `.rank [@usu√°rio]`",
            value="**Ver rank** com card visual tipo Loritta\n*Mostra n√≠vel, XP, posi√ß√£o e progresso*\n**Exemplos:**\n‚Ä¢ `.rank` - Seu rank\n‚Ä¢ `.rank @user` - Rank de algu√©m",
            inline=False
        )
        
        embed.add_field(
            name="üèÜ `.rankxp`",
            value="**Ver TOP 10** do servidor com imagem!\n*Ranking completo dos membros mais ativos*\n**Aliases:** `.leaderboard`, `.lb`, `.top`\n**Visual:** Card com barra de progresso",
            inline=False
        )
        
        embed.add_field(
            name="‚öôÔ∏è `.setxp @usu√°rio <quantidade>`",
            value="**Definir XP** manualmente (Admin)\n*Modificar XP de qualquer usu√°rio*\n**Exemplo:** `.setxp @user 1000`\n**Requer:** Permiss√£o de Administrador",
            inline=False
        )
        
        embed.add_field(
            name="üé® **DESIGN DO RANK CARD**",
            value="‚úÖ Background laranja CAOS personalizado\n‚úÖ Avatar circular do usu√°rio\n‚úÖ Barra de progresso animada\n‚úÖ N√≠vel e posi√ß√£o no ranking\n‚úÖ Total de mensagens e XP",
            inline=False
        )
        
        embed.add_field(
            name="üìà **F√ìRMULA DE XP**",
            value="**XP por n√≠vel:** 100 √ó (n√≠vel^1.5)\n**Exemplo:** N√≠vel 10 = 3.162 XP\n**Sistema:** Exponencial tipo Loritta",
            inline=False
        )
        
        embed.set_thumbnail(url="https://i.ibb.co/BVX3K2Y2/1.png")
        embed.set_footer(text="üìä Sistema de XP ‚Ä¢ Totalmente autom√°tico")
        
    else:
        embed = discord.Embed(
            title="‚ùå CATEGORIA N√ÉO ENCONTRADA",
            description="**Categoria inv√°lida!** Use uma das op√ß√µes abaixo:",
            color=0xff0000
        )
        
        embed.add_field(
            name="üìã **CATEGORIAS DISPON√çVEIS**",
            value="‚Ä¢ `moderacao` - Comandos de modera√ß√£o\n‚Ä¢ `advertencias` - Sistema de advert√™ncias\n‚Ä¢ `mute` - Comandos de silenciamento\n‚Ä¢ `diversao` - Comandos de divers√£o\n‚Ä¢ `conversa` - Comandos sociais\n‚Ä¢ `utilidades` - Comandos utilit√°rios\n‚Ä¢ `rank` - Sistema de XP e ranking",
            inline=False
        )
        
        embed.add_field(
            name="üí° **EXEMPLO**",
            value="`.help moderacao` - Ver comandos de modera√ß√£o",
            inline=False
        )
        
        embed.set_footer(text="‚ùå Erro ‚Ä¢ Use .help para ver o menu principal")
    
    await ctx.reply(embed=embed)

# ========================================
# COMANDOS DE DIVERS√ÉO
# ========================================

@bot.command(name='piada')
async def piada_command(ctx):
    piadas = [
        'Por que os p√°ssaros voam para o sul no inverno? Porque √© longe demais para ir andando! üê¶',
        'O que o pato disse para a pata? Vem qu√°! ü¶Ü',
        'Por que o livro de matem√°tica estava triste? Porque tinha muitos problemas! üìö',
        'O que a impressora falou para a outra impressora? Essa folha √© sua ou √© impress√£o minha? üñ®Ô∏è',
        'Por que o caf√© foi para a pol√≠cia? Porque foi roubado! ‚òï',
        'O que o oceano disse para a praia? Nada, s√≥ acenou! üåä',
        'Por que os esqueletos n√£o brigam? Porque n√£o t√™m est√¥mago para isso! üíÄ',
        'O que a fechadura disse para a chave? Voc√™ √© a chave do meu cora√ß√£o! üîê'
    ]
    piada = random.choice(piadas)
    
    embed = discord.Embed(
        title="üòÑ Piada do Dia",
        description=piada,
        color=0xffff00
    )
    embed.set_footer(text="Comandos de Divers√£o ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='escolher')
async def escolher_command(ctx, *, opcoes):
    lista_opcoes = [opcao.strip() for opcao in opcoes.split(',')]
    if len(lista_opcoes) < 2:
        embed = discord.Embed(
            title="‚ùå Erro no Comando",
            description='Preciso de pelo menos 2 op√ß√µes separadas por v√≠rgula!',
            color=0xff0000
        )
        embed.add_field(
            name="üìù Exemplo",
            value="`.escolher pizza, hamb√∫rguer, sushi`",
            inline=False
        )
        embed.set_footer(text="Comandos de Divers√£o ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    escolha = random.choice(lista_opcoes)
    
    embed = discord.Embed(
        title="üé≤ Escolha Aleat√≥ria",
        description=f'Eu escolho: **{escolha}**!',
        color=0x9932cc
    )
    embed.add_field(
        name="üìã Op√ß√µes Dispon√≠veis",
        value=", ".join(lista_opcoes),
        inline=False
    )
    embed.set_footer(text="Comandos de Divers√£o ‚Ä¢ Caos Hub")
    await ctx.reply(embed=embed)

@bot.command(name='embedhub')
@commands.has_permissions(administrator=True)
async def embedhub_command(ctx):
    """Envia o embed FODA do Caos Hub com TODOS os GIFs"""
    
    # EMBED √öNICO COM TUDO
    embed = discord.Embed(
        title="üî• BEM-VINDO AO CAOS HUB! üî•",
        description=(
            "# **O MELHOR HUB DE SCRIPTS DO BRASIL!**\n\n"
            "Aqui voc√™ encontra **TUDO** que precisa para dominar seus jogos favoritos!\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        ),
        color=0xff6600
    )
    
    # GIF PRINCIPAL
    embed.set_image(url="https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExMHpuMWV1eWprbm1vZGgzZnlseWJ6ZWxjbmsxbG5yczhta2FnNzQ1ayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Q8gqp0zwvSoMaDX1uS/giphy.gif")
    
    # THUMBNAIL
    embed.set_thumbnail(url="https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExMmV0Zm1nbmJocDhweDNvbDRreGZhOG5rcmZvenN5Nmw1Z3N2aWxtayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/10TZs8ho7qJeVy/giphy.gif")
    
    embed.add_field(
        name="üéØ O QUE OFERECEMOS",
        value=(
            "üîπ **Scripts Premium** - Os melhores do mercado\n"
            "üîπ **Executores Confi√°veis** - Testados e aprovados\n"
            "üîπ **Suporte 24/7** - Equipe sempre dispon√≠vel\n"
            "üîπ **Atualiza√ß√µes Constantes** - Sempre atualizado\n"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üé´ COMO ACESSAR",
        value=(
            "**1.** Acesse o canal <#1417548428984188929>\n"
            "**2.** Abra um ticket clicando no bot√£o\n"
            "**3.** Escolha a categoria desejada\n"
            "**4.** Nossa equipe responder√° rapidamente!"
        ),
        inline=True
    )
    
    embed.add_field(
        name="‚öôÔ∏è EXECUTORES ACEITOS",
        value=(
            "‚úÖ **Synapse X**\n"
            "‚úÖ **Script-Ware**\n"
            "‚úÖ **KRNL**\n"
            "‚úÖ **Fluxus**\n"
            "‚úÖ **Arceus X**\n"
            "‚úÖ **E muito mais!**"
        ),
        inline=True
    )
    
    embed.add_field(
        name="üéÆ JOGOS DISPON√çVEIS",
        value="ü•ä **The Strongest Battlegrounds**",
        inline=False
    )
    
    embed.add_field(
        name="üí≥ FORMAS DE PAGAMENTO",
        value=(
            "üí∞ **PIX** - Instant√¢neo e seguro\n"
            "üíµ **PayPal** - Internacional\n\n"
            "üéÆ **Robux** - Em breve!"
        ),
        inline=False
    )
    
    embed.set_footer(
        text="üî• CAOS Hub ¬© 2025 ‚Ä¢ Todos os direitos reservados ‚Ä¢ Melhor Hub de Scripts!",
        icon_url=ctx.guild.icon.url if ctx.guild.icon else None
    )
    
    embed.timestamp = discord.utils.utcnow()
    
    # ENVIAR COM @everyone
    await ctx.send("@everyone", embed=embed)
    
    try:
        await ctx.message.delete()
    except:
        pass

@embedhub_command.error
async def embedhub_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# ========================================
# RESPOSTAS AUTOM√ÅTICAS E PROTE√á√ïES
# ========================================

@bot.event
async def on_message_old(message):
    # FUN√á√ÉO ANTIGA - N√ÉO USAR (mantida para refer√™ncia)
    # Ignorar mensagens do pr√≥prio bot
    if message.author == bot.user:
        return
    
    # Ignorar moderadores (usu√°rios com permiss√£o de gerenciar mensagens)
    if message.author.guild_permissions.manage_messages:
        await bot.process_commands(message)
        return
    
    user_id = message.author.id
    current_time = time.time()
    content = message.content
    
    # ========================================
    # SISTEMA ANTI-MEN√á√ÉO (M√ÅXIMO 1 MEN√á√ÉO) - VERIFICAR PRIMEIRO
    # ========================================
    
    # Verificar men√ß√µes (permitido apenas 1, se tiver 2 ou mais j√° avisa)
    mention_count = len(message.raw_mentions) + len(message.raw_role_mentions)
    print(f"[DEBUG MEN√á√ÉO] Usu√°rio: {message.author} | Men√ß√µes: {mention_count}")  # DEBUG
    
    if mention_count >= 2:  # agora dispara com 2 ou mais
        try:
            await message.delete()
        except:
            pass
        
        # Criar lista de men√ß√µes (com repeti√ß√µes preservadas)
        mencoes = []
        for uid in message.raw_mentions:
            mencoes.append(f"<@{uid}>")
        for rid in message.raw_role_mentions:
            mencoes.append(f"<@&{rid}>")
        
        embed = discord.Embed(
            title="‚ö†Ô∏è EXCESSO DE MEN√á√ïES",
            description=f"**{message.author.display_name}**, voc√™ mencionou **{mention_count}** pessoas/cargos!",
            color=0xff8c00
        )
        embed.add_field(
            name="üìã Regra",
            value=f"**M√°ximo permitido:** 1 men√ß√£o por mensagem\n**Voc√™ mencionou:** {', '.join(mencoes)}",
            inline=False
        )
        embed.set_footer(text="Sistema de Modera√ß√£o ‚Ä¢ Caos Hub")
        await message.channel.send(embed=embed, delete_after=10)
        return  # Para o processamento
    
    # ========================================
    # SISTEMA ANTI-SPAM
    # ========================================
    
    # Adicionar mensagem ao hist√≥rico
    message_history[user_id].append(content.lower())
    user_message_times[user_id].append(current_time)
    
    # Verificar spam (mensagens id√™nticas)
    if len(message_history[user_id]) >= 3:
        recent_messages = list(message_history[user_id])[-3:]
        if len(set(recent_messages)) == 1:  # Todas as mensagens s√£o iguais
            await auto_moderate_spam(message, "spam de mensagens id√™nticas", f"Enviou 3 mensagens iguais: '{content[:50]}...'")
            return
    
    # ========================================
    # SISTEMA ANTI-FLOOD PROGRESSIVO
    # ========================================
    
    # Determinar limite baseado nos avisos j√° recebidos
    current_warnings = spam_warnings[user_id]
    
    if current_warnings == 0:
        flood_limit = 5  # Primeira viola√ß√£o: 5 mensagens
    elif current_warnings == 1:
        flood_limit = 4  # Segunda viola√ß√£o: 4 mensagens
    else:
        flood_limit = 3  # Terceira viola√ß√£o: 3 mensagens (ADV)
    
    # Verificar flood (muitas mensagens em pouco tempo)
    if len(user_message_times[user_id]) >= flood_limit:
        recent_times = list(user_message_times[user_id])[-flood_limit:]
        time_diff = recent_times[-1] - recent_times[0]
        
        if time_diff < 8:  # Mensagens em menos de 8 segundos
            await auto_moderate_spam(message, "flood de mensagens", f"Enviou {flood_limit} mensagens em {time_diff:.1f} segundos")
            return
    
    # ========================================
    # SISTEMA ANTI-CAPS
    # ========================================
    
    # Verificar excesso de mai√∫sculas
    if len(content) > 10:  # S√≥ verificar mensagens com mais de 10 caracteres
        uppercase_count = sum(1 for c in content if c.isupper())
        total_letters = sum(1 for c in content if c.isalpha())
        
        if total_letters > 0:
            caps_percentage = (uppercase_count / total_letters) * 100
            
            if caps_percentage > 70 and total_letters > 15:  # Mais de 70% em caps e mais de 15 letras
                await auto_moderate_spam(message, "excesso de mai√∫sculas", f"Mensagem com {caps_percentage:.1f}% em mai√∫sculas")
                return
    
    # Sistema de men√ß√£o j√° verificado no in√≠cio do on_message
    
    # ========================================
    # SISTEMA ANTI-MENSAGEM LONGA (M√ÅXIMO 90 CARACTERES)
    # ========================================
    
    # Verificar tamanho da mensagem (m√°ximo 90 caracteres)
    if len(content) > 90:
        await auto_moderate_spam(message, "mensagem muito longa", f"Mensagem com {len(content)} caracteres (m√°ximo: 90)")
        return
    
    # ========================================
    # SISTEMA ANTI-EMOJI SPAM
    # ========================================
    
    # Contar emojis (custom e unicode)
    emoji_count = len(message.content.split('üòÄ')) + len(message.content.split('üòÅ')) + len(message.content.split('üòÇ')) + len(message.content.split('ü§£')) + len(message.content.split('üòÉ')) + len(message.content.split('üòÑ')) + len(message.content.split('üòÖ')) + len(message.content.split('üòÜ')) + len(message.content.split('üòâ')) + len(message.content.split('üòä')) + len(message.content.split('üòã')) + len(message.content.split('üòé')) + len(message.content.split('üòç')) + len(message.content.split('üòò')) + len(message.content.split('ü•∞')) + len(message.content.split('üòó')) + len(message.content.split('üòô')) + len(message.content.split('üòö')) + len(message.content.split('üôÇ')) + len(message.content.split('ü§ó')) + len(message.content.split('ü§©')) + len(message.content.split('ü§î')) + len(message.content.split('ü§®')) + len(message.content.split('üòê')) + len(message.content.split('üòë')) + len(message.content.split('üò∂')) + len(message.content.split('üôÑ')) + len(message.content.split('üòè')) + len(message.content.split('üò£')) + len(message.content.split('üò•')) + len(message.content.split('üòÆ')) + len(message.content.split('ü§ê')) + len(message.content.split('üòØ')) + len(message.content.split('üò™')) + len(message.content.split('üò´')) + len(message.content.split('ü•±')) + len(message.content.split('üò¥')) + len(message.content.split('üòå')) + len(message.content.split('üòõ')) + len(message.content.split('üòú')) + len(message.content.split('üòù')) + len(message.content.split('ü§§')) + len(message.content.split('üòí')) + len(message.content.split('üòì')) + len(message.content.split('üòî')) + len(message.content.split('üòï')) + len(message.content.split('üôÉ')) + len(message.content.split('ü§ë')) + len(message.content.split('üò≤')) + len(message.content.split('üôÅ')) + len(message.content.split('üòñ')) + len(message.content.split('üòû')) + len(message.content.split('üòü')) + len(message.content.split('üò§')) + len(message.content.split('üò¢')) + len(message.content.split('üò≠')) + len(message.content.split('üò¶')) + len(message.content.split('üòß')) + len(message.content.split('üò®')) + len(message.content.split('üò©')) + len(message.content.split('ü§Ø')) + len(message.content.split('üò¨')) + len(message.content.split('üò∞')) + len(message.content.split('üò±')) + len(message.content.split('ü•µ')) + len(message.content.split('ü•∂')) + len(message.content.split('üò≥')) + len(message.content.split('ü§™')) + len(message.content.split('üòµ')) + len(message.content.split('ü•¥')) + len(message.content.split('üò†')) + len(message.content.split('üò°')) + len(message.content.split('ü§¨')) + len(message.content.split('üò∑')) + len(message.content.split('ü§í')) + len(message.content.split('ü§ï')) + len(message.content.split('ü§¢')) + len(message.content.split('ü§Æ')) + len(message.content.split('ü§ß')) + len(message.content.split('üòá')) + len(message.content.split('ü•≥')) + len(message.content.split('ü•∫')) + len(message.content.split('ü§†')) + len(message.content.split('ü§°')) + len(message.content.split('ü§•')) + len(message.content.split('ü§´')) + len(message.content.split('ü§≠')) + len(message.content.split('üßê')) + len(message.content.split('ü§ì'))
    
    # M√©todo mais simples para contar emojis
    import re
    emoji_pattern = re.compile(r'[üòÄ-üôèüåÄ-üóøüöÄ-üõø‚òÄ-‚õø‚úÄ-‚ûø]')
    unicode_emojis = len(emoji_pattern.findall(content))
    custom_emojis = content.count('<:') + content.count('<a:')
    total_emojis = unicode_emojis + custom_emojis
    
    if total_emojis > 10:
        await auto_moderate_spam(message, "spam de emojis", f"Enviou {total_emojis} emojis em uma mensagem")
        return
    
    # ========================================
    # SISTEMA ANTI-LINK SPAM
    # ========================================
    
    # Verificar links suspeitos (muitos links)
    link_patterns = ['http://', 'https://', 'www.', '.com', '.net', '.org', '.br', '.gg']
    link_count = sum(content.lower().count(pattern) for pattern in link_patterns)
    
    if link_count > 3:
        await auto_moderate_spam(message, "spam de links", f"Enviou {link_count} links em uma mensagem")
        return
    
    # ========================================
    # RESPOSTAS AUTOM√ÅTICAS
    # ========================================
    
    content_lower = content.lower()
    
    # Respostas autom√°ticas
    if 'oi bot' in content_lower or 'ol√° bot' in content_lower:
        saudacoes = ['Oi! üëã', 'Ol√°! üòä', 'E a√≠! ü§ó', 'Salve! ‚ú®']
        resposta = random.choice(saudacoes)
        await message.reply(resposta)
    
    elif 'obrigado bot' in content_lower or 'valeu bot' in content_lower:
        agradecimentos = ['De nada! üòä', 'Sempre √†s ordens! ü§ñ', 'Fico feliz em ajudar! ‚ú®']
        resposta = random.choice(agradecimentos)
        await message.reply(resposta)
    
    elif 'tchau bot' in content_lower or 'at√© mais bot' in content_lower:
        despedidas = ['Tchau! üëã', 'At√© mais! üòä', 'Falou! ü§ó']
        resposta = random.choice(despedidas)
        await message.reply(resposta)
    
    # Processar comandos normalmente
    await bot.process_commands(message)

# ========================================
# SISTEMA DE TICKETS
# ========================================

# Configura√ß√µes de ticket COMPLETAS (salvas em arquivo JSON)
ticket_config = {}

# Rastrear cooldown de cria√ß√£o de painel (anti-spam)
ticket_panel_cooldowns = {}  # {user_id: timestamp}

def get_default_ticket_config(guild_id):
    """Retorna configura√ß√£o padr√£o de tickets"""
    return {
        'enabled': False,
        'category_id': None,
        'staff_role_ids': [],
        'log_channel_id': None,
        
        # Personaliza√ß√£o do Painel
        'panel_title': 'üé´ SISTEMA DE TICKETS',
        'panel_description': 'Clique no bot√£o abaixo para abrir um ticket e falar com a equipe!',
        'panel_color': '0x5865F2',
        'button_text': 'Abrir Ticket',
        
        # Categorias Ativas (8 categorias)
        'categories_enabled': {
            'geral': True,
            'compras': True,
            'suporte': True,
            'denuncia': True,
            'parceria': True,
            'financeiro': True,
            'moderacao': True,
            'bug': True
        },
        
        # Customiza√ß√£o de Categorias
        'categories_custom': {
            'geral': {'emoji': 'üìÅ', 'name': 'Geral', 'description': 'Assuntos gerais'},
            'compras': {'emoji': 'üõí', 'name': 'Compras', 'description': 'D√∫vidas sobre compras'},
            'suporte': {'emoji': 'üîß', 'name': 'Suporte T√©cnico', 'description': 'Problemas t√©cnicos'},
            'denuncia': {'emoji': 'üö®', 'name': 'Den√∫ncia', 'description': 'Reportar usu√°rio/conte√∫do'},
            'parceria': {'emoji': 'ü§ù', 'name': 'Parceria', 'description': 'Proposta de parceria'},
            'financeiro': {'emoji': 'üí∞', 'name': 'Financeiro', 'description': 'Quest√µes de pagamento'},
            'moderacao': {'emoji': 'üõ°Ô∏è', 'name': 'Modera√ß√£o', 'description': 'Quest√µes de modera√ß√£o'},
            'bug': {'emoji': 'üêõ', 'name': 'Bug', 'description': 'Reportar bugs'}
        },
        
        # Sistema de Prioridades
        'priority_enabled': True,
        'priority_colors': True,  # Cores do embed baseadas na prioridade
        'priority_custom': {
            'baixa': {'emoji': 'üü¢', 'name': 'Baixa', 'description': 'N√£o √© urgente', 'color': '0x00ff00'},
            'media': {'emoji': 'üü°', 'name': 'M√©dia', 'description': 'Prioridade normal', 'color': '0xffff00'},
            'alta': {'emoji': 'üü†', 'name': 'Alta', 'description': 'Precisa de aten√ß√£o', 'color': '0xff8800'},
            'urgente': {'emoji': 'üî¥', 'name': 'Urgente', 'description': 'Muito urgente!', 'color': '0xff0000'}
        },
        
        # Mensagens Customiz√°veis
        'message_welcome': 'Ol√°! Obrigado por abrir um ticket. Nossa equipe responder√° em breve.',
        'message_embed_main': 'Nossa equipe responder√° o mais breve poss√≠vel!',
        'message_closing': 'üîí Fechando ticket em 3 segundos...',
        'modal_title': 'üìã Informa√ß√µes do Ticket',
        
        # Campos do Modal
        'field_subject_enabled': True,
        'field_description_enabled': True,
        'field_language_enabled': True,
        'field_additional_enabled': True,
        
        # Limites de caracteres
        'field_subject_max': 100,
        'field_description_max': 1000,
        'field_additional_max': 500,
        
        # Configura√ß√µes Avan√ßadas
        'ticket_limit_per_user': 1,
        'ticket_cooldown_minutes': 0,
        'transcript_enabled': True,
        'statistics_enabled': True,
        'rating_enabled': False,
        'mention_staff_on_create': False,
        
        # Logs
        'log_enabled': True,
        'log_include_stats': True,
        'log_attach_transcript': True,
        'log_show_participants': True,
        'log_show_duration': True
    }

def load_ticket_config():
    """Carrega configura√ß√µes de ticket"""
    global ticket_config
    try:
        with open('ticket_config.json', 'r') as f:
            ticket_config = json.load(f)
    except:
        ticket_config = {}

def save_ticket_config():
    """Salva configura√ß√µes de ticket"""
    with open('ticket_config.json', 'w') as f:
        json.dump(ticket_config, f, indent=4)

# Carregar configura√ß√µes ao iniciar
load_ticket_config()

# COMANDO .ticket REMOVIDO - USE O DASHBOARD WEB
# Acesse: https://caosbot-discord.onrender.com/dashboard
# V√° em "Tickets" e configure tudo pela interface web!

# TODAS AS VIEWS ANTIGAS DE TICKETS FORAM REMOVIDAS
# O sistema agora usa APENAS o sistema V2 com TicketPanelView, TicketConfigView (V2), etc
# Essas classes est√£o definidas mais acima no c√≥digo

# ========================================
# SISTEMA DE PREFIXOS AUTOM√ÅTICOS
# ========================================

# FUN√á√ÉO DESABILITADA - CAUSAVA DUPLICA√á√ïES
class PlaceholderOldTicketConfigView_REMOVED(discord.ui.View):
    def __init__(self, guild, guild_id):
        super().__init__(timeout=300)
        self.guild = guild
        self.guild_id = guild_id
        self.selected_category = None
        self.selected_roles = []
        
        # Criar dropdown de categorias
        category_options = []
        for category in guild.categories:
            category_options.append(
                discord.SelectOption(
                    label=category.name[:100],
                    description=f"ID: {category.id}",
                    value=str(category.id)
                )
            )
        
        if category_options:
            self.category_select = discord.ui.Select(
                placeholder="üìÅ Selecione a Categoria",
                options=category_options[:25],  # Discord limita a 25
                row=0
            )
            self.category_select.callback = self.category_callback
            self.add_item(self.category_select)
        
        # Criar dropdown de cargos (apenas cargos de staff espec√≠ficos)
        role_options = []
        staff_keywords = ['moderador', 'sub moderador', 'staff', 'administrador', 'sub dono', 'founder']
        
        for role in guild.roles:
            if role.name != "@everyone" and not role.managed:  # Exclui @everyone e cargos de bot
                # Verificar se √© cargo de staff
                is_staff = any(keyword in role.name.lower() for keyword in staff_keywords)
                
                if is_staff:
                    role_options.append(
                        discord.SelectOption(
                            label=role.name[:100],
                            description=f"ID: {role.id}",
                            value=str(role.id),
                            emoji="üëÆ"
                        )
                    )
        
        if role_options:
            self.role_select = discord.ui.Select(
                placeholder="üëÆ Selecione os Cargos Staff (m√∫ltipla escolha)",
                options=role_options[:25],  # Discord limita a 25
                max_values=min(len(role_options[:25]), 25),
                row=1
            )
            self.role_select.callback = self.role_callback
            self.add_item(self.role_select)
    

    def update_dropdowns(self):
        """Recria os dropdowns com placeholders atualizados"""
        # Limpar items
        self.clear_items()
        
        # Dropdown 1: Categoria (com placeholder atualizado)
        category_placeholder = f"{self.selected_category_emoji} {self.selected_category}" if self.selected_category else "üóÇÔ∏è Selecione a Categoria do Ticket"
        category_select = discord.ui.Select(
            placeholder=category_placeholder,
            custom_id="category_dropdown",
            options=[
                discord.SelectOption(label="Geral", description="Assuntos gerais", emoji="üìÅ", value="geral"),
                discord.SelectOption(label="Compras", description="D√∫vidas sobre compras", emoji="üõí", value="compras"),
                discord.SelectOption(label="Suporte T√©cnico", description="Problemas t√©cnicos", emoji="üîß", value="suporte"),
                discord.SelectOption(label="Den√∫ncia", description="Reportar usu√°rio/conte√∫do", emoji="üö®", value="denuncia"),
                discord.SelectOption(label="Parceria", description="Proposta de parceria", emoji="ü§ù", value="parceria"),
                discord.SelectOption(label="Financeiro", description="Quest√µes de pagamento", emoji="üí∞", value="financeiro"),
                discord.SelectOption(label="Modera√ß√£o", description="Quest√µes de modera√ß√£o", emoji="üõ°Ô∏è", value="moderacao"),
                discord.SelectOption(label="Bug", description="Reportar bugs", emoji="üêõ", value="bug"),
            ],
            row=0
        )
        category_select.callback = self.category_callback
        self.add_item(category_select)
        
        # Dropdown 2: Prioridade (com placeholder atualizado)
        priority_placeholder = f"{self.selected_priority_emoji} {self.selected_priority}" if self.selected_priority else "‚ö° Selecione a Prioridade"
        priority_select = discord.ui.Select(
            placeholder=priority_placeholder,
            custom_id="priority_dropdown",
            options=[
                discord.SelectOption(label="Baixa", description="N√£o √© urgente", emoji="üü¢", value="baixa"),
                discord.SelectOption(label="M√©dia", description="Prioridade normal", emoji="üü°", value="media"),
                discord.SelectOption(label="Alta", description="Precisa de aten√ß√£o", emoji="üü†", value="alta"),
                discord.SelectOption(label="Urgente", description="Muito urgente!", emoji="üî¥", value="urgente"),
            ],
            row=1
        )
        priority_select.callback = self.priority_callback
        self.add_item(priority_select)
        
        # Bot√£o Continuar (habilitado se ambos selecionados)
        self.continue_button = discord.ui.Button(
            label="Continuar",
            emoji="‚úÖ",
            style=discord.ButtonStyle.success,
            custom_id="continue_button",
            row=2,
            disabled=not (self.selected_category and self.selected_priority)
        )
        self.continue_button.callback = self.continue_callback
        self.add_item(self.continue_button)

    async def category_callback(self, interaction: discord.Interaction):
        self.selected_category = int(self.category_select.values[0])
        category = self.guild.get_channel(self.selected_category)
        await interaction.response.send_message(
            f"‚úÖ Categoria selecionada: **{category.name}**",
            ephemeral=True
        )
    
    async def role_callback(self, interaction: discord.Interaction):
        self.selected_roles = [int(rid) for rid in self.role_select.values]
        roles = [self.guild.get_role(rid).name for rid in self.selected_roles]
        await interaction.response.send_message(
            f"‚úÖ {len(self.selected_roles)} cargo(s) selecionado(s): {', '.join(roles[:5])}{'...' if len(roles) > 5 else ''}",
            ephemeral=True
        )
    
    @discord.ui.button(label="Salvar Configura√ß√µes", style=discord.ButtonStyle.green, emoji="üíæ", row=2)
    async def save_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not self.selected_category:
            await interaction.response.send_message("‚ùå Selecione uma categoria primeiro!", ephemeral=True)
            return
        
        if not self.selected_roles:
            await interaction.response.send_message("‚ùå Selecione pelo menos um cargo staff!", ephemeral=True)
            return
        
        # Salvar configura√ß√µes
        if self.guild_id not in ticket_config:
            ticket_config[self.guild_id] = {}
        
        ticket_config[self.guild_id]['category_id'] = self.selected_category
        ticket_config[self.guild_id]['staff_role_ids'] = self.selected_roles
        ticket_config[self.guild_id]['enabled'] = True
        
        if 'welcome_message' not in ticket_config[self.guild_id]:
            ticket_config[self.guild_id]['welcome_message'] = 'Ol√°! Obrigado por abrir um ticket. Nossa equipe responder√° em breve.'
        
        save_ticket_config()
        
        category = self.guild.get_channel(self.selected_category)
        roles = [self.guild.get_role(rid).mention for rid in self.selected_roles]
        
        embed = discord.Embed(
            title="‚úÖ CONFIGURA√á√ïES SALVAS!",
            description="Sistema de tickets configurado com sucesso!",
            color=0x00ff00
        )
        embed.add_field(
            name="üìÅ Categoria",
            value=category.mention,
            inline=False
        )
        embed.add_field(
            name="üëÆ Cargos Staff",
            value=", ".join(roles),
            inline=False
        )
        embed.add_field(
            name="üé´ Pr√≥ximo Passo",
            value="Use `.ticket setup` para criar a mensagem de abertura!",
            inline=False
        )
        embed.set_footer(text="Sistema de Tickets ‚Ä¢ Caos Hub")
        
        await interaction.response.send_message(embed=embed)
        self.stop()

# Painel de sele√ß√£o de categoria
class TicketCategoryView(discord.ui.View):
    def __init__(self, config, category_channel, user):
        super().__init__(timeout=300)  # 5 minutos
        self.config = config
        self.category_channel = category_channel
        self.user = user
        self.selected_category = "üìÅ Geral"
        self.selected_priority = "üü° M√©dia"
    
    @discord.ui.select(
        placeholder="üè∑Ô∏è Selecione a Categoria do Ticket",
        options=[
            discord.SelectOption(label="Geral", description="Assuntos gerais", emoji="üìÅ", value="geral"),
            discord.SelectOption(label="Compras", description="D√∫vidas sobre compras", emoji="üõí", value="compras"),
            discord.SelectOption(label="Suporte T√©cnico", description="Problemas t√©cnicos", emoji="üîß", value="tecnico"),
            discord.SelectOption(label="Den√∫ncia", description="Reportar usu√°rio/conte√∫do", emoji="üö®", value="denuncia"),
            discord.SelectOption(label="Parceria", description="Proposta de parceria", emoji="ü§ù", value="parceria"),
            discord.SelectOption(label="Financeiro", description="Quest√µes de pagamento", emoji="üí∞", value="financeiro"),
            discord.SelectOption(label="Modera√ß√£o", description="Quest√µes de modera√ß√£o", emoji="üõ°Ô∏è", value="moderacao"),
        ]
    )
    async def select_category(self, interaction: discord.Interaction, select: discord.ui.Select):
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("‚ùå Este painel n√£o √© seu!", ephemeral=True)
            return
        
        category_map = {
            "geral": "üìÅ Geral",
            "compras": "üõí Compras",
            "tecnico": "üîß Suporte T√©cnico",
            "denuncia": "üö® Den√∫ncia",
            "parceria": "ü§ù Parceria",
            "financeiro": "üí∞ Financeiro",
            "moderacao": "üõ°Ô∏è Modera√ß√£o"
        }
        
        self.selected_category = category_map.get(select.values[0], "üìÅ Geral")
        await interaction.response.send_message(f"‚úÖ Categoria selecionada: **{self.selected_category}**", ephemeral=True)
    
    @discord.ui.select(
        placeholder="‚ö° Selecione a Prioridade",
        options=[
            discord.SelectOption(label="Baixa", description="N√£o √© urgente", emoji="üü¢", value="baixa"),
            discord.SelectOption(label="M√©dia", description="Prioridade normal", emoji="üü°", value="media"),
            discord.SelectOption(label="Alta", description="Precisa de aten√ß√£o", emoji="üü†", value="alta"),
            discord.SelectOption(label="Urgente", description="Muito urgente!", emoji="üî¥", value="urgente"),
        ]
    )
    async def select_priority(self, interaction: discord.Interaction, select: discord.ui.Select):
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("‚ùå Este painel n√£o √© seu!", ephemeral=True)
            return
        
        priority_map = {
            "baixa": "üü¢ Baixa",
            "media": "üü° M√©dia",
            "alta": "üü† Alta",
            "urgente": "üî¥ Urgente"
        }
        
        self.selected_priority = priority_map.get(select.values[0], "üü° M√©dia")
        await interaction.response.send_message(f"‚úÖ Prioridade selecionada: **{self.selected_priority}**", ephemeral=True)
    
    @discord.ui.button(label="Continuar", style=discord.ButtonStyle.green, emoji="‚úÖ", row=2)
    async def continue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("‚ùå Este painel n√£o √© seu!", ephemeral=True)
            return
        
        # Abrir modal com as sele√ß√µes salvas
        modal = TicketModal(self.config, self.category_channel, self.selected_category, self.selected_priority)
        await interaction.response.send_modal(modal)
        self.stop()

# Modal para coletar informa√ß√µes do ticket (com sele√ß√µes salvas)
class TicketModal(discord.ui.Modal, title="üé´ Informa√ß√µes do Ticket"):
    def __init__(self, config, category, selected_category, selected_priority):
        super().__init__()
        self.config = config
        self.category = category
        self.selected_category = selected_category
        self.selected_priority = selected_priority
        
        # Campo 1: Assunto (OBRIGAT√ìRIO)
        self.assunto = discord.ui.TextInput(
            label="üìã Assunto do Ticket",
            placeholder="Ex: D√∫vida sobre cargos, Bug no bot, etc.",
            required=True,
            max_length=100,
            min_length=3
        )
        self.add_item(self.assunto)
        
        # Campo 2: Descri√ß√£o (OBRIGAT√ìRIO)
        self.descricao = discord.ui.TextInput(
            label="üìù Descri√ß√£o Detalhada",
            placeholder="Descreva seu problema, d√∫vida ou solicita√ß√£o com detalhes...",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000,
            min_length=10
        )
        self.add_item(self.descricao)
        
        # Campo 3: Idioma (OBRIGAT√ìRIO)
        self.idioma = discord.ui.TextInput(
            label="üåê Seu Idioma",
            placeholder="Ex: Portugu√™s, English, Espa√±ol, etc.",
            required=True,
            max_length=50
        )
        self.add_item(self.idioma)
        
        # Campo 4: Informa√ß√µes Adicionais (OPCIONAL)
        self.info_adicional = discord.ui.TextInput(
            label="‚ÑπÔ∏è Informa√ß√µes Adicionais (Opcional)",
            placeholder="Links, prints, IDs de usu√°rios, etc.",
            style=discord.TextStyle.paragraph,
            required=False,
            max_length=500
        )
        self.add_item(self.info_adicional)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Usar sele√ß√µes salvas do painel
            categoria_valor = self.selected_category
            prioridade_valor = self.selected_priority
            info_adicional_valor = self.info_adicional.value.strip() if self.info_adicional.value else "Nenhuma informa√ß√£o adicional fornecida"
            
            # Definir cor baseado na prioridade selecionada
            if "üî¥" in prioridade_valor or "üü†" in prioridade_valor:
                cor_embed = 0xff0000  # Vermelho
            elif "üü¢" in prioridade_valor:
                cor_embed = 0x00ff00  # Verde
            else:
                cor_embed = 0xffaa00  # Laranja (M√©dia)
                emoji_prioridade = prioridade_valor.split()[0]  # Pega o emoji
            
            # Buscar categoria configurada
            category_id = self.config.get('category_id')
            
            if not category_id:
                await interaction.response.send_message("‚ùå Sistema n√£o configurado! Use `.ticket categoria [ID]`", ephemeral=True)
                return
            
            # Buscar em todas as categorias do servidor
            target_category = None
            for cat in interaction.guild.categories:
                if cat.id == int(category_id):
                    target_category = cat
                    break
            
            if not target_category:
                await interaction.response.send_message("‚ùå Categoria n√£o encontrada! Reconfigure com `.ticket categoria [ID]`", ephemeral=True)
                return
            
            # Criar canal de ticket
            overwrites = {
                interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
                interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }
            
            # Adicionar permiss√µes para staff
            for role_id in self.config.get('staff_role_ids', []):
                role = interaction.guild.get_role(role_id)
                if role:
                    overwrites[role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
            
            # Contar quantos tickets j√° existem na categoria para numera√ß√£o
            ticket_number = 1
            for channel in target_category.channels:
                if channel.name.startswith("carrinho-"):
                    try:
                        num = int(channel.name.split("-")[1])
                        if num >= ticket_number:
                            ticket_number = num + 1
                    except:
                        pass
            
            # Criar canal com nome numerado
            ticket_channel = await target_category.create_text_channel(
                name=f"‚åäüõí‚åâ-carrinho-{ticket_number}",
                overwrites=overwrites
            )
            
            # Embed BONITO com todas as informa√ß√µes
            embed = discord.Embed(
                title="üé´ NOVO TICKET ABERTO",
                description=f"**{self.config.get('welcome_message')}**\n\n*Nossa equipe responder√° o mais breve poss√≠vel!*",
                color=cor_embed,
                timestamp=discord.utils.utcnow()
            )
            
            # Informa√ß√µes do usu√°rio
            embed.set_author(
                name=f"Ticket de {interaction.user.display_name}",
                icon_url=interaction.user.display_avatar.url
            )
            
            # Campos organizados
            embed.add_field(
                name="üë§ Aberto por",
                value=f"{interaction.user.mention}\n`ID: {interaction.user.id}`",
                inline=True
            )
            
            embed.add_field(
                name="üè∑Ô∏è Categoria",
                value=categoria_valor,
                inline=True
            )
            
            embed.add_field(
                name="‚ö° Prioridade",
                value=prioridade_valor,
                inline=True
            )
            
            embed.add_field(
                name="üåê Idioma",
                value=f"**{self.idioma.value}**",
                inline=True
            )
            
            embed.add_field(
                name="üìã Assunto",
                value=f"```{self.assunto.value}```",
                inline=False
            )
            
            embed.add_field(
                name="üìù Descri√ß√£o Detalhada",
                value=self.descricao.value[:1000],
                inline=False
            )
            
            embed.add_field(
                name="‚ÑπÔ∏è Informa√ß√µes Adicionais",
                value=info_adicional_valor[:500],
                inline=False
            )
            
            embed.set_footer(
                text="Sistema de Tickets ‚Ä¢ Caos Hub",
                icon_url=interaction.guild.icon.url if interaction.guild.icon else None
            )
            
            # View com bot√£o para fechar
            close_view = CloseTicketView()
            await ticket_channel.send(f"{interaction.user.mention}", embed=embed, view=close_view)
            
            # Mensagem de confirma√ß√£o
            await interaction.response.send_message(
                f"‚úÖ **Ticket criado com sucesso!**\n\n"
                f"üìå Canal: {ticket_channel.mention}\n"
                f"üè∑Ô∏è Categoria: **{categoria_valor}**\n"
                f"‚ö° Prioridade: **{prioridade_valor}**\n\n"
                f"*Nossa equipe foi notificada e responder√° em breve!*",
                ephemeral=True
            )
        
        except discord.Forbidden:
            await interaction.response.send_message(
                "‚ùå **Erro de Permiss√£o!**\n\n"
                "O bot n√£o tem permiss√£o para criar canais nesta categoria.\n"
                "Verifique as permiss√µes do bot!",
                ephemeral=True
            )
        except Exception as e:
            print(f"[ERRO TICKET] {e}")
            await interaction.response.send_message(
                f"‚ùå **Erro ao criar ticket!**\n\n"
                f"Detalhes: `{str(e)}`\n\n"
                f"Entre em contato com um administrador!",
                ephemeral=True
            )

# View com bot√£o para abrir ticket
class TicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="Abrir Ticket", style=discord.ButtonStyle.green, emoji="üé´", custom_id="open_ticket")
    async def open_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild_id = str(interaction.guild.id)
        
        # Verificar se o sistema est√° ativado
        if guild_id not in ticket_config or not ticket_config[guild_id].get('enabled'):
            await interaction.response.send_message("‚ùå Sistema de tickets desativado!", ephemeral=True)
            return
        
        config = ticket_config[guild_id]
        category_id = config.get('category_id')
        
        if not category_id:
            await interaction.response.send_message("‚ùå Sistema n√£o configurado!", ephemeral=True)
            return
        
        category = interaction.guild.get_channel(category_id)
        if not category:
            await interaction.response.send_message("‚ùå Categoria n√£o encontrada!", ephemeral=True)
            return
        
        # Verificar se o usu√°rio j√° tem um ticket aberto
        for channel in category.channels:
            if channel.name.endswith(f"-{interaction.user.id}"):
                await interaction.response.send_message(f"‚ùå Voc√™ j√° tem um ticket aberto: {channel.mention}", ephemeral=True)
                return
        
        # Mostrar painel de sele√ß√£o
        panel_embed = discord.Embed(
            title="üé´ CONFIGURAR SEU TICKET",
            description="**Selecione as op√ß√µes abaixo antes de continuar:**\n\n"
                       "üè∑Ô∏è **Categoria** - Tipo do seu ticket\n"
                       "‚ö° **Prioridade** - Urg√™ncia do atendimento\n\n"
                       "*Ap√≥s selecionar, clique em ‚úÖ Continuar*",
            color=0x00ff88
        )
        panel_embed.set_footer(text="As sele√ß√µes s√£o salvas automaticamente")
        
        panel_view = TicketCategoryView(config, category, interaction.user)
        await interaction.response.send_message(embed=panel_embed, view=panel_view, ephemeral=True)

# View com bot√£o para fechar ticket
class CloseTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="Fechar Ticket", style=discord.ButtonStyle.red, emoji="üîí", custom_id="close_ticket")
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.manage_channels:
            await interaction.response.send_message("‚ùå Apenas staff pode fechar!", ephemeral=True)
            return
        
        # CANAL DE LOG
        log_channel_id = 1424050835460980889
        log_channel = interaction.guild.get_channel(log_channel_id)
        
        if log_channel:
            try:
                ticket_channel = interaction.channel
                
                # Coletar mensagens do ticket
                messages = []
                async for msg in ticket_channel.history(limit=100, oldest_first=True):
                    messages.append(msg)
                
                # EMBED DE LOG DETALHADO
                log_embed = discord.Embed(
                    title="üîí TICKET FECHADO",
                    description=f"**Canal:** {ticket_channel.name}\n**ID:** `{ticket_channel.id}`",
                    color=0xff0000,
                    timestamp=discord.utils.utcnow()
                )
                
                # Extrair informa√ß√µes do primeiro embed
                if messages and messages[0].embeds:
                    embed_inicial = messages[0].embeds[0]
                    
                    for field in embed_inicial.fields:
                        if "Aberto por" in field.name:
                            log_embed.add_field(name="üë§ Aberto por", value=field.value, inline=True)
                        elif "Assunto" in field.name:
                            log_embed.add_field(name="üìã Assunto", value=field.value, inline=False)
                        elif "Descri√ß√£o" in field.name:
                            log_embed.add_field(name="üìù Descri√ß√£o", value=field.value[:1024], inline=False)
                        elif "Info Adicional" in field.name:
                            log_embed.add_field(name="‚ÑπÔ∏è Info Adicional", value=field.value[:1024], inline=False)
                
                # Quem fechou
                log_embed.add_field(
                    name="üîí Fechado por",
                    value=f"{interaction.user.mention}\n`ID: {interaction.user.id}`",
                    inline=True
                )
                
                # Estat√≠sticas
                total_mensagens = len(messages)
                usuarios_participantes = len(set(msg.author.id for msg in messages if not msg.author.bot))
                
                log_embed.add_field(
                    name="üìä Estat√≠sticas",
                    value=f"**Mensagens:** {total_mensagens}\n**Participantes:** {usuarios_participantes}",
                    inline=True
                )
                
                # Dura√ß√£o
                if messages:
                    criado_em = messages[0].created_at
                    fechado_em = discord.utils.utcnow()
                    duracao = fechado_em - criado_em
                    
                    horas = int(duracao.total_seconds() // 3600)
                    minutos = int((duracao.total_seconds() % 3600) // 60)
                    
                    log_embed.add_field(
                        name="‚è±Ô∏è Dura√ß√£o",
                        value=f"{horas}h {minutos}m",
                        inline=True
                    )
                
                log_embed.set_footer(text="Sistema de Tickets ‚Ä¢ Caos Hub")
                
                # Enviar embed
                await log_channel.send(embed=log_embed)
                
                # CRIAR ARQUIVO COM HIST√ìRICO COMPLETO
                historico_texto = f"=== HIST√ìRICO DO TICKET: {ticket_channel.name} ===\n\n"
                
                for msg in messages:
                    timestamp = msg.created_at.strftime("%d/%m/%Y %H:%M:%S")
                    autor = f"{msg.author.display_name} ({msg.author.id})"
                    conteudo = msg.content if msg.content else "[Embed ou anexo]"
                    
                    historico_texto += f"[{timestamp}] {autor}:\n{conteudo}\n\n"
                
                # Enviar arquivo
                import io
                arquivo = discord.File(
                    io.BytesIO(historico_texto.encode('utf-8')),
                    filename=f"ticket_{ticket_channel.name}_{discord.utils.utcnow().strftime('%Y%m%d_%H%M%S')}.txt"
                )
                
                await log_channel.send(
                    content=f"üìÑ **Hist√≥rico completo do ticket `{ticket_channel.name}`:**",
                    file=arquivo
                )
                
            except Exception as e:
                print(f"[ERRO LOG TICKET] {e}")
        
        await interaction.response.send_message("üîí Fechando ticket...", ephemeral=True)
        await interaction.channel.delete(reason=f"Ticket fechado por {interaction.user}")

# ========================================
# SISTEMA AUTOM√ÅTICO DE NICKNAMES
# ========================================

# FUN√á√ÉO DESABILITADA - CAUSAVA DUPLICA√á√ïES
async def update_nickname_for_roles_DISABLED(member):
    """Atualiza o nickname do membro baseado nos cargos que possui"""
    try:
        # Salvar nickname original se ainda n√£o foi salvo (SEM prefixos)
        if member.id not in original_nicknames:
            clean_name = member.display_name
            # Remover qualquer prefixo existente para salvar o nome limpo
            for prefix in CARGO_PREFIXES.values():
                if clean_name.startswith(prefix + " "):
                    clean_name = clean_name[len(prefix + " "):]
                    break
            original_nicknames[member.id] = clean_name
        
        # Verificar se o membro tem algum cargo com prefixo
        prefixes_to_add = []
        for role in member.roles:
            if role.id in CARGO_PREFIXES:
                prefix = CARGO_PREFIXES[role.id]
                if prefix not in prefixes_to_add:
                    prefixes_to_add.append(prefix)
        
        # Obter nickname original (sem prefixos)
        original_nick = original_nicknames.get(member.id, member.name)
        
        # Remover prefixos existentes do nickname atual
        current_nick = member.display_name
        for prefix in CARGO_PREFIXES.values():
            if current_nick.startswith(prefix + " "):
                current_nick = current_nick[len(prefix + " "):]
        
        # Construir novo nickname
        if prefixes_to_add:
            # Ordenar prefixos por import√¢ncia (admin > mod > vip, etc)
            priority_order = ["[OWNER]", "[ADMIN]", "[MOD]", "[SUB]", "[STAFF]", "[DEV]", "[DESIGN]", "[YT]", "[LIVE]", "[VIP]", "[PREMIUM]", "[BOOST]"]
            prefixes_to_add.sort(key=lambda x: priority_order.index(x) if x in priority_order else 999)
            
            # Usar apenas o prefixo de maior prioridade
            new_nickname = f"{prefixes_to_add[0]} {current_nick}"
        else:
            # Sem cargos especiais, usar nickname original
            new_nickname = original_nick
        
        # Limitar tamanho do nickname (Discord tem limite de 32 caracteres)
        if len(new_nickname) > 32:
            # Truncar o nome mas manter o prefixo
            if prefixes_to_add:
                prefix = prefixes_to_add[0]
                max_name_length = 32 - len(prefix) - 1  # -1 para o espa√ßo
                truncated_name = current_nick[:max_name_length]
                new_nickname = f"{prefix} {truncated_name}"
            else:
                new_nickname = new_nickname[:32]
        
        # Atualizar nickname se mudou
        if member.display_name != new_nickname:
            await member.edit(nick=new_nickname, reason="Atualiza√ß√£o autom√°tica de nickname por cargo")
            print(f"‚úÖ Nickname atualizado: {member.name} -> {new_nickname}")
            return True
        
        return False
        
    except discord.Forbidden:
        print(f"‚ùå Sem permiss√£o para alterar nickname de {member.display_name}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao atualizar nickname de {member.display_name}: {e}")
        return False

# Evento COMPLETAMENTE removido para evitar duplica√ß√µes

# Comando para atualizar nicknames manualmente
# COMANDO DESABILITADO - CAUSAVA DUPLICA√á√ïES
# @bot.command(name='updatenicks')
# @commands.has_permissions(administrator=True)
async def update_nicks_command_DISABLED(ctx):
    """Atualiza os nicknames de todos os membros baseado nos cargos"""
    
    embed_start = discord.Embed(
        title="üîÑ ATUALIZANDO NICKNAMES",
        description="Iniciando atualiza√ß√£o autom√°tica de nicknames...",
        color=0x00ff00
    )
    msg = await ctx.reply(embed=embed_start)
    
    updated_count = 0
    total_members = len([m for m in ctx.guild.members if not m.bot])
    
    for member in ctx.guild.members:
        if member.bot:
            continue
            
        # success = await update_nickname_for_roles_DISABLED(member)
        success = False  # Desabilitado
        if success:
            updated_count += 1
        
        # Pequena pausa para evitar rate limit
        await asyncio.sleep(0.1)
    
    embed_result = discord.Embed(
        title="‚úÖ NICKNAMES ATUALIZADOS",
        description=f"**Processo conclu√≠do!**\n\nüìä **Estat√≠sticas:**\nüë• **Membros processados:** {total_members}\n‚úÖ **Nicknames atualizados:** {updated_count}\nüéØ **Taxa de sucesso:** {(updated_count/total_members*100):.1f}%",
        color=0x00ff00
    )
    embed_result.add_field(
        name="üîß Cargos Monitorados",
        value="‚Ä¢ `Administrador` ‚Üí `[ADM]`\n‚Ä¢ `Staff` ‚Üí `[STF]`\n‚Ä¢ `Moderador` ‚Üí `[MOD]`\n‚Ä¢ `Sub Moderador` ‚Üí `[SBM]`",
        inline=False
    )
    embed_result.set_footer(text="Sistema de Nicknames Autom√°ticos ‚Ä¢ Caos Hub")
    
    await msg.edit(embed=embed_result)

# @update_nicks_command.error
# async def update_nicks_error(ctx, error):
#     if isinstance(error, commands.MissingPermissions):
#         await ctx.reply("‚ùå Voc√™ precisa ser **ADMINISTRADOR** para usar este comando!")

# ========================================
# COMANDO ADDROLE - ADICIONAR CARGOS E PREFIXOS
# ========================================

@bot.command(name='addrole')
@is_sub_moderator_or_higher()
async def add_role_new(ctx, cargo: discord.Role = None, usuario: discord.Member = None):
    """Adiciona cargo com hierarquia autom√°tica e prefixo"""

    if not cargo or not usuario:
        embed = discord.Embed(
            title="‚ùå Uso Incorreto",
            description="Use: `.addrole @cargo @usu√°rio` ",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return

    # Recarregar membro para garantir que roles est√£o atualizadas
    usuario = await ctx.guild.fetch_member(usuario.id)

    if cargo in usuario.roles:
        embed = discord.Embed(
            title="‚ö†Ô∏è Cargo J√° Possui",
            description=f"**{usuario.display_name}** j√° possui o cargo **{cargo.name}**!",
            color=0xffaa00
        )
        embed.add_field(name="üìã Informa√ß√£o", value=f"**Usu√°rio:** {usuario.mention}\n**Cargo:** {cargo.mention}", inline=False)
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        return
    
    try:
        HIERARCHY = {
            1365633918593794079: 4,  # ADM
            1365634226254254150: 3,  # STF
            1365633102973763595: 2,  # MOD
            1365631940434333748: 1   # SBM
        }

        removed_roles = []

        # Remover cargos conflitantes de mesma hierarquia
        if cargo.id in HIERARCHY:
            for role in list(usuario.roles):
                if role.id in HIERARCHY and role.id != cargo.id:
                    await usuario.remove_roles(role)
                    removed_roles.append(role.name)

        await usuario.add_roles(cargo)
        
        # Atualizar nickname se houver prefixo
        nickname_msg = ""
        if cargo.id in CARGO_PREFIXES:
            clean_name = usuario.display_name
            for prefix in CARGO_PREFIXES.values():
                if clean_name.startswith(prefix + " "):
                    clean_name = clean_name[len(prefix) + 1:]
                    break

            new_nickname = f"{CARGO_PREFIXES[cargo.id]} {clean_name}"
            if len(new_nickname) > 32:
                clean_name = clean_name[:32 - len(CARGO_PREFIXES[cargo.id]) - 1]
                new_nickname = f"{CARGO_PREFIXES[cargo.id]} {clean_name}"

            await usuario.edit(nick=new_nickname)
            nickname_msg = f"\nüè∑Ô∏è **Nickname:** `{new_nickname}` "
        
        embed = discord.Embed(
            title="‚úÖ CARGO ADICIONADO",
            description=f"**{cargo.name}** foi adicionado a **{usuario.display_name}**!",
            color=0x00ff00
        )

        details = f"**Usu√°rio:** {usuario.mention}\n**Cargo:** {cargo.mention}\n**Moderador:** {ctx.author.mention}"
        if removed_roles:
            details += f"\nüîÑ **Removidos:** {', '.join(removed_roles)}"
        details += nickname_msg

        embed.add_field(name="üìã Detalhes", value=details, inline=False)
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except Exception as e:
        embed = discord.Embed(title="‚ùå ERRO", description=f"Erro ao adicionar cargo: {e}", color=0xff0000)
        await ctx.reply(embed=embed)

@add_role_new.error
async def addrole_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        embed = discord.Embed(
            title="‚ùå Permiss√£o Negada",
            description="Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.RoleNotFound):
        embed = discord.Embed(
            title="‚ùå Cargo N√£o Encontrado",
            description="Cargo n√£o encontrado! Certifique-se de mencionar um cargo v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Usu√°rio N√£o Encontrado",
            description="Usu√°rio n√£o encontrado! Certifique-se de mencionar um usu√°rio v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.RoleNotFound):
        embed = discord.Embed(
            title="‚ùå Cargo N√£o Encontrado",
            description="Cargo n√£o encontrado! Certifique-se de mencionar um cargo v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Usu√°rio N√£o Encontrado",
            description="Usu√°rio n√£o encontrado! Certifique-se de mencionar um usu√°rio v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)

# ========================================
# COMANDO REMOVEROLE - REMOVER CARGOS
# ========================================

@bot.command(name='removerole')
@is_sub_moderator_or_higher()
async def remove_role_new(ctx, cargo: discord.Role = None, usuario: discord.Member = None):
    """Remove cargo e restaura nickname com hierarquia"""

    if not cargo or not usuario:
        embed = discord.Embed(
            title="‚ùå Uso Incorreto",
            description="Use: `.removerole @cargo @usu√°rio` ",
            color=0xff0000
        )
        await ctx.reply(embed=embed)
        return

    usuario = await ctx.guild.fetch_member(usuario.id)

    if cargo not in usuario.roles:
        embed = discord.Embed(
            title="‚ö†Ô∏è Cargo N√£o Possui",
            description=f"**{usuario.display_name}** n√£o possui **{cargo.name}**!",
            color=0xffaa00
        )
        await ctx.reply(embed=embed)
        return
    
    try:
        HIERARCHY = {
            1365633918593794079: 4,  # ADM
            1365634226254254150: 3,  # STF
            1365633102973763595: 2,  # MOD
            1365631940434333748: 1   # SBM
        }

        await usuario.remove_roles(cargo)
        usuario = await ctx.guild.fetch_member(usuario.id)  # Garantir roles atualizadas
        
        nickname_msg = ""
        if cargo.id in CARGO_PREFIXES:
            clean_name = usuario.display_name
            for prefix in CARGO_PREFIXES.values():
                if clean_name.startswith(prefix + " "):
                    clean_name = clean_name[len(prefix) + 1:]
                    break

            # Encontrar o prefixo de maior cargo restante
            highest_role = None
            highest_level = 0
            for role in usuario.roles:
                if role.id in HIERARCHY and role.id in CARGO_PREFIXES:
                    if HIERARCHY[role.id] > highest_level:
                        highest_level = HIERARCHY[role.id]
                        highest_role = role

            if highest_role:
                new_nickname = f"{CARGO_PREFIXES[highest_role.id]} {clean_name}"
                await usuario.edit(nick=new_nickname)
                nickname_msg = f"\nüè∑Ô∏è **Nickname atualizado:** `{new_nickname}` "
            else:
                await usuario.edit(nick=clean_name)
                nickname_msg = f"\nüè∑Ô∏è **Nickname restaurado:** `{clean_name}` "
        
        embed = discord.Embed(
            title="‚úÖ CARGO REMOVIDO",
            description=f"**{cargo.name}** foi removido de **{usuario.display_name}**!",
            color=0xff4444
        )

        details = f"**Usu√°rio:** {usuario.mention}\n**Cargo:** {cargo.mention}\n**Moderador:** {ctx.author.mention}{nickname_msg}"
        embed.add_field(name="üìã Detalhes", value=details, inline=False)
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
        
    except Exception as e:
        embed = discord.Embed(title="‚ùå ERRO", description=f"Erro ao remover cargo: {e}", color=0xff0000)
        await ctx.reply(embed=embed)

@remove_role_new.error
async def removerole_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        embed = discord.Embed(
            title="‚ùå Permiss√£o Negada",
            description="Voc√™ precisa ser **Sub Moderador** ou ter permiss√µes de modera√ß√£o para usar este comando!",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.RoleNotFound):
        embed = discord.Embed(
            title="‚ùå Cargo N√£o Encontrado",
            description="Cargo n√£o encontrado! Certifique-se de mencionar um cargo v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Usu√°rio N√£o Encontrado",
            description="Usu√°rio n√£o encontrado! Certifique-se de mencionar um usu√°rio v√°lido.",
            color=0xff0000
        )
        embed.set_footer(text="Sistema de Cargos ‚Ä¢ Caos Hub")
        await ctx.reply(embed=embed)

# ========================================
# CONFIGURA√á√ÉO E INICIALIZA√á√ÉO
# ========================================

# ========================================
# SERVIDOR HTTP PARA UPTIMEROBOT (ANTI-HIBERNA√á√ÉO)
# ========================================
# Este servidor recebe pings do UptimeRobot para manter o bot acordado 24/7

class HealthHandler(BaseHTTPRequestHandler):
    def do_HEAD(self):
        """Responde √†s requisi√ß√µes HEAD do UptimeRobot"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        # Log do ping HEAD recebido
        current_time = datetime.now().strftime('%H:%M:%S')
        print(f'üåê [{current_time}] HEAD request do UptimeRobot - Bot mantido acordado!')
    
    def do_GET(self):
        """Responde aos pings do UptimeRobot"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        # P√°gina HTML bonita para mostrar status
        uptime = time.time() - start_time if 'start_time' in globals() else 0
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Caos Bot - Status</title>
            <meta charset="utf-8">
            <style>
                body {{ 
                    font-family: Arial, sans-serif; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    margin: 0;
                }}
                .container {{
                    text-align: center;
                    background: rgba(0,0,0,0.3);
                    padding: 40px;
                    border-radius: 20px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                }}
                h1 {{ font-size: 3em; margin: 0; }}
                .status {{ color: #00ff88; font-size: 1.5em; margin: 20px 0; }}
                .info {{ font-size: 1.2em; opacity: 0.9; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ Caos Bot</h1>
                <div class="status">‚úÖ ONLINE 24/7</div>
                <div class="info">‚è±Ô∏è Uptime: {hours}h {minutes}m</div>
                <div class="info">üîÑ Sistema Anti-Hiberna√ß√£o Ativo</div>
                <div class="info">üíö Mantido pelo UptimeRobot</div>
            </div>
        </body>
        </html>
        """
        self.wfile.write(html.encode('utf-8'))
        
        # Log do ping recebido
        current_time = datetime.now().strftime('%H:%M:%S')
        print(f'üåê [{current_time}] GET request do UptimeRobot - Bot mantido acordado!')
    
    def log_message(self, format, *args):
        pass  # Silencia logs HTTP padr√£o

def start_http_server():
    """Inicia servidor HTTP para receber pings do UptimeRobot"""
    global start_time
    start_time = time.time()
    
    port = int(os.environ.get('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    print(f'üåê Servidor HTTP iniciado na porta {port}')
    print(f'üîó URL do bot: https://seu-app.onrender.com')
    print(f'üìç Configure no UptimeRobot: Ping a cada 5 minutos')
    server.serve_forever()

# Token do bot principal (usando vari√°vel de ambiente para seguran√ßa)
TOKEN = os.getenv('DISCORD_TOKEN')

# ========================================
# SISTEMA DE M√öSICA COM WAVELINK/LAVALINK
# ========================================
"""
Sistema profissional de m√∫sica usando Wavelink (Lavalink).
Muito mais est√°vel que yt-dlp direto.
Lavalink roda localmente no mesmo container (localhost:2333).
"""

# Configura√ß√£o do Lavalink (local no mesmo container)
# NOTA: J√° definido no in√≠cio do arquivo, n√£o redefinir aqui

# Cores padr√£o para embeds
COLOR_SUCCESS = 0xff8c00  # Laranja
COLOR_ERROR = 0xff4d4d    # Vermelho

# Sistema de m√∫sica removido - foco em modera√ß√£o e vendas

# Pool global de bots (para rastreamento)
music_bots_pool = {}

# Pool de controle de disponibilidade
bot_pool = {
    'CAOS Music 1': {'busy': False, 'guild_id': None},
    'CAOS Music 2': {'busy': False, 'guild_id': None},
    'CAOS Music 3': {'busy': False, 'guild_id': None},
    'CAOS Music 4': {'busy': False, 'guild_id': None},
}

def pick_available_bot(guild_id):
    """Retorna o bot designado para este guild ou um livre"""
    # Verificar se j√° tem bot designado para este guild
    for name, info in bot_pool.items():
        if info['guild_id'] == guild_id and info['busy']:
            return name
    
    # Nenhum designado, pegar primeiro livre
    for name, info in bot_pool.items():
        if not info['busy']:
            return name
    
    return None  # Todos ocupados

def mark_bot_busy(name, guild_id):
    """Marca bot como ocupado"""
    if name in bot_pool:
        bot_pool[name]['busy'] = True
        bot_pool[name]['guild_id'] = guild_id
        print(f'[POOL] üîí {name} ocupado no servidor {guild_id}')

def mark_bot_free(name):
    """Libera bot"""
    if name in bot_pool:
        guild_id = bot_pool[name]['guild_id']
        bot_pool[name]['busy'] = False
        bot_pool[name]['guild_id'] = None
        print(f'[Pool] üîì {name} liberado (estava em {guild_id})')

# ========================================
# FUN√á√ïES AUXILIARES
# ========================================

def placeholder_function():
    pass

# ========================================
# INICIALIZA√á√ÉO DO BOT
# ========================================

# Fun√ß√£o tempor√°ria removida - c√≥digo de m√∫sica deletado

# ===== TEMP =====
    intents = discord.Intents.default()
    intents.message_content = True
    intents.guilds = True
    intents.voice_states = True
    
    music_bot = commands.Bot(command_prefix='mc.', intents=intents, help_command=None)
    
    # Fila ISOLADA para este bot
    bot_queues = {}
    
    def get_bot_queue(guild_id):
        if guild_id not in bot_queues:
            bot_queues[guild_id] = MusicQueue()
        return bot_queues[guild_id]
    
    # Fun√ß√£o para retornar o nome (evita closure)
    def this_name():
        return bot_name
    
    @music_bot.event
    async def on_ready(bot_name=bot_name, music_bot=music_bot):
        print(f'‚úÖ {music_bot.user} ({bot_name}) is online. Trying to connect to Lavalink...')
        print(f'üìä [{music_bot.user}] conectado em {len(music_bot.guilds)} servidor(es)')
        
        # Status personalizado
        try:
            await music_bot.change_presence(
                activity=discord.Activity(type=discord.ActivityType.listening, name="mc.p | mc.play"),
                status=discord.Status.online
            )
        except Exception as e:
            print(f"[{bot_name}] Erro ao definir status: {e}")
        
        # Conectar ao Lavalink com retry robusto
        try:
            await connect_lavalink(music_bot, identifier=bot_name)
            music_bots_pool[bot_name] = {'bot': music_bot, 'online': True}
            print(f"[{bot_name}] Lavalink connected.")
        except Exception as e:
            print(f"[{bot_name}] Lavalink connect failed: {e}")
    
    @music_bot.event
    async def on_wavelink_track_end(payload: wavelink.TrackEndEventPayload):
        """Auto-play pr√≥xima m√∫sica"""
        player = payload.player
        if not player:
            return
        
        queue_obj = get_bot_queue(player.guild.id)
        
        # Loop de m√∫sica
        if queue_obj.loop_mode == 'song' and queue_obj.current:
            await player.play(queue_obj.current)
            await player.set_volume(queue_obj.volume)
            print(f'[{bot_name}] üîÇ Loop: {queue_obj.current.title}')
            return
        
        # Pr√≥xima da fila
        if queue_obj.queue:
            next_track = queue_obj.queue.popleft()
            queue_obj.current = next_track
            queue_obj.skip_votes.clear()
            
            await player.play(next_track)
            await player.set_volume(queue_obj.volume)
            print(f'[{bot_name}] ‚è≠Ô∏è Pr√≥xima: {next_track.title}')
        else:
            # Fila vazia, liberar bot
            mark_bot_free(bot_name)
            queue_obj.bot_name = None
    
    # Helper para verificar se este bot √© o designado
    def is_assigned_for_guild(guild_id):
        """Verifica se este bot √© o designado para o guild"""
        assigned = pick_available_bot(guild_id)
        # Se n√£o houver atribui√ß√£o e este bot estiver livre, pode assumir
        if assigned is None and not bot_pool[bot_name]['busy']:
            return True
        return assigned == bot_name
    
    @music_bot.command(name='play', aliases=['p'])
    async def play_cmd(ctx, *, query: str):
        """mc.play <m√∫sica> ou mc.p <m√∫sica>"""
        bot_name = this_name()
        guild_id = ctx.guild.id

        # 1) S√≥ responde se designado
        if not is_assigned_for_guild(guild_id):
            return

        # 2) Se o usu√°rio n√£o estiver em um canal de voz
        if not ctx.author.voice or not ctx.author.voice.channel:
            return await ctx.reply(embed=discord.Embed(
                description="‚ùå Voc√™ precisa estar em um canal de voz!",
                color=COLOR_ERROR
            ))

        # 3) Verifica se h√° nodes conectados (auto-reconex√£o)
        if not any(node.status == wavelink.NodeStatus.CONNECTED for node in wavelink.Pool.nodes.values()):
            msg = await ctx.reply(embed=discord.Embed(
                description="üîå Nenhum node Lavalink conectado. Tentando reconectar...",
                color=COLOR_SUCCESS
            ))
            success = await connect_lavalink(ctx.bot, identifier=bot_name)
            if not success:
                return await msg.edit(embed=discord.Embed(
                    description="‚ùå Falha ao reconectar com o Lavalink.",
                    color=COLOR_ERROR
                ))
            await asyncio.sleep(3)
            await msg.delete()

        # 4) Marcar bot ocupado
        mark_bot_busy(bot_name, guild_id)
        queue_obj = get_bot_queue(guild_id)
        queue_obj.bot_name = bot_name

        # 5) Buscar m√∫sica
        try:
            track = await wavelink.YouTubeTrack.search(query, return_first=True)
            if not track:
                mark_bot_free(bot_name)
                return await ctx.reply(embed=discord.Embed(
                    description="‚ùå Nenhum resultado encontrado.",
                    color=COLOR_ERROR
                ))
        except Exception as e:
            mark_bot_free(bot_name)
            return await ctx.reply(embed=discord.Embed(
                description=f"‚ùå Erro ao buscar: {str(e)[:150]}",
                color=COLOR_ERROR
            ))

        # 6) Conectar ao canal de voz
        try:
            vc: wavelink.Player = ctx.voice_client or await ctx.author.voice.channel.connect(cls=wavelink.Player)
            print(f'[{bot_name}] üîä Conectado ao canal de voz em {ctx.guild.name}')
        except Exception as e:
            mark_bot_free(bot_name)
            return await ctx.reply(embed=discord.Embed(
                description=f"‚ùå Erro ao conectar no canal de voz: {e}",
                color=COLOR_ERROR
            ))

        # 7) Se j√° est√° tocando, adicionar √† fila
        if vc.playing:
            queue_obj.queue.append(track)
            embed = discord.Embed(
                title="üìã Adicionado √† fila",
                description=f"**{track.title}**",
                color=COLOR_SUCCESS
            )
            embed.add_field(name="Posi√ß√£o", value=f"#{len(queue_obj.queue)}", inline=True)
            embed.set_footer(text=f"Bot: {bot_name}")
            return await ctx.reply(embed=embed)

        # 8) Tocar m√∫sica
        queue_obj.current = track
        queue_obj.current_requester = ctx.author.id
        queue_obj.skip_votes.clear()

        try:
            await vc.play(track)
            await vc.set_volume(queue_obj.volume)
        except Exception as e:
            mark_bot_free(bot_name)
            return await ctx.reply(embed=discord.Embed(
                description=f"‚ùå Erro ao tocar: {e}",
                color=COLOR_ERROR
            ))

        print(f'[{bot_name}] ‚ñ∂Ô∏è Tocando: {track.title} em {ctx.guild.name}')

        # 9) Criar painel
        try:
            view = MusicControlPanel(ctx, queue_obj)
            embed_panel = await view.create_embed()
            panel_msg = await ctx.send(embed=embed_panel, view=view)
            queue_obj.control_message = panel_msg
            queue_obj.control_view = view
        except:
            pass

        # 10) Mensagem de sucesso
        embed = discord.Embed(
            description=f"‚ñ∂Ô∏è Tocando agora: **{track.title}**",
            color=COLOR_SUCCESS
        )
        await ctx.reply(embed=embed)
    
    @music_bot.command(name='skip', aliases=['s'])
    async def skip_cmd(ctx):
        """Pula a m√∫sica atual"""
        name = this_name()
        
        # S√≥ responde se designado
        if not is_assigned_for_guild(ctx.guild.id):
            return
        
        player: wavelink.Player = ctx.guild.voice_client
        
        if not player or not player.playing:
            return await ctx.reply(
                embed=discord.Embed(description="‚ùå Nada tocando.", color=COLOR_ERROR)
            )
        
        await player.stop()
        print(f'[{name}] ‚è≠Ô∏è Skip solicitado em {ctx.guild.name}')
        return await ctx.reply(
            embed=discord.Embed(description="‚è≠Ô∏è M√∫sica pulada!", color=COLOR_SUCCESS)
        )
    
    @music_bot.command(name='stop')
    async def stop_cmd(ctx):
        """Para a m√∫sica e limpa a fila"""
        name = this_name()
        
        # S√≥ responde se designado
        if not is_assigned_for_guild(ctx.guild.id):
            return
        
        player: wavelink.Player = ctx.guild.voice_client
        
        if not player:
            return await ctx.reply(
                embed=discord.Embed(description="‚ùå N√£o estou em um canal de voz.", color=COLOR_ERROR)
            )
        
        queue_obj = get_bot_queue(ctx.guild.id)
        queue_obj.queue.clear()
        queue_obj.current = None
        queue_obj.bot_name = None
        
        mark_bot_free(name)
        
        await player.disconnect()
        print(f'[{name}] ‚èπÔ∏è Stop e desconectado em {ctx.guild.name}')
        return await ctx.reply(
            embed=discord.Embed(description="‚èπÔ∏è Parado e desconectado.", color=COLOR_SUCCESS)
        )
    
    return music_bot

async def start_music_bot(name, token):
    """Inicia um bot de m√∫sica usando a factory"""
    try:
        if not token:
            print(f'‚ùå Token n√£o configurado para {name}')
            return
        
        # Criar bot usando factory (evita closure bug)
        music_bot = create_music_bot(name, token)
        
        # Iniciar bot
        await music_bot.start(token)
        
    except Exception as e:
        print(f'‚ùå Erro ao iniciar {name}: {e}')
        import traceback
        traceback.print_exc()

def run_discord_bot():
    """Executa o bot Discord em thread separada"""
    import time
    time.sleep(5)  # Aguarda Flask iniciar primeiro
    try:
        print('üöÄ Iniciando bot Discord...')
        bot.run(TOKEN)
    except Exception as e:
        print(f'‚ùå Erro no bot Discord: {e}')
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    print('=' * 60)
    print('INICIANDO CAOS BOT - WEB SERVICE')
    print('=' * 60)
    
    # Verificar token principal
    if not TOKEN:
        print('ERRO: DISCORD_TOKEN nao encontrado!')
        exit(1)
    
    import os
    port = int(os.getenv("PORT", 10000))
    
    print(f'Porta: {port}')
    print(f'REDIRECT_URI: {DISCORD_REDIRECT_URI}')
    
    # Iniciar bot Discord em thread separada DEPOIS do Flask
    print('Iniciando bot Discord em background...')
    bot_thread = threading.Thread(target=run_discord_bot, daemon=True)
    bot_thread.start()
    
    # Flask como PROCESSO PRINCIPAL (BLOCKING - CRITICO!)
    print('Iniciando Flask como processo principal...')
    print('Flask vai rodar em modo blocking (correto para Web Service)')
    
    try:
        # MODO PRODUCTION - SEM DEBUG
        app.run(
            host="0.0.0.0",
            port=port,
            debug=False,
            use_reloader=False,
            threaded=True  # Permite multiplas conexoes
        )
    except Exception as e:
        print(f'ERRO CRITICO NO FLASK: {e}')
        import traceback
        traceback.print_exc()
        exit(1)

# Sistema anti-hiberna√ß√£o j√° definido no in√≠cio do arquivo

